{"version":3,"sources":["components/SearchBar.tsx","utils/Jikan.ts","components/SearchResults.tsx","components/TierList/CharacterTile.tsx","components/TierList/Tier.tsx","components/TierList/constants.ts","components/TierList/TierList.tsx","pages/ListMaker.tsx","components/Header.tsx","App.tsx","serviceWorker.js","index.js"],"names":["SearchType","useStyles","makeStyles","theme","createStyles","root","display","alignItems","margin","backgroundColor","input","marginLeft","spacing","flex","fontSize","iconButton","padding","divider","height","select","CharacterRole","Rating","SearchBar","onSearch","onChangeSearchType","className","defaultValue","classes","useState","searchType","setSearchType","Paper","component","onSubmit","FormControl","variant","Select","value","onChange","event","target","MenuItem","Anime","Manga","Divider","orientation","InputBase","placeholder","name","autoComplete","IconButton","type","aria-label","gridGap","gridTemplateColumns","animePanel","borderRadius","outline","cursor","animePanel__title","fontWeight","animePanel__image","maxWidth","loadingCircle","SearchResults","data","loading","onSelect","filteredData","filter","elem","Object","values","indexOf","rated","r","map","res","anime","key","mal_id","onClick","title","alt","src","image_url","characterTile","position","flexGrow","overflow","characterTile__name","top","left","right","zIndex","whiteSpace","textOverflow","characterTile__image","width","CharacterTile","char","flexWrap","minHeight","tierLabel","color","list","Tier","group","listItems","labelColour","index","onTierChange","setList","useEffect","style","verticalAlign","DefaultColourOrder","DefaultTiers","unrankedList","marginTop","border","button","marginRight","buttonGroup","marginBottom","btnIcon","store","window","localStorage","TierList","malId","characterData","tierlistEl","useRef","tierData","saveData","getItem","JSON","parse","sorted","unsorted","getSaveData","id","current","handleTierChange","Button","domtoimage","toBlob","then","blob","saveAs","catch","error","console","setItem","stringify","ref","tier","searchBar","ListMaker","searchResult","setSearchResult","isLoading","setLoading","setMalId","setCharacterData","showSnackbar","setShowSnackbar","errorMsg","setErrorMsg","handleCloseError","preventDefault","searchQuery","limit","searchValue","elements","search","length","axios","get","params","q","results","searchManga","log","getAnimeCharactersStaff","characters","getMangaCharacters","CircularProgress","size","Snackbar","open","autoHideDuration","onClose","elevation","severity","menuButton","Header","AppBar","Toolbar","Typography","darkTheme","createMuiTheme","palette","App","ThemeProvider","Boolean","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"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","file":"static/js/main.b0ec9891.chunk.js","sourcesContent":["import React, { FC, useState } from \"react\";\nimport { makeStyles, Theme, createStyles } from \"@material-ui/core/styles\";\n//import Button from \"@material-ui/core/Button\";\n//import TextField from \"@material-ui/core/TextField\";\nimport Paper from \"@material-ui/core/Paper\";\nimport IconButton from \"@material-ui/core/IconButton\";\nimport SearchIcon from \"@material-ui/icons/Search\";\nimport InputBase from \"@material-ui/core/InputBase\";\n//import MenuIcon from \"@material-ui/icons/Menu\";\nimport Divider from \"@material-ui/core/Divider\";\nimport Select from \"@material-ui/core/Select\";\nimport { Menu, MenuItem, FormControl } from \"@material-ui/core\";\n\nconst useStyles = makeStyles((theme: Theme) =>\n  createStyles({\n    root: {\n      //padding: \"2px 4px\",\n      display: \"flex\",\n      alignItems: \"center\",\n      margin: \"0 40px\",\n      backgroundColor: \"var(--darker-grey)\",\n    },\n    input: {\n      marginLeft: theme.spacing(1),\n      flex: 1,\n      //color: \"var(--lighter-grey)\",\n      fontSize: 20,\n    },\n    iconButton: {\n      padding: 10,\n      //color: \"var(--lighter-grey)\",\n    },\n    divider: {\n      height: 28,\n      margin: 4,\n    },\n    select: {\n      //color: \"var(--lighter-grey)\",\n      padding: \"0 12px\",\n    },\n  })\n);\n\ninterface SearchProps {\n  onSearch: OnSearchFunc;\n  onChangeSearchType: OnChangeSearchType;\n  className?: string;\n  defaultValue: SearchType;\n}\n\ninterface OnSearchFunc {\n  (event: React.FormEvent<HTMLDivElement>): void;\n}\ninterface OnChangeSearchType {\n  (event: React.ChangeEvent<{ value: SearchType }>): void;\n}\n\nexport enum SearchType {\n  Anime = \"Anime\",\n  Manga = \"Manga\",\n}\n\nconst SearchBar: FC<SearchProps> = ({\n  onSearch,\n  onChangeSearchType,\n  className,\n  defaultValue,\n}) => {\n  const classes = useStyles();\n  const [searchType, setSearchType] = useState(defaultValue);\n\n  const handleChangeSearchType = (\n    event: React.ChangeEvent<{ value: unknown }>\n  ): void => {\n    setSearchType(event.target.value as SearchType);\n\n    //TODO: find a better way...\n    onChangeSearchType({\n      ...event,\n      target: { value: event.target.value as SearchType },\n    } as React.ChangeEvent<{ value: SearchType }>);\n  };\n\n  return (\n    <div className={className}>\n      <Paper component=\"form\" className={classes.root} onSubmit={onSearch}>\n        <FormControl variant=\"outlined\">\n          <Select\n            value={searchType}\n            onChange={handleChangeSearchType}\n            className={classes.select}\n          >\n            <MenuItem value={SearchType.Anime}>Anime</MenuItem>\n            <MenuItem value={SearchType.Manga}>Manga</MenuItem>\n          </Select>\n        </FormControl>\n        <Divider className={classes.divider} orientation=\"vertical\" />\n        <InputBase\n          className={classes.input}\n          placeholder=\"Search\"\n          name=\"search\"\n          autoComplete=\"off\"\n        />\n        <IconButton\n          type=\"submit\"\n          className={classes.iconButton}\n          aria-label=\"search\"\n        >\n          <SearchIcon />\n        </IconButton>\n      </Paper>\n    </div>\n  );\n};\n\nexport default SearchBar;\n","import axios, { AxiosResponse } from \"axios\";\n\n/*\n * Helper methods that will call Jikan's HTTP API. I need to make my own jikan-client one day...\n */\n\nexport enum CharacterRole {\n  Main = \"Main\",\n  Supporting = \"Supporting\",\n}\n\nexport enum Rating {\n  g = \"G\",\n  pg = \"PG\",\n  pg13 = \"PG-13\",\n  r17 = \"R\",\n  r = \"R+\",\n  rx = \"Rx\",\n}\nexport interface AnimeSearchResult {\n  mal_id: number;\n  url: string;\n  image_url: string;\n  title: string;\n  airing: boolean;\n  synopsis: string;\n  type: string;\n  episodes: number;\n  score: number;\n  start_date: string;\n  end_date: string;\n  members: number;\n  rated: Rating;\n}\n\nexport interface AnimeCharacterData {\n  image_url: string;\n  mal_id: number;\n  name: string;\n  role: CharacterRole;\n  voice_actors: any[];\n}\n\nexport interface DragItem {\n  id: number;\n}\n\nexport interface DragAnimeCharItem extends AnimeCharacterData, DragItem {}\n\n/**\n * Search MAL for a matching anime\n * @param searchQuery The search term to use\n * @param limit Max results returned\n */\nexport const searchAnime = (\n  searchQuery: string,\n  limit?: number\n): Promise<AxiosResponse<any>> => {\n  return axios.get(\"https://api.jikan.moe/v3/search/anime\", {\n    params: {\n      q: searchQuery,\n      limit,\n    },\n  });\n};\n\n/**\n * Search MAL for a matching manga\n * @param searchQuery The search term to use\n * @param limit Max results returned\n */\nexport const searchManga = (\n  searchQuery: string,\n  limit?: number\n): Promise<AxiosResponse<any>> => {\n  return axios.get(\"https://api.jikan.moe/v3/search/manga\", {\n    params: {\n      q: searchQuery,\n      limit,\n    },\n  });\n};\n\n/**\n * Gets an anime's staff and character list.\n * @param malId The anime's id to get the info for\n */\nexport const getAnimeCharactersStaff = (\n  malId: number\n): Promise<AxiosResponse<any>> => {\n  return axios.get(`https://api.jikan.moe/v3/anime/${malId}/characters_staff`);\n};\n\n/**\n * Gets a manga's character list.\n * @param malId The manga's id to get the info for\n */\nexport const getMangaCharacters = (\n  malId: number\n): Promise<AxiosResponse<any>> => {\n  return axios.get(`https://api.jikan.moe/v3/manga/${malId}/characters`);\n};\n","import React, { FC } from \"react\";\nimport { makeStyles, Theme, createStyles } from \"@material-ui/core/styles\";\nimport { AnimeSearchResult, Rating } from \"../utils/Jikan\";\n\n/* eslint-disable @typescript-eslint/camelcase */\nconst useStyles = makeStyles((theme: Theme) =>\n  createStyles({\n    root: {\n      display: \"grid\",\n      gridGap: \"20px\",\n      gridTemplateColumns: \"repeat(auto-fill, minmax(200px, 1fr))\",\n    },\n    animePanel: {\n      borderRadius: 3,\n      backgroundColor: \"var(--darker-grey)\",\n      \"&:hover\": {\n        outline: \"2px solid var(--lighter-grey)\",\n        cursor: \"pointer\",\n      },\n    },\n    animePanel__title: {\n      fontSize: 18,\n      fontWeight: 500,\n      display: \"block\",\n      padding: \"8px\",\n    },\n    animePanel__image: {\n      maxWidth: 200,\n      height: \"auto\",\n    },\n    loadingCircle: {\n      margin: \"100px auto\",\n    },\n  })\n);\n/* eslint-enable @typescript-eslint/camelcase */\n\ninterface SearchResultProps {\n  data: AnimeSearchResult[];\n  loading: boolean;\n  onSelect: OnSelectFunction;\n  className?: string;\n}\n\ninterface OnSelectFunction {\n  (malId: number): void;\n}\n\nconst SearchResults: FC<SearchResultProps> = ({\n  data,\n  loading,\n  onSelect,\n  className,\n}) => {\n  const classes = useStyles();\n  const filteredData = data.filter((elem) => {\n    //TODO: fix this. OH GOD WHY. TYPESCRIPT ENUMS ARE USELESS :'(\n\n    //console.log(`${elem.title} ${elem.rated}`);\n\n    return (\n      Object.values(Rating).indexOf(elem.rated) <=\n      Object.values(Rating).indexOf(Rating.r)\n    );\n  });\n\n  const renderAnimePanel = (anime: AnimeSearchResult): JSX.Element => {\n    return (\n      <div\n        className={classes.animePanel}\n        key={anime.mal_id}\n        onClick={(): void => {\n          onSelect(anime.mal_id);\n        }}\n      >\n        <div className={classes.animePanel__title}>{anime.title}</div>\n        <img\n          alt={anime.title}\n          src={anime.image_url}\n          className={classes.animePanel__image}\n        />\n      </div>\n    );\n  };\n\n  if (loading) {\n    return <div></div>;\n  } else {\n    return (\n      <div className={className}>\n        <div className={classes.root}>\n          {!loading && filteredData.map((res) => renderAnimePanel(res))}\n        </div>\n      </div>\n    );\n  }\n};\n\nexport default SearchResults;\n","import { AnimeCharacterData } from \"../../utils/Jikan\";\nimport React, { FC, useState } from \"react\";\nimport { makeStyles, Theme, createStyles } from \"@material-ui/core/styles\";\n\nconst IMAGE_SIZE = 100;\n\n/* eslint-disable @typescript-eslint/camelcase */\nconst useStyles = makeStyles((theme: Theme) =>\n  createStyles({\n    characterTile: {\n      position: \"relative\",\n      flexGrow: 0,\n      outline: \"1px solid var(--lighter-grey)\",\n      height: IMAGE_SIZE,\n      overflow: \"hidden\",\n      cursor: \"pointer\",\n    },\n    characterTile__name: {\n      position: \"absolute\",\n      top: 0,\n      left: 0,\n      right: 0,\n      zIndex: 1,\n      fontSize: 14,\n      fontWeight: 500,\n      whiteSpace: \"nowrap\",\n      textOverflow: \"ellipsis\",\n      overflow: \"hidden\",\n      backgroundColor: \"rgb(20, 20, 20, 0.65)\",\n      padding: \"3px 4px\",\n    },\n    characterTile__image: {\n      width: IMAGE_SIZE,\n      height: \"auto\",\n    },\n  })\n);\n/* eslint-enable @typescript-eslint/camelcase */\n\ninterface CharacterTileProps {\n  char: AnimeCharacterData;\n}\n\n//Tile that represents a character.\nconst CharacterTile: FC<CharacterTileProps> = ({ char }): JSX.Element => {\n  const classes = useStyles();\n\n  return (\n    <div className={classes.characterTile} key={char.mal_id}>\n      <div className={classes.characterTile__name} title={char.name}>\n        {char.name}\n      </div>\n      <img\n        alt={char.name}\n        src={char.image_url}\n        className={classes.characterTile__image}\n      />\n    </div>\n  );\n};\n\nexport default CharacterTile;\n","import React, { useState, FC, useEffect } from \"react\";\nimport { makeStyles, Theme, createStyles } from \"@material-ui/core/styles\";\nimport { ReactSortable } from \"react-sortablejs\";\nimport { DragAnimeCharItem } from \"../../utils/Jikan\";\nimport CharacterTile from \"./CharacterTile\";\n\nconst useStyles = makeStyles((theme: Theme) =>\n  createStyles({\n    root: {\n      display: \"flex\",\n      flexWrap: \"wrap\",\n      outline: \"1px solid red\",\n      minHeight: 100,\n      //minWidth: 600,\n    },\n    tierLabel: {\n      width: \"80px\",\n      fontSize: 30,\n      fontWeight: 600,\n      flexGrow: 0,\n      color: \"black\",\n      //lineHeight: \"100px\",\n    },\n    list: {\n      flexGrow: 1,\n      display: \"flex\",\n      flexWrap: \"wrap\",\n      maxWidth: \"calc(100% - 80px)\",\n    },\n  })\n);\n\ninterface TierProps {\n  name: string;\n  group: string;\n  listItems: DragAnimeCharItem[];\n  labelColour?: string;\n  index: number;\n  onTierChange: (list: DragAnimeCharItem[], index: number) => void;\n}\n\n//Represents a tier in a tierlist. Example: \"A-tier\"\nconst Tier: FC<TierProps> = ({\n  name,\n  group,\n  listItems,\n  labelColour,\n  index,\n  onTierChange,\n}): JSX.Element => {\n  const classes = useStyles();\n  const [list, setList] = useState<DragAnimeCharItem[]>(listItems || []);\n\n  useEffect(() => {\n    onTierChange(list, index);\n  }, [list, index]);\n\n  return (\n    <div className={classes.root}>\n      <div\n        className={classes.tierLabel}\n        style={{ backgroundColor: labelColour }}\n      >\n        <p style={{ verticalAlign: \"middle\" }}>{name}</p>\n      </div>\n      <ReactSortable\n        list={list}\n        setList={setList}\n        className={classes.list}\n        group={group}\n      >\n        {list.map((char) => (\n          <CharacterTile char={char} key={char.mal_id} />\n        ))}\n      </ReactSortable>\n    </div>\n  );\n};\n\nexport default Tier;\n","export const DefaultColourOrder = [\n  \"red\",\n  \"red-orange\",\n  \"orange\",\n  \"yellow\",\n  \"yellow-green\",\n  \"green\",\n  \"cyan\",\n  \"blue\",\n  \"dark-blu\",\n  \"pink\",\n  \"purple\",\n  \"black\",\n  \"dark-grey\",\n  \"grey\",\n  \"white\",\n];\n\nexport const DefaultTiers = [\"S\", \"A\", \"B\", \"C\", \"D\", \"E\", \"F\"];\n","import React, { FC, useState, useRef, useEffect } from \"react\";\nimport { makeStyles, Theme, createStyles } from \"@material-ui/core/styles\";\nimport { AnimeCharacterData, DragAnimeCharItem } from \"../../utils/Jikan\";\nimport { ReactSortable } from \"react-sortablejs\";\nimport CharacterTile from \"./CharacterTile\";\nimport Tier from \"./Tier\";\nimport { DefaultColourOrder, DefaultTiers } from \"./constants\";\nimport domtoimage from \"dom-to-image\";\nimport Button from \"@material-ui/core/Button\";\nimport { saveAs } from \"file-saver\";\n//import { Save, SaveAlt } from \"@material-ui/icons\";\nimport SaveIcon from \"@material-ui/icons/Save\";\nimport SaveAltIcon from \"@material-ui/icons/SaveAlt\";\n\n//Is 100 too big?\nconst IMAGE_SIZE = 100;\n\n/* eslint-disable @typescript-eslint/camelcase */\nconst useStyles = makeStyles((theme: Theme) =>\n  createStyles({\n    root: {\n      padding: 10,\n      backgroundColor: \"var(--dark-grey)\",\n    },\n    unrankedList: {\n      display: \"flex\",\n      flexWrap: \"wrap\",\n      marginTop: 20,\n    },\n    characterTile: {\n      position: \"relative\",\n      flexGrow: 0,\n      border: \"1px solid var(--lighter-grey)\",\n      height: IMAGE_SIZE,\n      overflow: \"hidden\",\n    },\n    characterTile__name: {\n      position: \"absolute\",\n      top: 0,\n      left: 0,\n      right: 0,\n      zIndex: 1,\n      fontSize: 14,\n      fontWeight: 500,\n      whiteSpace: \"nowrap\",\n      textOverflow: \"ellipsis\",\n      overflow: \"hidden\",\n      backgroundColor: \"rgb(20, 20, 20, 0.65)\",\n      padding: \"3px 4px\",\n    },\n    characterTile__image: {\n      maxWidth: IMAGE_SIZE,\n      height: \"auto\",\n    },\n    button: {\n      marginRight: theme.spacing(1),\n    },\n    buttonGroup: {\n      display: \"flex\",\n      marginBottom: theme.spacing(2),\n    },\n    btnIcon: {\n      marginRight: theme.spacing(1),\n    },\n  })\n);\n/* eslint-enable @typescript-eslint/camelcase */\n\ninterface TierListProps {\n  malId: number;\n  characterData: AnimeCharacterData[];\n}\n\ninterface TierData {\n  sorted: DragAnimeCharItem[][];\n  unsorted: DragAnimeCharItem[];\n}\n\nconst store = window.localStorage;\nconst getSaveData = (\n  malId: number,\n  characterData: DragAnimeCharItem[]\n): TierData => {\n  const saveData = store.getItem(`${malId}`);\n  if (saveData) {\n    return JSON.parse(saveData) as TierData;\n  } else {\n    return {\n      sorted: [],\n      unsorted: characterData,\n    };\n  }\n};\n\nconst TierList: FC<TierListProps> = ({ malId, characterData }): JSX.Element => {\n  const classes = useStyles();\n  const tierlistEl = useRef<HTMLDivElement>(null);\n  //const [tierRefs, setTierRefs] = useState<Node[]>([]);\n  const tierData = useRef<TierData>(\n    getSaveData(\n      malId,\n      characterData.map((char) => {\n        return { id: char.mal_id, ...char } as DragAnimeCharItem;\n      })\n    )\n  );\n\n  const [list, setList] = useState<DragAnimeCharItem[]>(\n    tierData.current.unsorted\n  );\n\n  //Handle \"download image\"\n  const handleExport = (): void => {\n    if (tierlistEl.current) {\n      domtoimage\n        .toBlob(tierlistEl.current)\n        .then((blob: Blob) => {\n          saveAs(blob, `tierlist-${malId}.png`);\n        })\n        .catch((error: any) => {\n          console.error(\"Could not generate image\", error);\n        });\n    }\n  };\n\n  //Handle save to browser localstorage\n  const handleSave = (): void => {\n    tierData.current.unsorted = list; //Update the unsorted list\n    store.setItem(`${malId}`, JSON.stringify(tierData.current));\n  };\n\n  //Propogate state upwards from Tier\n  const handleTierChange = (list: DragAnimeCharItem[], index: number): void => {\n    tierData.current.sorted[index] = list;\n  };\n\n  return (\n    <div>\n      <div className={classes.buttonGroup}>\n        <Button\n          onClick={handleExport}\n          className={classes.button}\n          variant=\"outlined\"\n        >\n          <SaveAltIcon className={classes.btnIcon} />\n          Download image\n        </Button>\n        <Button\n          onClick={handleSave}\n          className={classes.button}\n          variant=\"outlined\"\n        >\n          <SaveIcon className={classes.btnIcon} />\n          Save\n        </Button>\n      </div>\n      <div ref={tierlistEl} className={classes.root}>\n        {DefaultTiers.map((tier, index) => (\n          <Tier\n            index={index}\n            key={index}\n            //ref={tierRefs[index]}\n            onTierChange={handleTierChange}\n            name={tier}\n            listItems={tierData.current.sorted[index]}\n            group=\"tierlist\"\n            labelColour={`var(--tier-${DefaultColourOrder[index]})`}\n          />\n        ))}\n        <ReactSortable\n          group=\"tierlist\"\n          list={list}\n          setList={setList}\n          className={classes.unrankedList}\n        >\n          {list.map((char) => (\n            <CharacterTile char={char} key={char.mal_id} />\n          ))}\n        </ReactSortable>\n      </div>\n    </div>\n  );\n};\n\nexport default TierList;\n","import React, { useState, useEffect, useRef } from \"react\";\nimport \"./ListMaker.scss\";\nimport SearchBar from \"../components/SearchBar\";\nimport SearchResults from \"../components/SearchResults\";\nimport {\n  searchAnime,\n  searchManga,\n  getAnimeCharactersStaff,\n  AnimeSearchResult,\n  AnimeCharacterData,\n  getMangaCharacters,\n} from \"../utils/Jikan\";\nimport { makeStyles, Theme, createStyles } from \"@material-ui/core/styles\";\nimport CircularProgress from \"@material-ui/core/CircularProgress\";\nimport TierList from \"../components/TierList/TierList\";\nimport { SearchType } from \"../components/SearchBar\";\nimport { Snackbar } from \"@material-ui/core\";\nimport MuiAlert from \"@material-ui/lab/Alert\";\n\n//TODO: validate inputs\n\nconst useStyles = makeStyles((theme: Theme) =>\n  createStyles({\n    root: {\n      display: \"grid\",\n      gridGap: \"20px\",\n      gridTemplateColumns: \"repeat(auto-fill, minmax(200px, 1fr))\",\n    },\n    loadingCircle: {\n      margin: \"100px auto\",\n    },\n    searchBar: {\n      marginBottom: 40,\n    },\n  })\n);\n\nconst ListMaker: React.FunctionComponent = () => {\n  const [searchResult, setSearchResult] = useState<AnimeSearchResult[]>([]);\n  const [isLoading, setLoading] = useState<boolean>(false);\n  const [malId, setMalId] = useState<number>();\n  const [characterData, setCharacterData] = useState<AnimeCharacterData[]>([]);\n  const [showSnackbar, setShowSnackbar] = useState<boolean>(false);\n  const [errorMsg, setErrorMsg] = useState<string>(\"\");\n  const [searchType, setSearchType] = useState<SearchType>(SearchType.Anime);\n\n  const classes = useStyles();\n\n  //Show the snackbar when there's an error message available\n  useEffect(() => {\n    if (errorMsg) {\n      setShowSnackbar(true);\n    }\n  }, [errorMsg]);\n\n  //Handle a search submit\n  const handleSearch = (event: React.FormEvent<HTMLDivElement>): void => {\n    event.preventDefault();\n\n    //Clear the previous search's results\n    setCharacterData([]);\n    //Get the search value\n    const searchValue = ((event.target as HTMLFormElement).elements as any)\n      .search.value;\n\n    if (searchValue.length >= 3) {\n      setLoading(true);\n\n      if (searchType === SearchType.Anime) {\n        searchAnime(searchValue, 10).then((res) => {\n          setSearchResult(res.data.results);\n          setLoading(false);\n        });\n      } else if (searchType === SearchType.Manga) {\n        searchManga(searchValue, 10).then((res) => {\n          setSearchResult(res.data.results);\n          setLoading(false);\n        });\n      }\n    }\n  };\n\n  //Handle when a user clicks an anime/manga entry\n  const handleOnSelect = (malId: number): void => {\n    setLoading(true);\n\n    if (searchType === SearchType.Anime) {\n      getAnimeCharactersStaff(malId).then((res) => {\n        if (!res || res.data.characters.length === 0) {\n          setErrorMsg(\"Uh oh, looks like that Anime entry has no characters.\");\n        } else {\n          setMalId(malId);\n          setCharacterData(res.data.characters);\n        }\n        setLoading(false);\n      });\n    } else if (searchType === SearchType.Manga) {\n      getMangaCharacters(malId).then((res) => {\n        if (!res || res.data.characters.length === 0) {\n          setErrorMsg(\"Uh oh, looks like that Manga entry has no characters.\");\n        } else {\n          setMalId(malId);\n          setCharacterData(res.data.characters);\n        }\n        setLoading(false);\n      });\n    }\n  };\n\n  const handleCloseError = (): void => {\n    setShowSnackbar(false);\n    setErrorMsg(\"\");\n  };\n\n  return (\n    <div className=\"pageRoot\">\n      {/* <h2>Tierlist Maker</h2> */}\n      <SearchBar\n        onSearch={handleSearch}\n        className={classes.searchBar}\n        defaultValue={searchType}\n        onChangeSearchType={(event): void => {\n          setSearchType(event.target.value);\n          //searchType.current = event.target.value;\n          console.log(event.target.value);\n        }}\n      />\n      {!(characterData.length > 0) && (\n        <SearchResults\n          data={searchResult}\n          loading={isLoading}\n          onSelect={handleOnSelect}\n        />\n      )}\n      {isLoading && (\n        <CircularProgress size={150} className={classes.loadingCircle} />\n      )}\n      {characterData.length > 0 && malId && (\n        <TierList malId={malId} characterData={characterData} />\n      )}\n\n      <Snackbar\n        open={showSnackbar}\n        autoHideDuration={6000}\n        onClose={handleCloseError}\n      >\n        <MuiAlert\n          elevation={6}\n          variant=\"filled\"\n          onClose={handleCloseError}\n          severity=\"error\"\n        >\n          {errorMsg}\n        </MuiAlert>\n      </Snackbar>\n    </div>\n  );\n};\n\nexport default ListMaker;\n","import React from \"react\";\nimport \"./Header.scss\";\nimport {\n  AppBar,\n  Toolbar,\n  //IconButton,\n  Typography,\n  //Button,\n} from \"@material-ui/core\";\n//import MenuIcon from \"@material-ui/icons/Menu\";\nimport { makeStyles, Theme, createStyles } from \"@material-ui/core/styles\";\n\nconst useStyles = makeStyles((theme: Theme) =>\n  createStyles({\n    root: {\n      flexGrow: 1,\n    },\n    menuButton: {\n      marginRight: theme.spacing(2),\n    },\n    title: {\n      flexGrow: 1,\n    },\n  })\n);\n\nconst Header = (): JSX.Element => {\n  const classes = useStyles();\n\n  return (\n    <div className=\"header\">\n      <AppBar position=\"static\">\n        <Toolbar>\n          {/* <IconButton\n            edge=\"start\"\n            className={classes.menuButton}\n            color=\"inherit\"\n            aria-label=\"menu\"\n          >\n            <MenuIcon />\n          </IconButton> */}\n          <Typography variant=\"h4\" className={classes.title}>\n            Tierlist Maker\n          </Typography>\n          {/* <Button color=\"inherit\">Login</Button> */}\n        </Toolbar>\n      </AppBar>\n    </div>\n  );\n};\n\nexport default Header;\n","import * as React from \"react\";\n//import * as logo from './logo.svg';\nimport \"./App.scss\";\n//const logo = require(\"./logo.svg\") as string;\nimport ListMaker from \"./pages/ListMaker\";\nimport Header from \"./components/Header\";\nimport { createMuiTheme } from \"@material-ui/core/styles\";\nimport { ThemeProvider } from \"@material-ui/styles\";\n\nconst darkTheme = createMuiTheme({\n  palette: {\n    type: \"dark\",\n  },\n});\n\nfunction App() {\n  return (\n    <div id=\"app\">\n      <ThemeProvider theme={darkTheme}>\n        <Header />\n        <div id=\"appContent\">\n          <ListMaker />\n        </div>\n      </ThemeProvider>\n      {/* TODO: add routing here */}\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App.tsx\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}