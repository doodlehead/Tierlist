{"version":3,"sources":["components/SearchBar.tsx","utils/Jikan.ts","components/SearchResults.tsx","components/TierList/CharacterTile.tsx","components/TierList/Tier.tsx","components/TierList/constants.ts","components/TierList/TierList.tsx","pages/ListMaker.tsx","contexts/AppContext.tsx","components/Header.tsx","components/SideNav.tsx","App.tsx","serviceWorker.js","components/Firebase/context.js","components/Firebase/firebase.js","components/Firebase/index.js","index.js"],"names":["SearchType","useStyles","makeStyles","theme","createStyles","root","display","alignItems","margin","backgroundColor","input","marginLeft","spacing","flex","fontSize","iconButton","padding","divider","height","select","CharacterRole","Rating","SearchBar","onSearch","onChangeSearchType","className","defaultValue","classes","useState","searchType","setSearchType","Paper","component","onSubmit","FormControl","variant","Select","value","onChange","event","target","MenuItem","TVshow","Movie","Anime","Manga","Divider","orientation","InputBase","placeholder","name","autoComplete","IconButton","type","aria-label","gridGap","gridTemplateColumns","animePanel","borderRadius","outline","cursor","animePanel__title","fontWeight","animePanel__image","maxWidth","loadingCircle","SearchResults","data","loading","onSelect","filteredData","filter","elem","Object","values","indexOf","rated","r","map","res","anime","key","mal_id","onClick","title","alt","src","image_url","characterTile","position","flexGrow","overflow","characterTile__name","top","left","right","zIndex","whiteSpace","textOverflow","characterTile__image","width","CharacterTile","char","flexWrap","minHeight","tierLabel","color","list","Tier","group","listItems","labelColour","index","onTierChange","setList","useEffect","style","verticalAlign","DefaultColourOrder","DefaultTiers","unrankedList","marginTop","button","marginRight","buttonGroup","marginBottom","btnIcon","store","window","localStorage","TierList","malId","characterData","tierlistEl","useRef","tierData","saveData","getItem","JSON","parse","sorted","unsorted","getSaveData","id","current","handleTierChange","Button","domtoimage","toBlob","then","blob","saveAs","catch","error","console","minWidth","setItem","stringify","ref","tier","searchBar","ListMaker","searchResult","setSearchResult","isLoading","setLoading","setMalId","setCharacterData","showSnackbar","setShowSnackbar","errorMsg","setErrorMsg","handleCloseError","preventDefault","searchQuery","limit","searchValue","elements","search","length","axios","get","params","q","results","err","searchManga","log","getAnimeCharactersStaff","characters","response","message","getMangaCharacters","CircularProgress","size","Snackbar","open","autoHideDuration","onClose","elevation","severity","AppContext","React","createContext","showSidebar","menuButton","Header","Consumer","setShowSidebar","AppBar","Toolbar","edge","Typography","fullList","SideNav","history","useHistory","location","useLocation","Drawer","anchor","clsx","role","List","ListItem","push","ListItemIcon","ListItemText","primary","text","darkTheme","createMuiTheme","palette","App","ThemeProvider","Provider","path","Boolean","hostname","match","FirebaseContext","config","apiKey","process","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","Firebase","app","initializeApp","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"+OA6EYA,E,2KAhENC,EAAYC,aAAW,SAACC,GAAD,OAC3BC,YAAa,CACXC,KAAM,CACJC,QAAS,OACTC,WAAY,SACZC,OAAQ,QACRC,gBAAiB,sBAEnBC,MAAO,CACLC,WAAYR,EAAMS,QAAQ,GAC1BC,KAAM,EACNC,SAAU,IAEZC,WAAY,CACVC,QAAS,UAEXC,QAAS,CACPC,OAAQ,GACRV,OAAQ,GAEVW,OAAQ,CACNH,QAAS,QACTF,SAAU,IAEZ,4CAA6C,CAC3CT,KAAM,CACJC,QAAS,OACTC,WAAY,SACZC,OAAQ,SACRC,gBAAiB,sBAEnBC,MAAO,CACLC,WAAYR,EAAMS,QAAQ,GAC1BC,KAAM,EACNC,SAAU,IAEZC,WAAY,CACVC,QAAS,IAEXC,QAAS,CACPC,OAAQ,GACRV,OAAQ,GAEVW,OAAQ,CACNH,QAAS,iB,SAoBLhB,K,gBAAAA,E,cAAAA,E,cAAAA,E,eAAAA,M,KAOZ,IC9EYoB,EAKAC,EDgIGC,EAvDoB,SAAC,GAK7B,IAJLC,EAII,EAJJA,SACAC,EAGI,EAHJA,mBACAC,EAEI,EAFJA,UACAC,EACI,EADJA,aAEMC,EAAU1B,IADZ,EAEgC2B,mBAASF,GAFzC,mBAEGG,EAFH,KAEeC,EAFf,KAgBJ,OACE,yBAAKL,UAAWA,GACd,kBAACM,EAAA,EAAD,CAAOC,UAAU,OAAOP,UAAWE,EAAQtB,KAAM4B,SAAUV,GACzD,kBAACW,EAAA,EAAD,CAAaC,QAAQ,YACnB,kBAACC,EAAA,EAAD,CACEC,MAAOR,EACPS,SAlBqB,SAC7BC,GAEAT,EAAcS,EAAMC,OAAOH,OAG3Bb,EAAmB,2BACde,GADa,IAEhBC,OAAQ,CAAEH,MAAOE,EAAMC,OAAOH,WAWxBZ,UAAWE,EAAQR,QAEnB,kBAACsB,EAAA,EAAD,CAAUJ,MAAOrC,EAAW0C,QAA5B,WACA,kBAACD,EAAA,EAAD,CAAUJ,MAAOrC,EAAW2C,OAA5B,SACA,kBAACF,EAAA,EAAD,CAAUJ,MAAOrC,EAAW4C,OAA5B,SACA,kBAACH,EAAA,EAAD,CAAUJ,MAAOrC,EAAW6C,OAA5B,WAGJ,kBAACC,EAAA,EAAD,CAASrB,UAAWE,EAAQV,QAAS8B,YAAY,aACjD,kBAACC,EAAA,EAAD,CACEvB,UAAWE,EAAQjB,MACnBuC,YAAY,SACZC,KAAK,SACLC,aAAa,QAEf,kBAACC,EAAA,EAAD,CACEC,KAAK,SACL5B,UAAWE,EAAQZ,WACnBuC,aAAW,UAEX,kBAAC,IAAD,U,2BC9HElC,K,YAAAA,E,yBAAAA,M,cAKAC,K,MAAAA,E,QAAAA,E,aAAAA,E,QAAAA,E,OAAAA,E,SAAAA,M,KA2CL,IChDDpB,EAAYC,aAAW,SAACC,GAAD,OAC3BC,YAAa,CACXC,KAAM,CACJC,QAAS,OACTiD,QAAS,MACTC,oBAAoB,4BAAD,OAPD,IAOC,cAErBC,WAAY,CACVC,aAAc,EACdjD,gBAAiB,qBACjB,UAAW,CACTkD,QAAS,gCACTC,OAAQ,YAGZC,kBAAmB,CACjB/C,SAAU,GACVgD,WAAY,IACZxD,QAAS,QACTU,QAAS,OAEX+C,kBAAmB,CACjBC,SAxBkB,IAyBlB9C,OAAQ,QAEV+C,cAAe,CACbzD,OAAQ,cAEV,4CAA6C,CAC3CH,KAAM,CACJC,QAAS,OACTiD,QAAS,OACTC,oBAAqB,yCAEvBC,WAAY,CACVC,aAAc,EACdjD,gBAAiB,qBACjB,UAAW,CACTkD,QAAS,gCACTC,OAAQ,YAGZC,kBAAmB,CACjB/C,SAAU,GACVgD,WAAY,IACZxD,QAAS,QACTU,QAAS,OAEX+C,kBAAmB,CACjBC,SAAU,IACV9C,OAAQ,QAEV+C,cAAe,CACbzD,OAAQ,oBAoED0D,EAlD8B,SAAC,GAKvC,IAJLC,EAII,EAJJA,KACAC,EAGI,EAHJA,QACAC,EAEI,EAFJA,SACA5C,EACI,EADJA,UAEME,EAAU1B,IACVqE,EAAeH,EAAKI,QAAO,SAACC,GAKhC,OACEC,OAAOC,OAAOrD,GAAQsD,QAAQH,EAAKI,QACnCH,OAAOC,OAAOrD,GAAQsD,QAAQtD,EAAOwD,MAuBzC,OAAIT,EACK,8BAGL,yBAAK3C,UAAWA,GACd,yBAAKA,UAAWE,EAAQtB,OACpB+D,GAAWE,EAAaQ,KAAI,SAACC,GAAD,OAzBZC,EAyBsCD,EAvB5D,yBACEtD,UAAWE,EAAQ8B,WACnBwB,IAAKD,EAAME,OACXC,QAAS,WACPd,EAASW,EAAME,UAGjB,yBAAKzD,UAAWE,EAAQkC,mBAAoBmB,EAAMI,OAClD,yBACEC,IAAKL,EAAMI,MACXE,IAAKN,EAAMO,UACX9D,UAAWE,EAAQoC,qBAbF,IAACiB,Q,iBC1FtB/E,EAAYC,aAAW,SAACC,GAAD,OAC3BC,YAAa,CACXoF,cAAe,CACbC,SAAU,WACVC,SAAU,EACV/B,QAAS,gCACTzC,OAAQ,yBACRyE,SAAU,SACV/B,OAAQ,WAEVgC,oBAAqB,CACnBH,SAAU,WACVI,IAAK,EACLC,KAAM,EACNC,MAAO,EACPC,OAAQ,EACRlF,SAAU,GACVgD,WAAY,IACZmC,WAAY,SACZC,aAAc,WACdP,SAAU,SACVlF,gBAAiB,wBACjBO,QAAS,WAEXmF,qBAAsB,CACpBC,MAAO,yBACPlF,OAAQ,QAEV,4CAA6C,CAC3C0E,oBAAqB,CACnB9E,SAAU,UA6BHuF,EAjB+B,SAAC,GAA2B,IAAzBC,EAAwB,EAAxBA,KACzC3E,EAAU1B,IAEhB,OACE,yBAAKwB,UAAWE,EAAQ6D,cAAeP,IAAKqB,EAAKpB,QAC/C,yBAAKzD,UAAWE,EAAQiE,oBAAqBR,MAAOkB,EAAKpD,MACtDoD,EAAKpD,MAER,yBACEmC,IAAKiB,EAAKpD,KACVoC,IAAKgB,EAAKf,UACV9D,UAAWE,EAAQwE,yBCpDrBlG,EAAYC,aAAW,SAACC,GAAD,OAC3BC,YAAa,CACXC,KAAM,CACJC,QAAS,OACTiG,SAAU,OACV5C,QAAS,gBACT6C,UAAW,0BAEbC,UAAW,CACTL,MAAO,GACPtF,SAAU,GACVgD,WAAY,IACZ4B,SAAU,EACVgB,MAAO,SAETC,KAAM,CACJjB,SAAU,EACVpF,QAAS,OACTiG,SAAU,OACVvC,SAAU,qBAEZ,4CAA6C,CAC3CyC,UAAW,CACTL,MAAO,GACPtF,SAAU,UAqDH8F,EArCa,SAAC,GAOT,IANlB1D,EAMiB,EANjBA,KACA2D,EAKiB,EALjBA,MACAC,EAIiB,EAJjBA,UACAC,EAGiB,EAHjBA,YACAC,EAEiB,EAFjBA,MACAC,EACiB,EADjBA,aAEMtF,EAAU1B,IADC,EAEO2B,mBAA8BkF,GAAa,IAFlD,mBAEVH,EAFU,KAEJO,EAFI,KAQjB,OAJAC,qBAAU,WACRF,EAAaN,EAAMK,KAClB,CAACL,EAAMK,IAGR,yBAAKvF,UAAWE,EAAQtB,MACtB,yBACEoB,UAAWE,EAAQ8E,UACnBW,MAAO,CAAE3G,gBAAiBsG,IAE1B,uBAAGK,MAAO,CAAEC,cAAe,WAAanE,IAE1C,kBAAC,IAAD,CACEyD,KAAMA,EACNO,QAASA,EACTzF,UAAWE,EAAQgF,KACnBE,MAAOA,GAENF,EAAK7B,KAAI,SAACwB,GAAD,OACR,kBAAC,EAAD,CAAeA,KAAMA,EAAMrB,IAAKqB,EAAKpB,eC5ElCoC,EAAqB,CAChC,MACA,aACA,SACA,SACA,eACA,QACA,OACA,OACA,WACA,OACA,SACA,QACA,YACA,OACA,SAGWC,EAAe,CAAC,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,K,qFCCrDtH,EAAYC,aAAW,SAACC,GAAD,OAC3BC,YAAa,CAOXC,KAAM,CACJW,QAAS,GACTP,gBAAiB,oBAEnB+G,aAAc,CACZlH,QAAS,OACTiG,SAAU,OACVkB,UAAW,IA2BbC,OAAQ,CACNC,YAAaxH,EAAMS,QAAQ,IAE7BgH,YAAa,CACXtH,QAAS,OACTuH,aAAc1H,EAAMS,QAAQ,IAE9BkH,QAAS,CACPH,YAAaxH,EAAMS,QAAQ,SAgB3BmH,EAAQC,OAAOC,aA0GNC,EA1FqB,SAAC,GAA2C,IAAzCC,EAAwC,EAAxCA,MAAOC,EAAiC,EAAjCA,cACtCzG,EAAU1B,IACVoI,EAAaC,iBAAuB,MAEpCC,EAAWD,iBAnBC,SAClBH,EACAC,GAEA,IAAMI,EAAWT,EAAMU,QAAN,UAAiBN,IAClC,OAAIK,EACKE,KAAKC,MAAMH,GAEX,CACLI,OAAQ,GACRC,SAAUT,GAUZU,CACEX,EACAC,EAActD,KAAI,SAACwB,GACjB,OAAO,aAAEyC,GAAIzC,EAAKpB,QAAWoB,QAR0C,EAarD1E,mBACtB2G,EAASS,QAAQH,UAd0D,mBAatElC,EAbsE,KAahEO,EAbgE,KAsCvE+B,EAAmB,SAACtC,EAA2BK,GACnDuB,EAASS,QAAQJ,OAAO5B,GAASL,GAGnC,OACE,6BACE,yBAAKlF,UAAWE,EAAQiG,aACtB,kBAACsB,EAAA,EAAD,CACE/D,QA5Ba,WACfkD,EAAWW,SACbG,IACGC,OAAOf,EAAWW,SAClBK,MAAK,SAACC,GACLC,iBAAOD,EAAD,mBAAmBnB,EAAnB,YAEPqB,OAAM,SAACC,GACNC,QAAQD,MAAM,2BAA4BA,OAqB1ChI,UAAWE,EAAQ+F,OACnBvF,QAAQ,YAER,kBAAC,IAAD,CAAaV,UAAWE,EAAQmG,UALlC,YAMW,kBAAC,IAAD,CAAY6B,SAAU,KAAtB,UAEX,kBAACT,EAAA,EAAD,CACE/D,QAtBW,WACjBoD,EAASS,QAAQH,SAAWlC,EAC5BoB,EAAM6B,QAAN,UAAiBzB,GAASO,KAAKmB,UAAUtB,EAASS,WAqB5CvH,UAAWE,EAAQ+F,OACnBvF,QAAQ,YAER,kBAAC,IAAD,CAAUV,UAAWE,EAAQmG,UAL/B,SASF,yBAAKgC,IAAKzB,EAAY5G,UAAWE,EAAQtB,MACtCkH,EAAazC,KAAI,SAACiF,EAAM/C,GAAP,OAChB,kBAAC,EAAD,CACEA,MAAOA,EACP/B,IAAK+B,EAELC,aAAcgC,EACd/F,KAAM6G,EACNjD,UAAWyB,EAASS,QAAQJ,OAAO5B,GACnCH,MAAM,WACNE,YAAW,qBAAgBO,EAAmBN,GAAnC,UAGf,kBAAC,IAAD,CACEH,MAAM,WACNF,KAAMA,EACNO,QAASA,EACTzF,UAAWE,EAAQ6F,cAElBb,EAAK7B,KAAI,SAACwB,GAAD,OACR,kBAAC,EAAD,CAAeA,KAAMA,EAAMrB,IAAKqB,EAAKpB,gB,kBClK3CjF,EAAYC,aAAW,SAACC,GAAD,OAC3BC,YAAa,CACXC,KAAM,CACJC,QAAS,OACTiD,QAAS,OACTC,oBAAqB,yCAEvBS,cAAe,CACbzD,OAAQ,cAEVwJ,UAAW,CACTnC,aAAc,IAEhB,4CAA6C,CAC3CmC,UAAW,CACTnC,aAAc,UA0JPoC,EApJa,WAAO,IAAD,EACQrI,mBAA8B,IADtC,mBACzBsI,EADyB,KACXC,EADW,OAEAvI,oBAAkB,GAFlB,mBAEzBwI,EAFyB,KAEdC,EAFc,OAGNzI,qBAHM,mBAGzBuG,EAHyB,KAGlBmC,EAHkB,OAIU1I,mBAA+B,IAJzC,mBAIzBwG,EAJyB,KAIVmC,EAJU,OAKQ3I,oBAAkB,GAL1B,mBAKzB4I,EALyB,KAKXC,EALW,OAMA7I,mBAAiB,IANjB,mBAMzB8I,EANyB,KAMfC,EANe,OAOI/I,mBAAqB5B,EAAW0C,QAPpC,mBAOzBb,EAPyB,KAObC,EAPa,KAS1BH,EAAU1B,IAGhBkH,qBAAU,WACJuD,GACFD,GAAgB,KAEjB,CAACC,IAGJ,IA+EME,EAAmB,WACvBH,GAAgB,GAChBE,EAAY,KAGd,OACE,yBAAKlJ,UAAU,YAEb,kBAAC,EAAD,CACEF,SAxFe,SAACgB,GACpBA,EAAMsI,iBAGNN,EAAiB,IAEjB,INZFO,EACAC,EMWQC,EAAgBzI,EAAMC,OAA2ByI,SACpDC,OAAO7I,MAEN2I,EAAYG,QAAU,IACxBd,GAAW,GAEPxI,IAAe7B,EAAW4C,ONlBlCkI,EMmBkBE,ENlBlBD,EMkB+B,GNhBxBK,IAAMC,IAAI,wCAAyC,CACxDC,OAAQ,CACNC,EAAGT,EACHC,YMa+B1B,MAC3B,SAACtE,GACCoF,EAAgBpF,EAAIZ,KAAKqH,SACzBnB,GAAW,MAEb,SAACoB,GACCd,EAAY,uDACZN,GAAW,MAGNxI,IAAe7B,EAAW6C,ONbhB,SACzBiI,EACAC,GAEA,OAAOK,IAAMC,IAAI,wCAAyC,CACxDC,OAAQ,CACNC,EAAGT,EACHC,WMOEW,CAAYV,EAAa,IAAI3B,MAC3B,SAACtE,GACCoF,EAAgBpF,EAAIZ,KAAKqH,SACzBnB,GAAW,MAEb,SAACoB,GACCd,EAAY,uDACZN,GAAW,QA0Df5I,UAAWE,EAAQqI,UACnBtI,aAAcG,EACdL,mBAAoB,SAACe,GACnBT,EAAcS,EAAMC,OAAOH,OAE3BqH,QAAQiC,IAAIpJ,EAAMC,OAAOH,YAG1B+F,EAAc+C,OAAS,IACxB,kBAAC,EAAD,CACEhH,KAAM+F,EACN9F,QAASgG,EACT/F,SA9De,SAAC8D,GACtBkC,GAAW,GAEPxI,IAAe7B,EAAW4C,MNhBK,SACrCuF,GAEA,OAAOiD,IAAMC,IAAN,yCAA4ClD,EAA5C,sBMcHyD,CAAwBzD,GACrBkB,MAAK,SAACtE,GACAA,GAAsC,IAA/BA,EAAIZ,KAAK0H,WAAWV,QAK9Bb,EAASnC,GACToC,EAAiBxF,EAAIZ,KAAK0H,aAL1BlB,EACE,yDAMJN,GAAW,MAEZb,OAAM,SAACiC,GACNd,EAAYc,EAAIK,SAAS3H,KAAK4H,SAC9B1B,GAAW,MAENxI,IAAe7B,EAAW6C,ONvBP,SAChCsF,GAEA,OAAOiD,IAAMC,IAAN,yCAA4ClD,EAA5C,gBMqBH6D,CAAmB7D,GAChBkB,MAAK,SAACtE,GACAA,GAAsC,IAA/BA,EAAIZ,KAAK0H,WAAWV,QAK9Bb,EAASnC,GACToC,EAAiBxF,EAAIZ,KAAK0H,aAL1BlB,EACE,yDAMJN,GAAW,MAEZb,OAAM,SAACiC,GACNd,EAAYc,EAAIK,SAAS3H,KAAK4H,SAC9B1B,GAAW,SA8BdD,GACC,kBAAC6B,EAAA,EAAD,CAAkBC,KAAM,IAAKzK,UAAWE,EAAQsC,gBAEjDmE,EAAc+C,OAAS,GAAKhD,GAC3B,kBAAC,EAAD,CAAUA,MAAOA,EAAOC,cAAeA,IAGzC,kBAAC+D,EAAA,EAAD,CACEC,KAAM5B,EACN6B,iBAAkB,IAClBC,QAAS1B,GAET,kBAAC,IAAD,CACE2B,UAAW,EACXpK,QAAQ,SACRmK,QAAS1B,EACT4B,SAAS,SAER9B,M,0DC5KI+B,GAJIC,IAAMC,cAAqC,CAC5DC,aAAa,ICKT3M,GAAYC,aAAW,SAACC,GAAD,OAC3BC,YAAa,CACXC,KAAM,CACJqF,SAAU,GAEZmH,WAAY,CACVlF,YAAaxH,EAAMS,QAAQ,IAE7BwE,MAAO,CACLM,SAAU,GAEZ,4CAA6C,CAC3CN,MAAO,CACLM,SAAU,SAoCHoH,GA9BA,WACb,IAAMnL,EAAU1B,KAEhB,OACE,kBAAC,GAAW8M,SAAZ,MACG,gBAAGC,EAAH,EAAGA,eAAH,OACC,yBAAKvL,UAAU,UACb,kBAACwL,GAAA,EAAD,CAAQxH,SAAS,UACf,kBAACyH,GAAA,EAAD,KACE,kBAAC9J,EAAA,EAAD,CACE+J,KAAK,QACL1L,UAAWE,EAAQkL,WACnBnG,MAAM,UACNpD,aAAW,OACX6B,QAAS,yBAAM6H,QAAN,IAAMA,OAAN,EAAMA,GAAiB,KAEhC,kBAAC,KAAD,OAEF,kBAACI,GAAA,EAAD,CAAYjL,QAAQ,KAAKV,UAAWE,EAAQyD,OAA5C,yB,sKChCRnF,GAAYC,YAAW,CAC3ByG,KAAM,CACJP,MAAO,KAETiH,SAAU,CACRjH,MAAO,UASLkH,GAA4B,SAAC,GAA8B,IAA5BlB,EAA2B,EAA3BA,KAAMY,EAAqB,EAArBA,eACnCrL,EAAU1B,KACVsN,EAAUC,eACVC,EAAWC,eAEjBvG,qBAAU,WACM,OAAd6F,QAAc,IAAdA,MAAiB,KAChB,CAACS,IAuCJ,OACE,kBAACE,GAAA,EAAD,CAAQC,OAAQ,OAAQxB,KAAMA,EAAME,QAAS,yBAAMU,QAAN,IAAMA,OAAN,EAAMA,GAAiB,KApClE,yBACEvL,UAAWoM,aAAKlM,EAAQgF,MACxBmH,KAAK,gBAIL,kBAACC,GAAA,EAAD,KACE,kBAACC,GAAA,EAAD,CAAUtG,QAAM,EAACvC,QAAS,kBAAMoI,EAAQU,KAAK,OAC3C,kBAACC,GAAA,EAAD,KACE,kBAAC,KAAD,OAEF,kBAACC,GAAA,EAAD,CAAcC,QAAS,UAEzB,kBAACJ,GAAA,EAAD,CAAUtG,QAAM,EAACvC,QAAS,kBAAMoI,EAAQU,KAAK,qBAC3C,kBAACC,GAAA,EAAD,KACE,kBAAC,KAAD,OAEF,kBAACC,GAAA,EAAD,CAAcC,QAAS,uBAG3B,kBAACtL,EAAA,EAAD,MACA,kBAACiL,GAAA,EAAD,KACG,CAAC,WAAY,QAAS,QAAQjJ,KAAI,SAACuJ,EAAMrH,GAAP,OACjC,kBAACgH,GAAA,EAAD,CAAUtG,QAAM,EAACzC,IAAKoJ,GACpB,kBAACH,GAAA,EAAD,KACGlH,EAAQ,IAAM,EAAI,kBAAC,KAAD,MAAgB,kBAAC,KAAD,OAErC,kBAACmH,GAAA,EAAD,CAAcC,QAASC,YAetB,qBACb,kBAAC,GAAWtB,SAAZ,MACG,gBAAGH,EAAH,EAAGA,YAAaI,EAAhB,EAAgBA,eAAhB,OACC,kBAAC,GAAD,CAASZ,KAAMQ,IAAe,EAAOI,eAAgBA,Q,SC5ErDsB,GAAYC,aAAe,CAC/BC,QAAS,CACPnL,KAAM,UA4BKoL,GAxBH,WAA2B,IAAD,EACE7M,oBAAkB,GADpB,mBAC7BgL,EAD6B,KAChBI,EADgB,KAGpC,OACE,yBAAKjE,GAAG,OACN,kBAAC2F,GAAA,EAAD,CAAevO,MAAOmO,IACpB,kBAAC,GAAWK,SAAZ,CAAqBtM,MAAO,CAAEuK,cAAaI,mBACzC,kBAAC,GAAD,MACA,yBAAKjE,GAAG,cACN,kBAAC,KAAD,KACE,kBAAC,KAAD,KACE,kBAAC,KAAD,CAAO6F,KAAK,mBACV,kBAAC,EAAD,QAGJ,kBAAC,GAAD,YCrBMC,QACW,cAA7B7G,OAAOyF,SAASqB,UAEe,UAA7B9G,OAAOyF,SAASqB,UAEhB9G,OAAOyF,SAASqB,SAASC,MACvB,2DChBN,IAEeC,GAFStC,IAAMC,cAAc,M,6BCAtCsC,GAAS,CACbC,OAAQC,WACRC,WAAYD,2BACZE,YAAaF,iCACbG,UAAWH,WACXI,cAAeJ,uBACfK,kBAAmBL,YCLNM,GDSb,aAAe,qBACbC,KAAIC,cAAcV,KENtBW,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,GAAgBnB,SAAjB,CAA0BtM,MAAO,IAAIoN,IACnC,kBAAC,GAAD,QAGJM,SAASC,eAAe,SJsHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrB9G,MAAK,SAAA+G,GACJA,EAAaC,gBAEd7G,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAMsC,c","file":"static/js/main.e827d10e.chunk.js","sourcesContent":["import React, { FC, useState } from \"react\";\nimport { makeStyles, Theme, createStyles } from \"@material-ui/core/styles\";\n//import Button from \"@material-ui/core/Button\";\n//import TextField from \"@material-ui/core/TextField\";\nimport Paper from \"@material-ui/core/Paper\";\nimport IconButton from \"@material-ui/core/IconButton\";\nimport SearchIcon from \"@material-ui/icons/Search\";\nimport InputBase from \"@material-ui/core/InputBase\";\n//import MenuIcon from \"@material-ui/icons/Menu\";\nimport Divider from \"@material-ui/core/Divider\";\nimport Select from \"@material-ui/core/Select\";\nimport { Menu, MenuItem, FormControl } from \"@material-ui/core\";\n\nconst useStyles = makeStyles((theme: Theme) =>\n  createStyles({\n    root: {\n      display: \"flex\",\n      alignItems: \"center\",\n      margin: \"0 8px\",\n      backgroundColor: \"var(--darker-grey)\",\n    },\n    input: {\n      marginLeft: theme.spacing(1),\n      flex: 1,\n      fontSize: 16,\n    },\n    iconButton: {\n      padding: \"0 10px\",\n    },\n    divider: {\n      height: 28,\n      margin: 4,\n    },\n    select: {\n      padding: \"0 8px\",\n      fontSize: 14,\n    },\n    \"@media only screen and (min-width: 768px)\": {\n      root: {\n        display: \"flex\",\n        alignItems: \"center\",\n        margin: \"0 40px\",\n        backgroundColor: \"var(--darker-grey)\",\n      },\n      input: {\n        marginLeft: theme.spacing(1),\n        flex: 1,\n        fontSize: 20,\n      },\n      iconButton: {\n        padding: 10,\n      },\n      divider: {\n        height: 28,\n        margin: 4,\n      },\n      select: {\n        padding: \"0 12px\",\n      },\n    },\n  })\n);\n\ninterface SearchProps {\n  onSearch: OnSearchFunc;\n  onChangeSearchType: OnChangeSearchType;\n  className?: string;\n  defaultValue: SearchType;\n}\n\ninterface OnSearchFunc {\n  (event: React.FormEvent<HTMLDivElement>): void;\n}\ninterface OnChangeSearchType {\n  (event: React.ChangeEvent<{ value: SearchType }>): void;\n}\n\nexport enum SearchType {\n  TVshow = \"TVshow\",\n  Movie = \"Movie\",\n  Anime = \"Anime\",\n  Manga = \"Manga\",\n}\n\nconst SearchBar: FC<SearchProps> = ({\n  onSearch,\n  onChangeSearchType,\n  className,\n  defaultValue,\n}) => {\n  const classes = useStyles();\n  const [searchType, setSearchType] = useState(defaultValue);\n\n  const handleChangeSearchType = (\n    event: React.ChangeEvent<{ value: unknown }>\n  ): void => {\n    setSearchType(event.target.value as SearchType);\n\n    //TODO: find a better way...\n    onChangeSearchType({\n      ...event,\n      target: { value: event.target.value as SearchType },\n    } as React.ChangeEvent<{ value: SearchType }>);\n  };\n\n  return (\n    <div className={className}>\n      <Paper component=\"form\" className={classes.root} onSubmit={onSearch}>\n        <FormControl variant=\"outlined\">\n          <Select\n            value={searchType}\n            onChange={handleChangeSearchType}\n            className={classes.select}\n          >\n            <MenuItem value={SearchType.TVshow}>TV show</MenuItem>\n            <MenuItem value={SearchType.Movie}>Movie</MenuItem>\n            <MenuItem value={SearchType.Anime}>Anime</MenuItem>\n            <MenuItem value={SearchType.Manga}>Manga</MenuItem>\n          </Select>\n        </FormControl>\n        <Divider className={classes.divider} orientation=\"vertical\" />\n        <InputBase\n          className={classes.input}\n          placeholder=\"Search\"\n          name=\"search\"\n          autoComplete=\"off\"\n        />\n        <IconButton\n          type=\"submit\"\n          className={classes.iconButton}\n          aria-label=\"search\"\n        >\n          <SearchIcon />\n        </IconButton>\n      </Paper>\n    </div>\n  );\n};\n\nexport default SearchBar;\n","import axios, { AxiosResponse } from \"axios\";\n\n/*\n * Helper methods that will call Jikan's HTTP API. I need to make my own jikan-client one day...\n */\n\nexport enum CharacterRole {\n  Main = \"Main\",\n  Supporting = \"Supporting\",\n}\n\nexport enum Rating {\n  g = \"G\",\n  pg = \"PG\",\n  pg13 = \"PG-13\",\n  r17 = \"R\",\n  r = \"R+\",\n  rx = \"Rx\",\n}\nexport interface AnimeSearchResult {\n  mal_id: number;\n  url: string;\n  image_url: string;\n  title: string;\n  airing: boolean;\n  synopsis: string;\n  type: string;\n  episodes: number;\n  score: number;\n  start_date: string;\n  end_date: string;\n  members: number;\n  rated: Rating;\n}\n\nexport interface AnimeCharacterData {\n  image_url: string;\n  mal_id: number;\n  name: string;\n  role: CharacterRole;\n  voice_actors: any[];\n}\n\nexport interface DragItem {\n  id: number;\n}\n\nexport interface DragAnimeCharItem extends AnimeCharacterData, DragItem {}\n\n/**\n * Search MAL for a matching anime\n * @param searchQuery The search term to use\n * @param limit Max results returned\n */\nexport const searchAnime = (\n  searchQuery: string,\n  limit?: number\n): Promise<AxiosResponse<any>> => {\n  return axios.get(\"https://api.jikan.moe/v3/search/anime\", {\n    params: {\n      q: searchQuery,\n      limit,\n    },\n  });\n};\n\n/**\n * Search MAL for a matching manga\n * @param searchQuery The search term to use\n * @param limit Max results returned\n */\nexport const searchManga = (\n  searchQuery: string,\n  limit?: number\n): Promise<AxiosResponse<any>> => {\n  return axios.get(\"https://api.jikan.moe/v3/search/manga\", {\n    params: {\n      q: searchQuery,\n      limit,\n    },\n  });\n};\n\n/**\n * Gets an anime's staff and character list.\n * @param malId The anime's id to get the info for\n */\nexport const getAnimeCharactersStaff = (\n  malId: number\n): Promise<AxiosResponse<any>> => {\n  return axios.get(`https://api.jikan.moe/v3/anime/${malId}/characters_staff`);\n};\n\n/**\n * Gets a manga's character list.\n * @param malId The manga's id to get the info for\n */\nexport const getMangaCharacters = (\n  malId: number\n): Promise<AxiosResponse<any>> => {\n  return axios.get(`https://api.jikan.moe/v3/manga/${malId}/characters`);\n};\n","import React, { FC } from \"react\";\nimport { makeStyles, Theme, createStyles } from \"@material-ui/core/styles\";\nimport { AnimeSearchResult, Rating } from \"../utils/Jikan\";\n\nconst mobileItemWidth = 100;\n/* eslint-disable @typescript-eslint/camelcase */\nconst useStyles = makeStyles((theme: Theme) =>\n  createStyles({\n    root: {\n      display: \"grid\",\n      gridGap: \"5px\",\n      gridTemplateColumns: `repeat(auto-fill, minmax(${mobileItemWidth}px, 1fr))`,\n    },\n    animePanel: {\n      borderRadius: 3,\n      backgroundColor: \"var(--darker-grey)\",\n      \"&:hover\": {\n        outline: \"2px solid var(--lighter-grey)\",\n        cursor: \"pointer\",\n      },\n    },\n    animePanel__title: {\n      fontSize: 14,\n      fontWeight: 500,\n      display: \"block\",\n      padding: \"8px\",\n    },\n    animePanel__image: {\n      maxWidth: mobileItemWidth,\n      height: \"auto\",\n    },\n    loadingCircle: {\n      margin: \"100px auto\",\n    },\n    \"@media only screen and (min-width: 768px)\": {\n      root: {\n        display: \"grid\",\n        gridGap: \"20px\",\n        gridTemplateColumns: \"repeat(auto-fill, minmax(200px, 1fr))\",\n      },\n      animePanel: {\n        borderRadius: 3,\n        backgroundColor: \"var(--darker-grey)\",\n        \"&:hover\": {\n          outline: \"2px solid var(--lighter-grey)\",\n          cursor: \"pointer\",\n        },\n      },\n      animePanel__title: {\n        fontSize: 18,\n        fontWeight: 500,\n        display: \"block\",\n        padding: \"8px\",\n      },\n      animePanel__image: {\n        maxWidth: 200,\n        height: \"auto\",\n      },\n      loadingCircle: {\n        margin: \"100px auto\",\n      },\n    },\n  })\n);\n/* eslint-enable @typescript-eslint/camelcase */\n\ninterface SearchResultProps {\n  data: AnimeSearchResult[];\n  loading: boolean;\n  onSelect: OnSelectFunction;\n  className?: string;\n}\n\ninterface OnSelectFunction {\n  (malId: number): void;\n}\n\nconst SearchResults: FC<SearchResultProps> = ({\n  data,\n  loading,\n  onSelect,\n  className,\n}) => {\n  const classes = useStyles();\n  const filteredData = data.filter((elem) => {\n    //TODO: fix this. OH GOD WHY. TYPESCRIPT ENUMS ARE USELESS :'(\n\n    //console.log(`${elem.title} ${elem.rated}`);\n\n    return (\n      Object.values(Rating).indexOf(elem.rated) <=\n      Object.values(Rating).indexOf(Rating.r)\n    );\n  });\n\n  const renderAnimePanel = (anime: AnimeSearchResult): JSX.Element => {\n    return (\n      <div\n        className={classes.animePanel}\n        key={anime.mal_id}\n        onClick={(): void => {\n          onSelect(anime.mal_id);\n        }}\n      >\n        <div className={classes.animePanel__title}>{anime.title}</div>\n        <img\n          alt={anime.title}\n          src={anime.image_url}\n          className={classes.animePanel__image}\n        />\n      </div>\n    );\n  };\n\n  if (loading) {\n    return <div></div>;\n  } else {\n    return (\n      <div className={className}>\n        <div className={classes.root}>\n          {!loading && filteredData.map((res) => renderAnimePanel(res))}\n        </div>\n      </div>\n    );\n  }\n};\n\nexport default SearchResults;\n","import { AnimeCharacterData } from \"../../utils/Jikan\";\nimport React, { FC, useState } from \"react\";\nimport { makeStyles, Theme, createStyles } from \"@material-ui/core/styles\";\n\n/* eslint-disable @typescript-eslint/camelcase */\nconst useStyles = makeStyles((theme: Theme) =>\n  createStyles({\n    characterTile: {\n      position: \"relative\",\n      flexGrow: 0,\n      outline: \"1px solid var(--lighter-grey)\",\n      height: \"var(--image-tile-size)\",\n      overflow: \"hidden\",\n      cursor: \"pointer\",\n    },\n    characterTile__name: {\n      position: \"absolute\",\n      top: 0,\n      left: 0,\n      right: 0,\n      zIndex: 1,\n      fontSize: 10,\n      fontWeight: 500,\n      whiteSpace: \"nowrap\",\n      textOverflow: \"ellipsis\",\n      overflow: \"hidden\",\n      backgroundColor: \"rgb(20, 20, 20, 0.65)\",\n      padding: \"3px 4px\",\n    },\n    characterTile__image: {\n      width: \"var(--image-tile-size)\",\n      height: \"auto\",\n    },\n    \"@media only screen and (min-width: 768px)\": {\n      characterTile__name: {\n        fontSize: 14,\n      },\n    },\n  })\n);\n/* eslint-enable @typescript-eslint/camelcase */\n\ninterface CharacterTileProps {\n  char: AnimeCharacterData;\n}\n\n//Tile that represents a character.\nconst CharacterTile: FC<CharacterTileProps> = ({ char }): JSX.Element => {\n  const classes = useStyles();\n\n  return (\n    <div className={classes.characterTile} key={char.mal_id}>\n      <div className={classes.characterTile__name} title={char.name}>\n        {char.name}\n      </div>\n      <img\n        alt={char.name}\n        src={char.image_url}\n        className={classes.characterTile__image}\n      />\n    </div>\n  );\n};\n\nexport default CharacterTile;\n","import React, { useState, FC, useEffect } from \"react\";\nimport { makeStyles, Theme, createStyles } from \"@material-ui/core/styles\";\nimport { ReactSortable } from \"react-sortablejs\";\nimport { DragAnimeCharItem } from \"../../utils/Jikan\";\nimport CharacterTile from \"./CharacterTile\";\n\nconst useStyles = makeStyles((theme: Theme) =>\n  createStyles({\n    root: {\n      display: \"flex\",\n      flexWrap: \"wrap\",\n      outline: \"1px solid red\",\n      minHeight: \"var(--image-tile-size)\",\n    },\n    tierLabel: {\n      width: 40,\n      fontSize: 20,\n      fontWeight: 600,\n      flexGrow: 0,\n      color: \"black\",\n    },\n    list: {\n      flexGrow: 1,\n      display: \"flex\",\n      flexWrap: \"wrap\",\n      maxWidth: \"calc(100% - 80px)\",\n    },\n    \"@media only screen and (min-width: 768px)\": {\n      tierLabel: {\n        width: 80,\n        fontSize: 24,\n      },\n    },\n  })\n);\n\ninterface TierProps {\n  name: string;\n  group: string;\n  listItems: DragAnimeCharItem[];\n  labelColour?: string;\n  index: number;\n  onTierChange: (list: DragAnimeCharItem[], index: number) => void;\n}\n\n//Represents a tier in a tierlist. Example: \"A-tier\"\nconst Tier: FC<TierProps> = ({\n  name,\n  group,\n  listItems,\n  labelColour,\n  index,\n  onTierChange,\n}): JSX.Element => {\n  const classes = useStyles();\n  const [list, setList] = useState<DragAnimeCharItem[]>(listItems || []);\n\n  useEffect(() => {\n    onTierChange(list, index);\n  }, [list, index]);\n\n  return (\n    <div className={classes.root}>\n      <div\n        className={classes.tierLabel}\n        style={{ backgroundColor: labelColour }}\n      >\n        <p style={{ verticalAlign: \"middle\" }}>{name}</p>\n      </div>\n      <ReactSortable\n        list={list}\n        setList={setList}\n        className={classes.list}\n        group={group}\n      >\n        {list.map((char) => (\n          <CharacterTile char={char} key={char.mal_id} />\n        ))}\n      </ReactSortable>\n    </div>\n  );\n};\n\nexport default Tier;\n","export const DefaultColourOrder = [\n  \"red\",\n  \"red-orange\",\n  \"orange\",\n  \"yellow\",\n  \"yellow-green\",\n  \"green\",\n  \"cyan\",\n  \"blue\",\n  \"dark-blu\",\n  \"pink\",\n  \"purple\",\n  \"black\",\n  \"dark-grey\",\n  \"grey\",\n  \"white\",\n];\n\nexport const DefaultTiers = [\"S\", \"A\", \"B\", \"C\", \"D\", \"E\", \"F\"];\n","import React, { FC, useState, useRef, useEffect } from \"react\";\nimport { makeStyles, Theme, createStyles } from \"@material-ui/core/styles\";\nimport { AnimeCharacterData, DragAnimeCharItem } from \"../../utils/Jikan\";\nimport { ReactSortable } from \"react-sortablejs\";\nimport CharacterTile from \"./CharacterTile\";\nimport Tier from \"./Tier\";\nimport { DefaultColourOrder, DefaultTiers } from \"./constants\";\nimport domtoimage from \"dom-to-image\";\nimport Button from \"@material-ui/core/Button\";\nimport { saveAs } from \"file-saver\";\n//import { Save, SaveAlt } from \"@material-ui/icons\";\nimport SaveIcon from \"@material-ui/icons/Save\";\nimport SaveAltIcon from \"@material-ui/icons/SaveAlt\";\nimport MediaQuery from \"react-responsive\";\n\n//Is 100 too big?\n//const IMAGE_SIZE = 100;\n\n/* eslint-disable @typescript-eslint/camelcase */\nconst useStyles = makeStyles((theme: Theme) =>\n  createStyles({\n    // \":root\": {\n    //   \"--imageSize\": \"50px\",\n    //   \"@media only screen and (min-width: 768px)\": {\n    //     \"--imageSize\": \"100px\",\n    //   },\n    // },\n    root: {\n      padding: 10,\n      backgroundColor: \"var(--dark-grey)\",\n    },\n    unrankedList: {\n      display: \"flex\",\n      flexWrap: \"wrap\",\n      marginTop: 20,\n    },\n    // characterTile: {\n    //   position: \"relative\",\n    //   flexGrow: 0,\n    //   border: \"1px solid var(--lighter-grey)\",\n    //   height: \"var(--imageSize)\",\n    //   overflow: \"hidden\",\n    // },\n    // characterTile__name: {\n    //   position: \"absolute\",\n    //   top: 0,\n    //   left: 0,\n    //   right: 0,\n    //   zIndex: 1,\n    //   fontSize: 14,\n    //   fontWeight: 500,\n    //   whiteSpace: \"nowrap\",\n    //   textOverflow: \"ellipsis\",\n    //   overflow: \"hidden\",\n    //   backgroundColor: \"rgb(20, 20, 20, 0.65)\",\n    //   padding: \"3px 4px\",\n    // },\n    // characterTile__image: {\n    //   maxWidth: \"var(--imageSize)\",\n    //   height: \"auto\",\n    // },\n    button: {\n      marginRight: theme.spacing(1),\n    },\n    buttonGroup: {\n      display: \"flex\",\n      marginBottom: theme.spacing(2),\n    },\n    btnIcon: {\n      marginRight: theme.spacing(1),\n    },\n  })\n);\n/* eslint-enable @typescript-eslint/camelcase */\n\ninterface TierListProps {\n  malId: number;\n  characterData: AnimeCharacterData[];\n}\n\ninterface TierData {\n  sorted: DragAnimeCharItem[][];\n  unsorted: DragAnimeCharItem[];\n}\n\nconst store = window.localStorage;\nconst getSaveData = (\n  malId: number,\n  characterData: DragAnimeCharItem[]\n): TierData => {\n  const saveData = store.getItem(`${malId}`);\n  if (saveData) {\n    return JSON.parse(saveData) as TierData;\n  } else {\n    return {\n      sorted: [],\n      unsorted: characterData,\n    };\n  }\n};\n\nconst TierList: FC<TierListProps> = ({ malId, characterData }): JSX.Element => {\n  const classes = useStyles();\n  const tierlistEl = useRef<HTMLDivElement>(null);\n  //const [tierRefs, setTierRefs] = useState<Node[]>([]);\n  const tierData = useRef<TierData>(\n    getSaveData(\n      malId,\n      characterData.map((char) => {\n        return { id: char.mal_id, ...char } as DragAnimeCharItem;\n      })\n    )\n  );\n\n  const [list, setList] = useState<DragAnimeCharItem[]>(\n    tierData.current.unsorted\n  );\n\n  //Handle \"download image\"\n  const handleExport = (): void => {\n    if (tierlistEl.current) {\n      domtoimage\n        .toBlob(tierlistEl.current)\n        .then((blob: Blob) => {\n          saveAs(blob, `tierlist-${malId}.png`);\n        })\n        .catch((error: any) => {\n          console.error(\"Could not generate image\", error);\n        });\n    }\n  };\n\n  //Handle save to browser localstorage\n  const handleSave = (): void => {\n    tierData.current.unsorted = list; //Update the unsorted list\n    store.setItem(`${malId}`, JSON.stringify(tierData.current));\n  };\n\n  //Propogate state upwards from Tier\n  const handleTierChange = (list: DragAnimeCharItem[], index: number): void => {\n    tierData.current.sorted[index] = list;\n  };\n\n  return (\n    <div>\n      <div className={classes.buttonGroup}>\n        <Button\n          onClick={handleExport}\n          className={classes.button}\n          variant=\"outlined\"\n        >\n          <SaveAltIcon className={classes.btnIcon} />\n          Download <MediaQuery minWidth={768}>image</MediaQuery>\n        </Button>\n        <Button\n          onClick={handleSave}\n          className={classes.button}\n          variant=\"outlined\"\n        >\n          <SaveIcon className={classes.btnIcon} />\n          Save\n        </Button>\n      </div>\n      <div ref={tierlistEl} className={classes.root}>\n        {DefaultTiers.map((tier, index) => (\n          <Tier\n            index={index}\n            key={index}\n            //ref={tierRefs[index]}\n            onTierChange={handleTierChange}\n            name={tier}\n            listItems={tierData.current.sorted[index]}\n            group=\"tierlist\"\n            labelColour={`var(--tier-${DefaultColourOrder[index]})`}\n          />\n        ))}\n        <ReactSortable\n          group=\"tierlist\"\n          list={list}\n          setList={setList}\n          className={classes.unrankedList}\n        >\n          {list.map((char) => (\n            <CharacterTile char={char} key={char.mal_id} />\n          ))}\n        </ReactSortable>\n      </div>\n    </div>\n  );\n};\n\nexport default TierList;\n","import React, { useState, useEffect, useRef } from \"react\";\nimport \"./ListMaker.scss\";\nimport SearchBar from \"../components/SearchBar\";\nimport SearchResults from \"../components/SearchResults\";\nimport {\n  searchAnime,\n  searchManga,\n  getAnimeCharactersStaff,\n  AnimeSearchResult,\n  AnimeCharacterData,\n  getMangaCharacters,\n} from \"../utils/Jikan\";\nimport { makeStyles, Theme, createStyles } from \"@material-ui/core/styles\";\nimport CircularProgress from \"@material-ui/core/CircularProgress\";\nimport TierList from \"../components/TierList/TierList\";\nimport { SearchType } from \"../components/SearchBar\";\nimport { Snackbar } from \"@material-ui/core\";\nimport MuiAlert from \"@material-ui/lab/Alert\";\n\n//TODO: validate inputs\n\nconst useStyles = makeStyles((theme: Theme) =>\n  createStyles({\n    root: {\n      display: \"grid\",\n      gridGap: \"20px\",\n      gridTemplateColumns: \"repeat(auto-fill, minmax(200px, 1fr))\",\n    },\n    loadingCircle: {\n      margin: \"100px auto\",\n    },\n    searchBar: {\n      marginBottom: 10,\n    },\n    \"@media only screen and (min-width: 768px)\": {\n      searchBar: {\n        marginBottom: 40,\n      },\n    },\n  })\n);\n\nconst ListMaker: React.FC = () => {\n  const [searchResult, setSearchResult] = useState<AnimeSearchResult[]>([]);\n  const [isLoading, setLoading] = useState<boolean>(false);\n  const [malId, setMalId] = useState<number>();\n  const [characterData, setCharacterData] = useState<AnimeCharacterData[]>([]);\n  const [showSnackbar, setShowSnackbar] = useState<boolean>(false);\n  const [errorMsg, setErrorMsg] = useState<string>(\"\");\n  const [searchType, setSearchType] = useState<SearchType>(SearchType.TVshow);\n\n  const classes = useStyles();\n\n  //Show the snackbar when there's an error message available\n  useEffect(() => {\n    if (errorMsg) {\n      setShowSnackbar(true);\n    }\n  }, [errorMsg]);\n\n  //Handle a search submit\n  const handleSearch = (event: React.FormEvent<HTMLDivElement>): void => {\n    event.preventDefault();\n\n    //Clear the previous search's results\n    setCharacterData([]);\n    //Get the search value\n    const searchValue = ((event.target as HTMLFormElement).elements as any)\n      .search.value;\n\n    if (searchValue.length >= 3) {\n      setLoading(true);\n\n      if (searchType === SearchType.Anime) {\n        searchAnime(searchValue, 10).then(\n          (res) => {\n            setSearchResult(res.data.results);\n            setLoading(false);\n          },\n          (err) => {\n            setErrorMsg(\"Could not search, either MAL or Jikan's API is down\");\n            setLoading(false);\n          }\n        );\n      } else if (searchType === SearchType.Manga) {\n        searchManga(searchValue, 10).then(\n          (res) => {\n            setSearchResult(res.data.results);\n            setLoading(false);\n          },\n          (err) => {\n            setErrorMsg(\"Could not search, either MAL or Jikan's API is down\");\n            setLoading(false);\n          }\n        );\n      }\n    }\n  };\n\n  //Handle when a user clicks a search result entry\n  const handleOnSelect = (malId: number): void => {\n    setLoading(true);\n\n    if (searchType === SearchType.Anime) {\n      getAnimeCharactersStaff(malId)\n        .then((res) => {\n          if (!res || res.data.characters.length === 0) {\n            setErrorMsg(\n              \"Uh oh, looks like that Anime entry has no characters.\"\n            );\n          } else {\n            setMalId(malId);\n            setCharacterData(res.data.characters);\n          }\n          setLoading(false);\n        })\n        .catch((err) => {\n          setErrorMsg(err.response.data.message);\n          setLoading(false);\n        });\n    } else if (searchType === SearchType.Manga) {\n      getMangaCharacters(malId)\n        .then((res) => {\n          if (!res || res.data.characters.length === 0) {\n            setErrorMsg(\n              \"Uh oh, looks like that Manga entry has no characters.\"\n            );\n          } else {\n            setMalId(malId);\n            setCharacterData(res.data.characters);\n          }\n          setLoading(false);\n        })\n        .catch((err) => {\n          setErrorMsg(err.response.data.message);\n          setLoading(false);\n        });\n    }\n  };\n\n  const handleCloseError = (): void => {\n    setShowSnackbar(false);\n    setErrorMsg(\"\");\n  };\n\n  return (\n    <div className=\"pageRoot\">\n      {/* <h2>Tierlist Maker</h2> */}\n      <SearchBar\n        onSearch={handleSearch}\n        className={classes.searchBar}\n        defaultValue={searchType}\n        onChangeSearchType={(event): void => {\n          setSearchType(event.target.value);\n          //searchType.current = event.target.value;\n          console.log(event.target.value);\n        }}\n      />\n      {!(characterData.length > 0) && (\n        <SearchResults\n          data={searchResult}\n          loading={isLoading}\n          onSelect={handleOnSelect}\n        />\n      )}\n      {isLoading && (\n        <CircularProgress size={150} className={classes.loadingCircle} />\n      )}\n      {characterData.length > 0 && malId && (\n        <TierList malId={malId} characterData={characterData} />\n      )}\n\n      <Snackbar\n        open={showSnackbar}\n        autoHideDuration={6000}\n        onClose={handleCloseError}\n      >\n        <MuiAlert\n          elevation={6}\n          variant=\"filled\"\n          onClose={handleCloseError}\n          severity=\"error\"\n        >\n          {errorMsg}\n        </MuiAlert>\n      </Snackbar>\n    </div>\n  );\n};\n\nexport default ListMaker;\n","import React from \"react\";\n\ntype ContextProps = {\n  showSidebar: boolean;\n  setShowSidebar: Function;\n};\n\nconst AppContext = React.createContext<Partial<ContextProps>>({\n  showSidebar: false,\n});\n\nexport default AppContext;\n","import React from \"react\";\nimport \"./Header.scss\";\nimport {\n  AppBar,\n  Toolbar,\n  IconButton,\n  Typography,\n  //Button,\n} from \"@material-ui/core\";\nimport MenuIcon from \"@material-ui/icons/Menu\";\nimport { makeStyles, Theme, createStyles } from \"@material-ui/core/styles\";\nimport AppContext from \"../contexts/AppContext\";\n\nconst useStyles = makeStyles((theme: Theme) =>\n  createStyles({\n    root: {\n      flexGrow: 1,\n    },\n    menuButton: {\n      marginRight: theme.spacing(2),\n    },\n    title: {\n      flexGrow: 1,\n    },\n    \"@media only screen and (min-width: 768px)\": {\n      title: {\n        flexGrow: 1,\n      },\n    },\n  })\n);\n\nconst Header = (): JSX.Element => {\n  const classes = useStyles();\n\n  return (\n    <AppContext.Consumer>\n      {({ setShowSidebar }) => (\n        <div className=\"header\">\n          <AppBar position=\"static\">\n            <Toolbar>\n              <IconButton\n                edge=\"start\"\n                className={classes.menuButton}\n                color=\"inherit\"\n                aria-label=\"menu\"\n                onClick={() => setShowSidebar?.(true)}\n              >\n                <MenuIcon />\n              </IconButton>\n              <Typography variant=\"h4\" className={classes.title}>\n                Tierlist Maker\n              </Typography>\n              {/* <Button color=\"inherit\">Login</Button> */}\n            </Toolbar>\n          </AppBar>\n        </div>\n      )}\n    </AppContext.Consumer>\n  );\n};\n\nexport default Header;\n","import React, { FC, useEffect } from \"react\";\nimport clsx from \"clsx\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport {\n  Drawer,\n  List,\n  ListItem,\n  ListItemIcon,\n  ListItemText,\n  Divider,\n} from \"@material-ui/core\";\nimport InboxIcon from \"@material-ui/icons/MoveToInbox\";\nimport MailIcon from \"@material-ui/icons/Mail\";\nimport HomeIcon from \"@material-ui/icons/Home\";\nimport NoteAddIcon from \"@material-ui/icons/NoteAdd\";\nimport AppContext from \"../contexts/AppContext\";\nimport { useHistory, useLocation } from \"react-router-dom\";\n\nconst useStyles = makeStyles({\n  list: {\n    width: 250,\n  },\n  fullList: {\n    width: \"auto\",\n  },\n});\n\ninterface SideNavProps {\n  open: boolean;\n  setShowSidebar?: Function;\n}\n\nconst SideNav: FC<SideNavProps> = ({ open, setShowSidebar }) => {\n  const classes = useStyles();\n  const history = useHistory();\n  const location = useLocation();\n\n  useEffect(() => {\n    setShowSidebar?.(false);\n  }, [location]);\n\n  const renderListItems = (): JSX.Element => {\n    return (\n      <div\n        className={clsx(classes.list)}\n        role=\"presentation\"\n        //onClick={toggleDrawer(anchor, false)}\n        //onKeyDown={toggleDrawer(anchor, false)}\n      >\n        <List>\n          <ListItem button onClick={() => history.push(\"/\")}>\n            <ListItemIcon>\n              <HomeIcon />\n            </ListItemIcon>\n            <ListItemText primary={\"Home\"} />\n          </ListItem>\n          <ListItem button onClick={() => history.push(\"/tierlist-maker\")}>\n            <ListItemIcon>\n              <NoteAddIcon />\n            </ListItemIcon>\n            <ListItemText primary={\"Tierlist creator\"} />\n          </ListItem>\n        </List>\n        <Divider />\n        <List>\n          {[\"All mail\", \"Trash\", \"Spam\"].map((text, index) => (\n            <ListItem button key={text}>\n              <ListItemIcon>\n                {index % 2 === 0 ? <InboxIcon /> : <MailIcon />}\n              </ListItemIcon>\n              <ListItemText primary={text} />\n            </ListItem>\n          ))}\n        </List>\n      </div>\n    );\n  };\n\n  return (\n    <Drawer anchor={\"left\"} open={open} onClose={() => setShowSidebar?.(false)}>\n      {renderListItems()}\n    </Drawer>\n  );\n};\n\nexport default () => (\n  <AppContext.Consumer>\n    {({ showSidebar, setShowSidebar }) => (\n      <SideNav open={showSidebar || false} setShowSidebar={setShowSidebar} />\n    )}\n  </AppContext.Consumer>\n);\n","import React, { useState } from \"react\";\n//import * as logo from './logo.svg';\nimport \"./App.scss\";\n//const logo = require(\"./logo.svg\") as string;\nimport ListMaker from \"./pages/ListMaker\";\nimport Header from \"./components/Header\";\nimport { createMuiTheme } from \"@material-ui/core/styles\";\nimport { ThemeProvider } from \"@material-ui/styles\";\nimport SideNav from \"./components/SideNav\";\nimport AppContext from \"./contexts/AppContext\";\nimport { BrowserRouter as Router, Switch, Route, Link } from \"react-router-dom\";\n\nconst darkTheme = createMuiTheme({\n  palette: {\n    type: \"dark\",\n  },\n});\n\nconst App = (): React.ReactElement => {\n  const [showSidebar, setShowSidebar] = useState<boolean>(false);\n\n  return (\n    <div id=\"app\">\n      <ThemeProvider theme={darkTheme}>\n        <AppContext.Provider value={{ showSidebar, setShowSidebar }}>\n          <Header />\n          <div id=\"appContent\">\n            <Router>\n              <Switch>\n                <Route path=\"/tierlist-maker\">\n                  <ListMaker />\n                </Route>\n              </Switch>\n              <SideNav />\n            </Router>\n          </div>\n        </AppContext.Provider>\n      </ThemeProvider>\n    </div>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\n\nconst FirebaseContext = React.createContext(null);\n\nexport default FirebaseContext;\n","import app from \"firebase/app\";\n\nconst config = {\n  apiKey: process.env.REACT_APP_API_KEY,\n  authDomain: process.env.REACT_APP_AUTH_DOMAIN,\n  databaseURL: process.env.REACT_APP_DATABASE_URL,\n  projectId: process.env.REACT_APP_PROJECT_ID,\n  storageBucket: process.env.REACT_APP_STORAGE_BUCKET,\n  messagingSenderId: process.env.REACT_APP_MESSAGING_SENDER_ID,\n};\n\nclass Firebase {\n  constructor() {\n    app.initializeApp(config);\n  }\n}\n\nexport default Firebase;\n","import FirebaseContext from \"./context\";\nimport Firebase from \"./firebase\";\n\nexport default Firebase;\n\nexport { FirebaseContext };\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App.tsx\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport Firebase, { FirebaseContext } from \"./components/Firebase\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <FirebaseContext.Provider value={new Firebase()}>\n      <App />\n    </FirebaseContext.Provider>\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}