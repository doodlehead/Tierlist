{"version":3,"sources":["utils/common.ts","utils/Jikan.ts","utils/SuggestedSearches.ts","components/SearchBar.tsx","components/SearchResults.tsx","utils/TVDB.ts","components/TierList/CharacterTile.tsx","components/TierList/Tier.tsx","components/TierList/constants.ts","contexts/AppContext.tsx","components/TierList/TierList.tsx","pages/ListMaker.tsx","utils/mangaFilter.ts","components/Header.tsx","components/SideNav.tsx","pages/Homepage.tsx","App.tsx","serviceWorker.js","components/Firebase/context.ts","components/Firebase/firebase.ts","components/Firebase/index.ts","index.js"],"names":["SearchType","CharacterRole","Rating","suggestedSearches","TVshow","Anime","Manga","useStyles","makeStyles","theme","createStyles","root","display","alignItems","margin","backgroundColor","input","marginLeft","spacing","flex","fontSize","iconButton","padding","divider","height","select","suggestionsRoot","marginTop","itemContainer","flexWrap","marginBottom","suggestionItem","border","borderRadius","cursor","whiteSpace","opacity","SearchBar","onSearch","onChangeSearchType","className","defaultValue","classes","useState","searchValue","setSearchValue","searchType","setSearchType","suggestions","setSuggestions","useEffect","numItems","sampleSize","getItems","renderSuggestion","item","Typography","onClick","Paper","component","onSubmit","event","preventDefault","FormControl","variant","Select","value","onChange","casted","target","MenuItem","Divider","orientation","InputBase","placeholder","name","autoComplete","IconButton","type","aria-label","style","map","gridGap","gridTemplateColumns","panel","outline","panel__title","fontWeight","panel__image","maxWidth","loadingCircle","SearchResults","data","loading","onSelect","elem","key","id","label","alt","src","imageUrl","baseUrl","proxyBaseUrl","characterTile","position","flexGrow","overflow","characterTile__name","top","left","right","zIndex","textOverflow","characterTile__image","width","CharacterTile","char","title","minHeight","tierLabel","color","list","Tier","group","listItems","labelColour","index","onTierChange","setList","verticalAlign","DefaultColourOrder","DefaultTiers","AppContext","React","createContext","showSidebar","unrankedList","button","marginRight","buttonGroup","btnIcon","store","window","localStorage","TierList","mediaId","characterData","tierlistEl","useRef","tierData","saveData","getItem","JSON","parse","sorted","unsorted","getSaveData","current","appContext","useContext","handleTierChange","Button","domtoimage","toBlob","then","blob","saveAs","catch","error","console","minWidth","setItem","stringify","setMessage","text","severity","err","toString","ref","tier","searchBar","mediaTypePrefix","filterSet","Set","ListMaker","searchResult","setSearchResult","isLoading","setLoading","setMediaId","setCharacterData","searchQuery","limit","query","length","axios","get","encodeURIComponent","res","log","seriesName","image","params","q","filtered","results","filter","Object","values","indexOf","rated","r","mal_id","image_url","searchManga","manga","has","malId","getSeriesCharacters","role","actor","characters","response","message","getMangaCharacters","CircularProgress","size","menuButton","Header","Consumer","setShowSidebar","AppBar","Toolbar","edge","fullList","SideNav","history","useHistory","location","useLocation","Drawer","anchor","open","onClose","clsx","List","ListItem","push","ListItemIcon","ListItemText","primary","stepContainer","flexDirection","justifyContent","card","Homepage","steps","body","step","Card","CardContent","darkTheme","createMuiTheme","palette","App","showSnackbar","setShowSnackbar","ThemeProvider","Provider","path","Snackbar","autoHideDuration","reason","Alert","elevation","Boolean","hostname","match","FirebaseContext","prodConfig","apiKey","process","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","measurementId","Firebase","db","functions","firebase","initializeApp","this","firestore","useFunctionsEmulator","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"+OAIYA,E,uMAAAA,K,gBAAAA,E,cAAAA,E,eAAAA,M,WCGAC,EAKAC,E,QCNCC,GAAiB,mBAC3BH,EAAWI,OAAS,CACnB,kBACA,eACA,kBACA,iBACA,iBACA,6BACA,YACA,aACA,mBACA,UAX0B,cAa3BJ,EAAWK,MAAQ,CAClB,UACA,YACA,kBACA,0BACA,eACA,iBACA,aACA,0BACA,kBACA,mBAvB0B,cAyB3BL,EAAWM,MAAQ,CAClB,gBACA,sBACA,eACA,eACA,kBACA,SACA,cACA,SACA,aACA,iDAnC0B,GCSxBC,EAAYC,aAAW,SAACC,GAAD,OAC3BC,YAAa,CACXC,KAAM,CACJC,QAAS,OACTC,WAAY,SACZC,OAAQ,QACRC,gBAAiB,sBAEnBC,MAAO,CACLC,WAAYR,EAAMS,QAAQ,GAC1BC,KAAM,EACNC,SAAU,IAEZC,WAAY,CACVC,QAAS,UAEXC,QAAS,CACPC,OAAQ,GACRV,OAAQ,GAEVW,OAAQ,CACNH,QAAS,QACTF,SAAU,IAEZ,4CAA6C,CAC3CT,KAAM,CACJC,QAAS,OACTC,WAAY,SACZC,OAAQ,SACRC,gBAAiB,sBAEnBC,MAAO,CACLC,WAAYR,EAAMS,QAAQ,GAC1BC,KAAM,EACNC,SAAU,IAEZC,WAAY,CACVC,QAAS,IAEXC,QAAS,CACPC,OAAQ,GACRV,OAAQ,GAEVW,OAAQ,CACNH,QAAS,WAGbI,gBAAiB,CACfd,QAAS,OACTe,UAAW,OACXV,WAAY,QAEdW,cAAe,CACbhB,QAAS,OACTiB,SAAU,OACV,QAAS,CACPZ,WAAY,MACZa,aAAc,QAGlBC,eAAgB,CACdC,OAAQ,gCACRZ,SAAU,OACVE,QAAS,YACTW,aAAc,OACdC,OAAQ,UACRC,WAAY,SACZ,UAAW,CACTC,QAAS,aAqGFC,EAxFc,SAAC,GAKvB,IAJLC,EAII,EAJJA,SACAC,EAGI,EAHJA,mBACAC,EAEI,EAFJA,UACAC,EACI,EADJA,aAEMC,EAAUnC,IADZ,EAEkCoC,mBAAS,IAF3C,mBAEGC,EAFH,KAEgBC,EAFhB,OAGgCF,mBAASF,GAHzC,mBAGGK,EAHH,KAGeC,EAHf,OAIkCJ,mBAAmB,IAJrD,mBAIGK,EAJH,KAIgBC,EAJhB,KAMJC,qBAAU,WACRD,ED/DoB,SACtBH,EACAK,GAEA,OAAOC,qBAAWjD,EAAkB2C,GAAaK,GC2DhCE,CAASP,EAAY,MACnC,CAACA,IAEJ,IAQMQ,EAAmB,SAACC,GAAD,OACvB,kBAACC,EAAA,EAAD,CACEhB,UAAWE,EAAQX,eACnB0B,QAAS,WACPnB,EAASiB,GACTV,EAAeU,KAGhBA,IAoBL,OACE,yBAAKf,UAAWA,GACd,kBAACkB,EAAA,EAAD,CAAOC,UAAU,OAAOnB,UAAWE,EAAQ/B,KAAMiD,SAlBhC,SAACC,GACpBvB,EAASM,GACTiB,EAAMC,mBAiBF,kBAACC,EAAA,EAAD,CAAaC,QAAQ,YACnB,kBAACC,EAAA,EAAD,CACEC,MAAOpB,EACPqB,SA1CqB,SAC7BN,GAEA,IAAMO,EAASP,EACfd,EAAcc,EAAMQ,OAAOH,OAC3B3B,EAAmB6B,IAsCX5B,UAAWE,EAAQjB,QAEnB,kBAAC6C,EAAA,EAAD,CAAUJ,MAAOlE,EAAWI,QAA5B,WAEA,kBAACkE,EAAA,EAAD,CAAUJ,MAAOlE,EAAWK,OAA5B,SACA,kBAACiE,EAAA,EAAD,CAAUJ,MAAOlE,EAAWM,OAA5B,WAGJ,kBAACiE,EAAA,EAAD,CAAS/B,UAAWE,EAAQnB,QAASiD,YAAY,aACjD,kBAACC,EAAA,EAAD,CACEjC,UAAWE,EAAQ1B,MACnB0D,YAAY,SACZC,KAAK,SACLC,aAAa,MACbV,MAAOtB,EACPuB,SAAU,SAACN,GAAD,OAAWhB,EAAegB,EAAMQ,OAAOH,UAEnD,kBAACW,EAAA,EAAD,CACEC,KAAK,SACLtC,UAAWE,EAAQrB,WACnB0D,aAAW,UAEX,kBAAC,IAAD,QAvCN,yBAAKvC,UAAWE,EAAQhB,iBACtB,kBAAC8B,EAAA,EAAD,CAAYG,UAAU,MAAMqB,MAAO,CAAE7C,WAAY,WAAjD,uBAGA,yBAAKK,UAAWE,EAAQd,eACrBoB,EAAYiC,IAAI3B,OCvInB/C,EAAYC,aAAW,SAACC,GAAD,OAC3BC,YAAa,CACXC,KAAM,CACJC,QAAS,OACTsE,QAAS,MACTC,oBAAoB,4BAAD,OAPD,IAOC,cAErBC,MAAO,CACLnD,aAAc,EACdlB,gBAAiB,qBACjB,UAAW,CACTsE,QAAS,gCACTnD,OAAQ,YAGZoD,aAAc,CACZlE,SAAU,GACVmE,WAAY,IACZ3E,QAAS,QACTU,QAAS,OAEXkE,aAAc,CACZC,SAxBkB,IAyBlBjE,OAAQ,QAEVkE,cAAe,CACb5E,OAAQ,cAEV,4CAA6C,CAC3CH,KAAM,CACJC,QAAS,OACTsE,QAAS,OACTC,oBAAqB,yCAEvBC,MAAO,CACLnD,aAAc,EACdlB,gBAAiB,qBACjB,UAAW,CACTsE,QAAS,gCACTnD,OAAQ,YAGZoD,aAAc,CACZlE,SAAU,GACVmE,WAAY,IACZ3E,QAAS,QACTU,QAAS,OAEXkE,aAAc,CACZC,SAAU,IACVjE,OAAQ,QAEVkE,cAAe,CACb5E,OAAQ,oBAoDD6E,EAlCkB,SAAC,GAA4C,IAA1CC,EAAyC,EAAzCA,KAAMC,EAAmC,EAAnCA,QAASC,EAA0B,EAA1BA,SAAUtD,EAAgB,EAAhBA,UACrDE,EAAUnC,IAoBhB,OAAIsF,EACK,8BAGL,yBAAKrD,UAAWA,GACd,yBAAKA,UAAWE,EAAQ/B,OACpBkF,GAAWD,EAAKX,KAAI,SAACc,GAAD,OAvBVxC,EAuB+BwC,EArB/C,yBACEvD,UAAWE,EAAQ0C,MACnBY,IAAKzC,EAAK0C,GACVxC,QAAS,kBAAMqC,EAASvC,EAAK0C,MAE7B,yBAAKzD,UAAWE,EAAQ4C,cAAe/B,EAAK2C,OAC5C,yBACEC,IAAK5C,EAAK2C,MACVE,IAAK7C,EAAK8C,SACV7D,UAAWE,EAAQ8C,gBAXR,IAACjC,Q,2BH3EVtD,K,YAAAA,E,yBAAAA,M,cAKAC,K,MAAAA,E,QAAAA,E,aAAAA,E,QAAAA,E,OAAAA,E,SAAAA,M,KA6DZ,I,EAAMoG,EAAU,2BI5DVC,EAAY,mE,iBCPZhG,EAAYC,aAAW,SAACC,GAAD,OAC3BC,YAAa,CACX8F,cAAe,CACbC,SAAU,WACVC,SAAU,EACVrB,QAAS,gCACT7D,OAAQ,yBACRmF,SAAU,SACVzE,OAAQ,WAEV0E,oBAAqB,CACnBH,SAAU,WACVI,IAAK,EACLC,KAAM,EACNC,MAAO,EACPC,OAAQ,EACR5F,SAAU,GACVmE,WAAY,IACZpD,WAAY,SACZ8E,aAAc,WACdN,SAAU,SACV5F,gBAAiB,wBACjBO,QAAS,WAEX4F,qBAAsB,CACpBC,MAAO,yBACP3F,OAAQ,QAEV,4CAA6C,CAC3CoF,oBAAqB,CACnBxF,SAAU,UA6BHgG,EAjB+B,SAAC,GAA2B,IAAzBC,EAAwB,EAAxBA,KACzC3E,EAAUnC,IAEhB,OACE,yBAAKiC,UAAWE,EAAQ8D,cAAeR,IAAKqB,EAAKpB,IAC/C,yBAAKzD,UAAWE,EAAQkE,oBAAqBU,MAAOD,EAAK1C,MACtD0C,EAAK1C,MAER,yBACEwB,IAAKkB,EAAK1C,KACVyB,IAAKiB,EAAKhB,SACV7D,UAAWE,EAAQwE,yBCpDrB3G,EAAYC,aAAW,SAACC,GAAD,OAC3BC,YAAa,CACXC,KAAM,CACJC,QAAS,OACTiB,SAAU,OACVwD,QAAS,gBACTkC,UAAW,0BAEbC,UAAW,CACTL,MAAO,GACP/F,SAAU,GACVmE,WAAY,IACZmB,SAAU,EACVe,MAAO,SAETC,KAAM,CACJhB,SAAU,EACV9F,QAAS,OACTiB,SAAU,OACV4D,SAAU,qBAEZ,4CAA6C,CAC3C+B,UAAW,CACTL,MAAO,GACP/F,SAAU,UAqDHuG,EArCS,SAAC,GAOL,IANlBhD,EAMiB,EANjBA,KACAiD,EAKiB,EALjBA,MACAC,EAIiB,EAJjBA,UACAC,EAGiB,EAHjBA,YACAC,EAEiB,EAFjBA,MACAC,EACiB,EADjBA,aAEMtF,EAAUnC,IADC,EAEOoC,mBAA0BkF,GAAa,IAF9C,mBAEVH,EAFU,KAEJO,EAFI,KAQjB,OAJA/E,qBAAU,WACR8E,EAAaN,EAAMK,KAClB,CAACL,EAAMK,IAGR,yBAAKvF,UAAWE,EAAQ/B,MACtB,yBACE6B,UAAWE,EAAQ8E,UACnBxC,MAAO,CAAEjE,gBAAiB+G,IAE1B,uBAAG9C,MAAO,CAAEkD,cAAe,WAAavD,IAE1C,kBAAC,IAAD,CACE+C,KAAMA,EACNO,QAASA,EACTzF,UAAWE,EAAQgF,KACnBE,MAAOA,GAENF,EAAKzC,KAAI,SAACoC,GAAD,OACR,kBAAC,EAAD,CAAeA,KAAMA,EAAMrB,IAAKqB,EAAKpB,WC7ElCkC,EAAqB,CAChC,MACA,aACA,SACA,SACA,eACA,QACA,OACA,OACA,WACA,OACA,SACA,QACA,YACA,OACA,SAGWC,EAAe,CAAC,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,K,sFCL5CC,GAJIC,IAAMC,cAAqC,CAC5DC,aAAa,ICQTjI,GAAYC,aAAW,SAACC,GAAD,OAC3BC,YAAa,CACXC,KAAM,CACJW,QAAS,GACTP,gBAAiB,oBAEnB0H,aAAc,CACZ7H,QAAS,OACTiB,SAAU,OACVF,UAAW,IAEb+G,OAAQ,CACNC,YAAalI,EAAMS,QAAQ,IAE7B0H,YAAa,CACXhI,QAAS,OACTkB,aAAcrB,EAAMS,QAAQ,IAE9B2H,QAAS,CACPF,YAAalI,EAAMS,QAAQ,SAgB3B4H,GAAQC,OAAOC,aAiHNC,GA3Fa,SAAC,GAA6C,IAA3CC,EAA0C,EAA1CA,QAASC,EAAiC,EAAjCA,cAChCzG,EAAUnC,KACV6I,EAAaC,iBAAuB,MACpCC,EAAWD,iBAlBC,SAClBH,EACAC,GAEA,IAAMI,EAAWT,GAAMU,QAAN,UAAiBN,IAClC,OAAIK,EACKE,KAAKC,MAAMH,GAEX,CACLI,OAAQ,GACRC,SAAUT,GAQoBU,CAAYX,EAASC,IAHgB,EAI/CxG,mBAA0B2G,EAASQ,QAAQF,UAJI,mBAIhElC,EAJgE,KAI1DO,EAJ0D,KAKjE8B,EAAaC,qBAAW3B,IAkCxB4B,EAAmB,SAACvC,EAAuBK,GAC/CuB,EAASQ,QAAQH,OAAO5B,GAASL,GAGnC,OACE,6BACE,yBAAKlF,UAAWE,EAAQkG,aACtB,kBAACsB,EAAA,EAAD,CACEzG,QAvCa,WACf2F,EAAWU,SACbK,IACGC,OAAOhB,EAAWU,SAClBO,MAAK,SAACC,GACLC,iBAAOD,EAAD,mBAAmBpB,EAAnB,YAEPsB,OAAM,SAACC,GACNC,QAAQD,MAAM,2BAA4BA,OAgC1CjI,UAAWE,EAAQgG,OACnB1E,QAAQ,YAER,kBAAC,IAAD,CAAaxB,UAAWE,EAAQmG,UALlC,YAMW,kBAAC,KAAD,CAAY8B,SAAU,KAAtB,UAEX,kBAACT,EAAA,EAAD,CACEzG,QAjCW,WACjB,IAAK,IAAD,EACF6F,EAASQ,QAAQF,SAAWlC,EAC5BoB,GAAM8B,QAAN,UAAiB1B,GAAWO,KAAKoB,UAAUvB,EAASQ,UACpD,UAAAC,EAAWe,kBAAX,cAAAf,EAAwB,CACtBgB,KAAM,sBACNC,SAAU,YAEZ,MAAOC,GAAM,IAAD,EACZ,UAAAlB,EAAWe,kBAAX,cAAAf,EAAwB,CACtBgB,KAAME,EAAIC,WACVF,SAAU,YAuBRxI,UAAWE,EAAQgG,OACnB1E,QAAQ,YAER,kBAAC,IAAD,CAAUxB,UAAWE,EAAQmG,UAL/B,SASF,yBAAKsC,IAAK/B,EAAY5G,UAAWE,EAAQ/B,MACtCyH,EAAanD,KAAI,SAACmG,EAAMrD,GAAP,OAChB,kBAAC,EAAD,CACEA,MAAOA,EACP/B,IAAK+B,EAELC,aAAciC,EACdtF,KAAMyG,EACNvD,UAAWyB,EAASQ,QAAQH,OAAO5B,GACnCH,MAAM,WACNE,YAAW,qBAAgBK,EAAmBJ,GAAnC,UAGf,kBAAC,IAAD,CACEH,MAAM,WACNF,KAAMA,EACNO,QAASA,EACTzF,UAAWE,EAAQ+F,cAElBf,EAAKzC,KAAI,SAACoC,GAAD,OACR,kBAAC,EAAD,CAAeA,KAAMA,EAAMrB,IAAKqB,EAAKpB,YClI3C1F,GAAYC,aAAW,SAACC,GAAD,OAC3BC,YAAa,CACXC,KAAM,CACJC,QAAS,OACTsE,QAAS,OACTC,oBAAqB,yCAEvBO,cAAe,CACb5E,OAAQ,cAEVuK,UAAW,CACTvJ,aAAc,IAEhB,4CAA6C,CAC3CuJ,UAAW,CACTvJ,aAAc,UAMhBwJ,IAAe,mBAClBtL,EAAWI,OAAS,OADF,cAElBJ,EAAWK,MAAQ,UAFD,cAGlBL,EAAWM,MAAQ,SAHD,GAMfiL,GAAY,IAAIC,ICvgQ5wyDC,GAtMa,WAAO,IAAD,EACQ9I,mBAAuB,IAD/B,mBACzB+I,EADyB,KACXC,EADW,OAEAhJ,oBAAkB,GAFlB,mBAEzBiJ,EAFyB,KAEdC,EAFc,OAGFlJ,qBAHE,mBAGzBuG,EAHyB,KAGhB4C,EAHgB,OAIUnJ,mBAA0B,IAJpC,mBAIzBwG,EAJyB,KAIV4C,EAJU,OAKIpJ,mBAAqB3C,EAAWI,QALpC,mBAKzB0C,EALyB,KAKbC,EALa,KAQxB+H,EAAed,qBAAW3B,IAA1ByC,WAEFpI,EAAUnC,KA4JhB,OACE,yBAAKiC,UAAU,YACb,kBAAC,EAAD,CACEF,SA5Je,SAACM,GVSG,IACzBoJ,EACAC,EI7CAC,EMoCEH,EAAiB,IAEbnJ,EAAYuJ,QAAU,IACxBN,GAAW,GAEP/I,IAAe9C,EAAWI,QNzClC8L,EM0CmBtJ,ENxCZwJ,IAAMC,IAAN,UACF9F,EADE,+BACiC+F,mBAAmBJ,MMuC3B7B,MACxB,SAACkC,GACC7B,QAAQ8B,IAAID,GACZZ,EACEY,EAAI3G,KAAKA,KAAKX,KAAI,SAACc,GAAD,MAAW,CAC3BE,GAAIF,EAAKE,GACTC,MAAOH,EAAK0G,WACZpG,SAAS,GAAD,ON9ED,uBM8EC,OAAeN,EAAK2G,YAGhCb,GAAW,MAEb,SAACZ,GACW,OAAVH,QAAU,IAAVA,KAAa,CACXC,KAAM,uCACNC,SAAU,UAEZa,GAAW,MAGN/I,IAAe9C,EAAWK,OVlBzC2L,EUmBkBpJ,EVlBlBqJ,EUkB+B,GVhBxBG,IAAMC,IAAN,UAAa/F,EAAb,iBAAqC,CAC1CqG,OAAQ,CACNC,EAAGZ,EACHC,YUa+B5B,MAC3B,SAACkC,GACC7B,QAAQ8B,IAAID,GACZ,IAAMM,EAAuBN,EAAI3G,KAAKkH,QV4BpCC,QACV,SAAChH,GAAD,OACEiH,OAAOC,OAAO/M,GAAQgN,QAAQnH,EAAKoH,QACnCH,OAAOC,OAAO/M,GAAQgN,QAAQhN,EAAOkN,MU9B/BzB,EACEkB,EAAS5H,KAAI,SAACc,GAAD,MAAW,CACtBE,GAAIF,EAAKsH,OACTnH,MAAOH,EAAKuB,MACZjB,SAAUN,EAAKuH,eAGnBzB,GAAW,MAEb,SAACZ,GACW,OAAVH,QAAU,IAAVA,KAAa,CACXC,KAAM,sDACNC,SAAU,UAEZa,GAAW,MAGN/I,IAAe9C,EAAWM,OVxBhB,SACzB0L,EACAC,GAEA,OAAOG,IAAMC,IAAN,UAAa/F,EAAb,iBAAqC,CAC1CqG,OAAQ,CACNC,EAAGZ,EACHC,WUkBEsB,CAAY3K,EAAa,IAAIyH,MAC3B,SAACkC,GACC7B,QAAQ8B,IAAID,GACZ,IAAMM,EAAWN,EAAI3G,KAAKkH,QAAQC,QAChC,SAACS,GAAD,OAAYjC,GAAUkC,IAAID,EAAMH,WAElC1B,EACEkB,EAAS5H,KAAI,SAACc,GAAD,MAAW,CACtBE,GAAIF,EAAKsH,OACTnH,MAAOH,EAAKuB,MACZjB,SAAUN,EAAKuH,eAGnBzB,GAAW,MAEb,SAACZ,GACW,OAAVH,QAAU,IAAVA,KAAa,CACXC,KAAM,sDACNC,SAAU,UAEZa,GAAW,QAsFfrJ,UAAWE,EAAQ2I,UACnB5I,aAAcK,EACdP,mBAAoB,SAACsB,GACnBd,EAAcc,EAAMQ,OAAOH,OAE3BwG,QAAQ8B,IAAI3I,EAAMQ,OAAOH,YAG1BiF,EAAcgD,OAAS,IACxB,kBAAC,EAAD,CACEvG,KAAM8F,EACN7F,QAAS+F,EACT9F,SA1Fe,SAACG,GVrCa,IACrCyH,EUqCE7B,GAAW,GACP/I,IAAe9C,EAAWI,QN5GC,SACjC6F,GAEA,OAAOmG,IAAMC,IAAN,UAAa9F,EAAb,mBAAoCN,EAApC,YM0GH0H,CAAoB1H,GAAIoE,MAAK,SAACkC,GAC5B7B,QAAQ8B,IAAID,GACZT,EAAW7F,GACX8F,EACEQ,EAAI3G,KAAKA,KAAKX,KAAI,SAACc,GAAD,MAAW,CAC3BE,GAAIF,EAAKE,GACTtB,KAAMoB,EAAK6H,KACXC,MAAO9H,EAAKpB,KACZ0B,SAAUN,EAAK2G,MAAL,UNxJI,yCMwJJ,OACU3G,EAAK2G,ONxJN,wDM6JzBb,GAAW,IACF/I,IAAe9C,EAAWK,OVtDvCqN,EUuD4BzH,EVrDrBmG,IAAMC,IAAN,UAAa/F,EAAb,kBAA8BoH,EAA9B,uBUsDArD,MAAK,SAACkC,GAEAA,GAAsC,IAA/BA,EAAI3G,KAAKkI,WAAW3B,QAM9BL,EAAW7F,GACX8F,EACEQ,EAAI3G,KAAKkI,WAAW7I,KAAI,SAACc,GAAD,mBAAC,eACpBA,GADmB,IAEtBE,GAAIF,EAAKsH,OACThH,SAAUN,EAAKuH,iBAVT,OAAVxC,QAAU,IAAVA,KAAa,CACXC,KAAM,wDACNC,SAAU,UAYda,GAAW,MAEZrB,OAAM,SAACS,GACI,OAAVH,QAAU,IAAVA,KAAaG,EAAI8C,SAASnI,KAAKoI,SAC/BnC,GAAW,MAEN/I,IAAe9C,EAAWM,OVtEP,SAChCoN,GAEA,OAAOtB,IAAMC,IAAN,UAAa/F,EAAb,kBAA8BoH,EAA9B,gBUoEHO,CAAmBhI,GAChBoE,MAAK,SAACkC,GACL7B,QAAQ8B,IAAID,GACPA,GAAsC,IAA/BA,EAAI3G,KAAKkI,WAAW3B,QAM9BL,EAAW7F,GACX8F,EACEQ,EAAI3G,KAAKkI,WAAW7I,KAAI,SAACc,GAAD,mBAAC,eACpBA,GADmB,IAEtBE,GAAIF,EAAKsH,OACThH,SAAUN,EAAKuH,iBAVT,OAAVxC,QAAU,IAAVA,KAAa,CACXC,KAAM,wDACNC,SAAU,UAYda,GAAW,MAEZrB,OAAM,SAACS,GACI,OAAVH,QAAU,IAAVA,KAAa,CACXC,KAAME,EAAI8C,SAASnI,KAAKoI,QACxBhD,SAAU,UAEZa,GAAW,SAwBdD,GACC,kBAACsC,EAAA,EAAD,CAAkBC,KAAM,IAAK3L,UAAWE,EAAQgD,gBAEjDyD,EAAcgD,OAAS,GAAKjD,GAC3B,kBAAC,GAAD,CACEA,QAAO,UAAKoC,GAAgBxI,IAArB,OAAmCoG,GAC1CC,cAAeA,M,iDE5OnB5I,GAAYC,aAAW,SAACC,GAAD,OAC3BC,YAAa,CACXC,KAAM,CACJ+F,SAAU,GAEZ0H,WAAY,CACVzF,YAAalI,EAAMS,QAAQ,IAE7BoG,MAAO,CACLZ,SAAU,GAEZ,4CAA6C,CAC3CY,MAAO,CACLZ,SAAU,SAoCH2H,GA9BA,WACb,IAAM3L,EAAUnC,KAEhB,OACE,kBAAC,GAAW+N,SAAZ,MACG,gBAAGC,EAAH,EAAGA,eAAH,OACC,yBAAK/L,UAAU,UACb,kBAACgM,GAAA,EAAD,CAAQ/H,SAAS,UACf,kBAACgI,GAAA,EAAD,KACE,kBAAC5J,EAAA,EAAD,CACE6J,KAAK,QACLlM,UAAWE,EAAQ0L,WACnB3G,MAAM,UACN1C,aAAW,OACXtB,QAAS,yBAAM8K,QAAN,IAAMA,OAAN,EAAMA,GAAiB,KAEhC,kBAAC,KAAD,OAEF,kBAAC/K,EAAA,EAAD,CAAYQ,QAAQ,KAAKxB,UAAWE,EAAQ4E,OAA5C,yB,gIChCR/G,GAAYC,YAAW,CAC3BkH,KAAM,CACJP,MAAO,KAETwH,SAAU,CACRxH,MAAO,UA+CIyH,GA3CK,WAClB,IAAMlM,EAAUnC,KACVsO,EAAUC,eACVC,EAAWC,eAHO,EAIgBhF,qBAAW3B,IAA3CG,EAJgB,EAIhBA,YAAa+F,EAJG,EAIHA,eAErBrL,qBAAU,WACM,OAAdqL,QAAc,IAAdA,MAAiB,KAChB,CAACQ,IAwBJ,OACE,kBAACE,GAAA,EAAD,CACEC,OAAQ,OACRC,KAAM3G,EACN4G,QAAS,yBAAMb,QAAN,IAAMA,OAAN,EAAMA,GAAiB,KAxBhC,yBAAK/L,UAAW6M,aAAK3M,EAAQgF,MAAOkG,KAAK,gBACvC,kBAAC0B,GAAA,EAAD,KACE,kBAACC,GAAA,EAAD,CAAU7G,QAAM,EAACjF,QAAS,kBAAMoL,EAAQW,KAAK,eAC3C,kBAACC,GAAA,EAAD,KACE,kBAAC,KAAD,OAEF,kBAACC,GAAA,EAAD,CAAcC,QAAS,UAEzB,kBAACJ,GAAA,EAAD,CAAU7G,QAAM,EAACjF,QAAS,kBAAMoL,EAAQW,KAAK,sBAC3C,kBAACC,GAAA,EAAD,KACE,kBAAC,KAAD,OAEF,kBAACC,GAAA,EAAD,CAAcC,QAAS,uBAG3B,kBAACpL,EAAA,EAAD,S,6BC/CFhE,GAAYC,YAAW,CAC3BG,KAAM,CACJgK,SAAU,KAEZrD,MAAO,CACLxF,aAAc,GACdyD,WAAY,KAEdqK,cAAe,CACbhP,QAAS,OACTiP,cAAe,SACf/O,OAAQ,YACRgP,eAAgB,UAElBC,KAAM,CACJjP,OAAQ,QAEV,4CAA6C,CAC3CiP,KAAM,CACJpF,SAAU,IACVhC,YAAa,IAEfiH,cAAe,CACbC,cAAe,UA4CNG,GAvCE,WACf,IAAMtN,EAAUnC,KAoBV0P,EAAQ,CACZ,CAAE3I,MAAO,SAAU4I,KANP,kBAAC1M,EAAA,EAAD,qCAOZ,CAAE8D,MAAO,SAAU4I,KANP,kBAAC1M,EAAA,EAAD,+BAOZ,CAAE8D,MAAO,SAAU4I,KANP,kBAAC1M,EAAA,EAAD,kCAOZ,CAAE8D,MAAO,SAAU4I,KANP,kBAAC1M,EAAA,EAAD,mCASd,OACE,6BACE,wDACA,gEACA,yBAAKhB,UAAWE,EAAQkN,eACrBK,EAAMhL,KAAI,SAACkL,GAAD,OA9BG7I,EA8BkB6I,EAAK7I,MA9BR4I,EA8BeC,EAAKD,KA5BnD,kBAACE,GAAA,EAAD,CAAM5N,UAAWE,EAAQqN,KAAM/J,IAAKsB,GAClC,kBAAC+I,GAAA,EAAD,KACE,kBAAC7M,EAAA,EAAD,CAAYQ,QAAQ,KAAKxB,UAAWE,EAAQ4E,OACzCA,GAEF4I,IAPU,IAAC5I,EAAe4I,Q,oBCxB/BI,GAAYC,aAAe,CAC/BC,QAAS,CACP1L,KAAM,UAsEK2L,GAlEH,WAA2B,IAAD,EACE9N,oBAAkB,GADpB,mBAC7B6F,EAD6B,KAChB+F,EADgB,OAEI5L,oBAAkB,GAFtB,mBAE7B+N,EAF6B,KAEfC,EAFe,OAGNhO,mBAA0B,CACtDoI,KAAM,GACNC,SAAU,YALwB,mBAG7BgD,EAH6B,KAGpBlD,EAHoB,KA0BpC,OARA5H,qBAAU,YACR,OAAI8K,QAAJ,IAAIA,OAAJ,EAAIA,EAASjD,MACX4F,GAAgB,GAEhBA,GAAgB,KAEjB,CAAC3C,IAGF,yBAAK/H,GAAG,OACN,kBAAC2K,GAAA,EAAD,CAAenQ,MAAO6P,IACpB,kBAAC,GAAWO,SAAZ,CACE3M,MAAO,CAAEsE,cAAa+F,iBAAgBzD,eAEtC,kBAAC,GAAD,MACA,yBAAK7E,GAAG,cACN,kBAAC,KAAD,KACE,kBAAC,KAAD,KACE,kBAAC,KAAD,CAAO6K,KAAK,oBACV,kBAAC,GAAD,OAEF,kBAAC,KAAD,CAAOA,KAAK,cACV,kBAAC,GAAD,QAGJ,kBAAC,GAAD,QAGJ,kBAACC,GAAA,EAAD,CACE5B,KAAMuB,EACNM,iBAAkB,IAClB5B,QArCkB,SAACvL,EAAuBoN,GACnC,cAAXA,GACJN,GAAgB,KAqCR,kBAACO,GAAA,EAAD,CACEC,UAAW,EACXnN,QAAQ,SACRoL,QA9Ce,WACzBtE,EAAW,CAAEC,KAAM,GAAIC,SAAUgD,EAAQhD,YA8C/BA,SAAQ,OAAEgD,QAAF,IAAEA,OAAF,EAAEA,EAAShD,UAJrB,OAMGgD,QANH,IAMGA,OANH,EAMGA,EAASjD,WCjEJqG,QACW,cAA7BrI,OAAOgG,SAASsC,UAEe,UAA7BtI,OAAOgG,SAASsC,UAEhBtI,OAAOgG,SAASsC,SAASC,MACvB,2DCfN,IAEeC,GAFSjJ,IAAMC,cAA+B,M,8BCEvDiJ,I,cAAa,CACjBC,OAAQC,0CACRC,WAAYD,sCACZE,YAAaF,6CACbG,UAAWH,sBACXI,cAAeJ,kCACfK,kBAAmBL,aACnBM,MAAON,0CACPO,cAAeP,iBCVFQ,GD4Bb,aAAe,0BAHfC,QAGc,OAFdC,eAEc,EAEZC,KAASC,cAAcd,IACvBe,KAAKJ,GAAKE,KAASG,YACnBD,KAAKH,UAAYC,KAASD,YAC1BG,KAAKH,UAAUK,qBAAqB,0BE7BxCC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,GAAgB/B,SAAjB,CAA0B3M,MAAO,IAAIgO,IACnC,kBAAC,GAAD,QAGJW,SAASC,eAAe,SJsHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrB5I,MAAK,SAAA6I,GACJA,EAAaC,gBAEd3I,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAMuD,c","file":"static/js/main.89f5ed8e.chunk.js","sourcesContent":["/**\n * File for shared util methods and types. Not sure if this is the best project architecture...\n */\n\nexport enum SearchType {\n  TVshow = \"TVshow\",\n  //Movie = \"Movie\",\n  Anime = \"Anime\",\n  Manga = \"Manga\",\n}\n\nexport interface DragItem {\n  id: number;\n}\n\nexport interface ResultItem {\n  id: number;\n  label: string;\n  imageUrl: string;\n}\n\nexport interface CharacterItem extends DragItem {\n  id: number;\n  name: string;\n  actor?: string;\n  imageUrl: string;\n}\n\nexport interface SnackbarMessage {\n  text: string;\n  severity: \"error\" | \"warning\" | \"info\" | \"success\";\n}\n","import axios, { AxiosResponse } from \"axios\";\nimport { DragItem } from \"./common\";\n\n/*\n * Helper methods that will call Jikan's HTTP API. I need to make my own jikan-client one day...\n */\n\nexport enum CharacterRole {\n  Main = \"Main\",\n  Supporting = \"Supporting\",\n}\n\nexport enum Rating {\n  g = \"G\",\n  pg = \"PG\",\n  pg13 = \"PG-13\",\n  r17 = \"R\",\n  r = \"R+\",\n  rx = \"Rx\",\n}\n\n//Anime and Manga search result shared values\ninterface MALSearchResult {\n  end_date: string | null;\n  image_url: string;\n  mal_id: number;\n  members: number;\n  title: string;\n  url: string;\n  score: number;\n  start_date: string;\n  synopsis: string;\n}\n\nexport interface MALCharacterData {\n  image_url: string;\n  mal_id: number;\n  name: string;\n  role: CharacterRole;\n}\n\nexport interface AnimeSearchResult extends MALSearchResult {\n  airing: boolean;\n  episodes: number;\n  type: string;\n  rated: Rating;\n}\n\nexport interface MangaSearchResult extends MALSearchResult {\n  chapters: number;\n  publishing: boolean;\n  type: string;\n  volumes: number;\n}\n\nexport interface AnimeCharacterData extends MALCharacterData {\n  voice_actors: VoiceActorData[];\n}\n\nexport interface MangaCharacterData extends MALCharacterData {\n  url: string;\n}\n\nexport interface VoiceActorData {\n  image_url: string;\n  language: string;\n  mal_id: number;\n  name: string;\n  url: string;\n}\n\nexport interface DragAnimeCharItem extends AnimeCharacterData, DragItem {}\n\nconst baseUrl = \"https://api.jikan.moe/v3\";\n\n/**\n * Search MAL for a matching anime\n * @param searchQuery The search term to use\n * @param limit Max results returned\n */\nexport const searchAnime = (\n  searchQuery: string,\n  limit?: number\n): Promise<AxiosResponse<{ results: AnimeSearchResult[] }>> => {\n  return axios.get(`${baseUrl}/search/anime`, {\n    params: {\n      q: searchQuery,\n      limit,\n    },\n  });\n};\n\n/**\n * Search MAL for a matching manga\n * @param searchQuery The search term to use\n * @param limit Max results returned\n */\nexport const searchManga = (\n  searchQuery: string,\n  limit?: number\n): Promise<AxiosResponse<{ results: MangaSearchResult[] }>> => {\n  return axios.get(`${baseUrl}/search/manga`, {\n    params: {\n      q: searchQuery,\n      limit,\n    },\n  });\n};\n\n/**\n * Gets an anime's staff and character list.\n * @param malId The anime's id to get the info for\n */\nexport const getAnimeCharactersStaff = (\n  malId: number\n): Promise<AxiosResponse<{ characters: AnimeCharacterData[] }>> => {\n  return axios.get(`${baseUrl}/anime/${malId}/characters_staff`);\n};\n\n/**\n * Gets a manga's character list.\n * @param malId The manga's id to get the info for\n */\nexport const getMangaCharacters = (\n  malId: number\n): Promise<AxiosResponse<{ characters: MangaCharacterData[] }>> => {\n  return axios.get(`${baseUrl}/manga/${malId}/characters`);\n};\n\nexport const filterAnime = (data: AnimeSearchResult[]): AnimeSearchResult[] => {\n  //TODO: fix this. OH GOD WHY. TYPESCRIPT ENUMS ARE USELESS :'(\n  return data.filter(\n    (elem) =>\n      Object.values(Rating).indexOf(elem.rated) <=\n      Object.values(Rating).indexOf(Rating.r)\n  );\n};\n","import { SearchType } from \"./common\";\nimport { sampleSize } from \"lodash\";\n\n/**\n * Suggestions for search ideas in case the user doesn't have any\n */\nexport const suggestedSearches = {\n  [SearchType.TVshow]: [\n    \"Game of Thrones\",\n    \"Breaking Bad\",\n    \"Stranger Things\",\n    \"Rick and Morty\",\n    \"Adventure Time\",\n    \"Avatar: The Last Airbender\",\n    \"Community\",\n    \"The Office\",\n    \"The Walking Dead\",\n    \"Fargo\",\n  ],\n  [SearchType.Anime]: [\n    \"Baccano\",\n    \"Fate/Zero\",\n    \"Hunter x Hunter\",\n    \"Ping Pong the Animation\",\n    \"Death Parade\",\n    \"Mob Psycho 100\",\n    \"Gankutsuou\",\n    \"Neon Genesis Evangelion\",\n    \"Attack on Titan\",\n    \"Koe no Katachi\",\n  ],\n  [SearchType.Manga]: [\n    \"One Punch Man\",\n    \"Fullmetal Alchemist\",\n    \"Vinland Saga\",\n    \"Tower of God\",\n    \"Houseki no Kuni\",\n    \"Bleach\",\n    \"Tokyo Ghoul\",\n    \"Naruto\",\n    \"Death Note\",\n    \"JoJo's Bizarre Adventure Part 5: Golden Wind\",\n  ],\n};\n\nexport const getItems = (\n  searchType: SearchType,\n  numItems: number\n): string[] => {\n  return sampleSize(suggestedSearches[searchType], numItems);\n};\n","import React, { FC, useState, useEffect } from \"react\";\nimport { makeStyles, Theme, createStyles } from \"@material-ui/core/styles\";\n//import Button from \"@material-ui/core/Button\";\n//import TextField from \"@material-ui/core/TextField\";\nimport Paper from \"@material-ui/core/Paper\";\nimport IconButton from \"@material-ui/core/IconButton\";\nimport SearchIcon from \"@material-ui/icons/Search\";\nimport InputBase from \"@material-ui/core/InputBase\";\n//import MenuIcon from \"@material-ui/icons/Menu\";\nimport Divider from \"@material-ui/core/Divider\";\nimport Select from \"@material-ui/core/Select\";\nimport { Menu, MenuItem, FormControl, Typography } from \"@material-ui/core\";\nimport { SearchType } from \"../utils/common\";\nimport { getItems } from \"../utils/SuggestedSearches\";\n\nconst useStyles = makeStyles((theme: Theme) =>\n  createStyles({\n    root: {\n      display: \"flex\",\n      alignItems: \"center\",\n      margin: \"0 8px\",\n      backgroundColor: \"var(--darker-grey)\",\n    },\n    input: {\n      marginLeft: theme.spacing(1),\n      flex: 1,\n      fontSize: 16,\n    },\n    iconButton: {\n      padding: \"0 10px\",\n    },\n    divider: {\n      height: 28,\n      margin: 4,\n    },\n    select: {\n      padding: \"0 8px\",\n      fontSize: 14,\n    },\n    \"@media only screen and (min-width: 768px)\": {\n      root: {\n        display: \"flex\",\n        alignItems: \"center\",\n        margin: \"0 40px\",\n        backgroundColor: \"var(--darker-grey)\",\n      },\n      input: {\n        marginLeft: theme.spacing(1),\n        flex: 1,\n        fontSize: 20,\n      },\n      iconButton: {\n        padding: 10,\n      },\n      divider: {\n        height: 28,\n        margin: 4,\n      },\n      select: {\n        padding: \"0 12px\",\n      },\n    },\n    suggestionsRoot: {\n      display: \"flex\",\n      marginTop: \"12px\",\n      marginLeft: \"20px\",\n    },\n    itemContainer: {\n      display: \"flex\",\n      flexWrap: \"wrap\",\n      \"& > p\": {\n        marginLeft: \"8px\",\n        marginBottom: \"6px\",\n      },\n    },\n    suggestionItem: {\n      border: \"1px solid var(--lighter-grey)\",\n      fontSize: \"14px\",\n      padding: \"2px 8px 0\",\n      borderRadius: \"14px\",\n      cursor: \"pointer\",\n      whiteSpace: \"nowrap\",\n      \"&:hover\": {\n        opacity: \"0.6\",\n      },\n    },\n  })\n);\n\ninterface Props {\n  onSearch: (search: string) => void;\n  onChangeSearchType: (event: React.ChangeEvent<{ value: SearchType }>) => void;\n  className?: string;\n  defaultValue: SearchType;\n}\n\nconst SearchBar: FC<Props> = ({\n  onSearch,\n  onChangeSearchType,\n  className,\n  defaultValue,\n}) => {\n  const classes = useStyles();\n  const [searchValue, setSearchValue] = useState(\"\");\n  const [searchType, setSearchType] = useState(defaultValue);\n  const [suggestions, setSuggestions] = useState<string[]>([]);\n\n  useEffect(() => {\n    setSuggestions(getItems(searchType, 3));\n  }, [searchType]);\n\n  const handleChangeSearchType = (\n    event: React.ChangeEvent<{ value: unknown }>\n  ): void => {\n    const casted = event as React.ChangeEvent<{ value: SearchType }>;\n    setSearchType(event.target.value as SearchType);\n    onChangeSearchType(casted);\n  };\n\n  const renderSuggestion = (item: string): JSX.Element => (\n    <Typography\n      className={classes.suggestionItem}\n      onClick={() => {\n        onSearch(item);\n        setSearchValue(item);\n      }}\n    >\n      {item}\n    </Typography>\n  );\n\n  const handleSubmit = (event: React.FormEvent<HTMLDivElement>): void => {\n    onSearch(searchValue);\n    event.preventDefault();\n  };\n\n  const renderSuggestions = (): JSX.Element => (\n    <div className={classes.suggestionsRoot}>\n      <Typography component=\"div\" style={{ whiteSpace: \"nowrap\" }}>\n        Suggested searches:\n      </Typography>\n      <div className={classes.itemContainer}>\n        {suggestions.map(renderSuggestion)}\n      </div>\n    </div>\n  );\n\n  return (\n    <div className={className}>\n      <Paper component=\"form\" className={classes.root} onSubmit={handleSubmit}>\n        <FormControl variant=\"outlined\">\n          <Select\n            value={searchType}\n            onChange={handleChangeSearchType}\n            className={classes.select}\n          >\n            <MenuItem value={SearchType.TVshow}>TV show</MenuItem>\n            {/* <MenuItem value={SearchType.Movie}>Movie</MenuItem> */}\n            <MenuItem value={SearchType.Anime}>Anime</MenuItem>\n            <MenuItem value={SearchType.Manga}>Manga</MenuItem>\n          </Select>\n        </FormControl>\n        <Divider className={classes.divider} orientation=\"vertical\" />\n        <InputBase\n          className={classes.input}\n          placeholder=\"Search\"\n          name=\"search\"\n          autoComplete=\"off\"\n          value={searchValue}\n          onChange={(event) => setSearchValue(event.target.value)}\n        />\n        <IconButton\n          type=\"submit\"\n          className={classes.iconButton}\n          aria-label=\"search\"\n        >\n          <SearchIcon />\n        </IconButton>\n      </Paper>\n      {renderSuggestions()}\n    </div>\n  );\n};\n\nexport default SearchBar;\n","import React, { FC } from \"react\";\nimport { makeStyles, Theme, createStyles } from \"@material-ui/core/styles\";\n//import { AnimeSearchResult, Rating } from \"../utils/Jikan\";\nimport { ResultItem } from \"../utils/common\";\n\nconst mobileItemWidth = 100;\n/* eslint-disable @typescript-eslint/camelcase */\nconst useStyles = makeStyles((theme: Theme) =>\n  createStyles({\n    root: {\n      display: \"grid\",\n      gridGap: \"5px\",\n      gridTemplateColumns: `repeat(auto-fill, minmax(${mobileItemWidth}px, 1fr))`,\n    },\n    panel: {\n      borderRadius: 3,\n      backgroundColor: \"var(--darker-grey)\",\n      \"&:hover\": {\n        outline: \"2px solid var(--lighter-grey)\",\n        cursor: \"pointer\",\n      },\n    },\n    panel__title: {\n      fontSize: 14,\n      fontWeight: 500,\n      display: \"block\",\n      padding: \"8px\",\n    },\n    panel__image: {\n      maxWidth: mobileItemWidth,\n      height: \"auto\",\n    },\n    loadingCircle: {\n      margin: \"100px auto\",\n    },\n    \"@media only screen and (min-width: 768px)\": {\n      root: {\n        display: \"grid\",\n        gridGap: \"20px\",\n        gridTemplateColumns: \"repeat(auto-fill, minmax(200px, 1fr))\",\n      },\n      panel: {\n        borderRadius: 3,\n        backgroundColor: \"var(--darker-grey)\",\n        \"&:hover\": {\n          outline: \"2px solid var(--lighter-grey)\",\n          cursor: \"pointer\",\n        },\n      },\n      panel__title: {\n        fontSize: 18,\n        fontWeight: 500,\n        display: \"block\",\n        padding: \"8px\",\n      },\n      panel__image: {\n        maxWidth: 200,\n        height: \"auto\",\n      },\n      loadingCircle: {\n        margin: \"100px auto\",\n      },\n    },\n  })\n);\n/* eslint-enable @typescript-eslint/camelcase */\n\ninterface Props {\n  data: ResultItem[];\n  loading: boolean;\n  onSelect: (malId: number) => void;\n  className?: string;\n}\n\n// interface OnSelectFunction {\n//   (malId: number): void;\n// }\n\nconst SearchResults: FC<Props> = ({ data, loading, onSelect, className }) => {\n  const classes = useStyles();\n\n  //Anime/Manga panel\n  const renderItem = (item: ResultItem): JSX.Element => {\n    return (\n      <div\n        className={classes.panel}\n        key={item.id}\n        onClick={() => onSelect(item.id)}\n      >\n        <div className={classes.panel__title}>{item.label}</div>\n        <img\n          alt={item.label}\n          src={item.imageUrl}\n          className={classes.panel__image}\n        />\n      </div>\n    );\n  };\n\n  if (loading) {\n    return <div></div>;\n  } else {\n    return (\n      <div className={className}>\n        <div className={classes.root}>\n          {!loading && data.map((elem) => renderItem(elem))}\n        </div>\n      </div>\n    );\n  }\n};\n\nexport default SearchResults;\n","import axios, { AxiosResponse } from \"axios\";\n\n/*\n * Helper methods that will call the TVDB's REST API for me.\n * Maybe this should be a class?\n */\n\n//URL used for loading images\nexport const TVDBUrl = \"https://thetvdb.com\";\nexport const TVDBImgUrl = \"https://artworks.thetvdb.com/banners/\";\nexport const missingActorUrl = \"https://artworks.thetvdb.com/person/actor.jpg\";\n\n//For local testing\nconst proxyBaseUrl = `https://us-central1-test-firebase-3704b.cloudfunctions.net/proxy`;\n\nexport interface SeriesResult {\n  id: number;\n  banner: string | null;\n  image: string;\n  overview: string;\n  poster: string | null;\n  seriesName: string;\n}\n\nexport interface SeriesCharacter {\n  id: number;\n  image: string;\n  imageAdded: string; //Date\n  imageAuthor: number;\n  lastUpdated: string; //Date\n  name: string;\n  role: string;\n  seriesId: number;\n  sortOrder: number;\n}\n\nexport const searchSeries = (\n  query: string\n): Promise<AxiosResponse<{ data: SeriesResult[] }>> => {\n  return axios.get(\n    `${proxyBaseUrl}/search/series?name=${encodeURIComponent(query)}`\n  );\n};\n\nexport const getSeriesCharacters = (\n  id: number\n): Promise<AxiosResponse<{ data: SeriesCharacter[] }>> => {\n  return axios.get(`${proxyBaseUrl}/series/${id}/actors`);\n};\n","import { AnimeCharacterData } from \"../../utils/Jikan\";\nimport React, { FC, useState } from \"react\";\nimport { makeStyles, Theme, createStyles } from \"@material-ui/core/styles\";\nimport { CharacterItem } from \"../../utils/common\";\n\n/* eslint-disable @typescript-eslint/camelcase */\nconst useStyles = makeStyles((theme: Theme) =>\n  createStyles({\n    characterTile: {\n      position: \"relative\",\n      flexGrow: 0,\n      outline: \"1px solid var(--lighter-grey)\",\n      height: \"var(--image-tile-size)\",\n      overflow: \"hidden\",\n      cursor: \"pointer\",\n    },\n    characterTile__name: {\n      position: \"absolute\",\n      top: 0,\n      left: 0,\n      right: 0,\n      zIndex: 1,\n      fontSize: 10,\n      fontWeight: 500,\n      whiteSpace: \"nowrap\",\n      textOverflow: \"ellipsis\",\n      overflow: \"hidden\",\n      backgroundColor: \"rgb(20, 20, 20, 0.65)\",\n      padding: \"3px 4px\",\n    },\n    characterTile__image: {\n      width: \"var(--image-tile-size)\",\n      height: \"auto\",\n    },\n    \"@media only screen and (min-width: 768px)\": {\n      characterTile__name: {\n        fontSize: 14,\n      },\n    },\n  })\n);\n/* eslint-enable @typescript-eslint/camelcase */\n\ninterface CharacterTileProps {\n  char: CharacterItem;\n}\n\n//Tile that represents a character.\nconst CharacterTile: FC<CharacterTileProps> = ({ char }): JSX.Element => {\n  const classes = useStyles();\n\n  return (\n    <div className={classes.characterTile} key={char.id}>\n      <div className={classes.characterTile__name} title={char.name}>\n        {char.name}\n      </div>\n      <img\n        alt={char.name}\n        src={char.imageUrl}\n        className={classes.characterTile__image}\n      />\n    </div>\n  );\n};\n\nexport default CharacterTile;\n","import React, { useState, FC, useEffect } from \"react\";\nimport { makeStyles, Theme, createStyles } from \"@material-ui/core/styles\";\nimport { ReactSortable } from \"react-sortablejs\";\nimport { DragAnimeCharItem } from \"../../utils/Jikan\";\nimport CharacterTile from \"./CharacterTile\";\nimport { CharacterItem } from \"../../utils/common\";\n\nconst useStyles = makeStyles((theme: Theme) =>\n  createStyles({\n    root: {\n      display: \"flex\",\n      flexWrap: \"wrap\",\n      outline: \"1px solid red\",\n      minHeight: \"var(--image-tile-size)\",\n    },\n    tierLabel: {\n      width: 40,\n      fontSize: 20,\n      fontWeight: 600,\n      flexGrow: 0,\n      color: \"black\",\n    },\n    list: {\n      flexGrow: 1,\n      display: \"flex\",\n      flexWrap: \"wrap\",\n      maxWidth: \"calc(100% - 80px)\",\n    },\n    \"@media only screen and (min-width: 768px)\": {\n      tierLabel: {\n        width: 80,\n        fontSize: 24,\n      },\n    },\n  })\n);\n\ninterface Props {\n  name: string;\n  group: string;\n  listItems: CharacterItem[];\n  labelColour?: string;\n  index: number;\n  onTierChange: (list: CharacterItem[], index: number) => void;\n}\n\n//Represents a tier in a tierlist. Example: \"A-tier\"\nconst Tier: FC<Props> = ({\n  name,\n  group,\n  listItems,\n  labelColour,\n  index,\n  onTierChange,\n}): JSX.Element => {\n  const classes = useStyles();\n  const [list, setList] = useState<CharacterItem[]>(listItems || []);\n\n  useEffect(() => {\n    onTierChange(list, index);\n  }, [list, index]);\n\n  return (\n    <div className={classes.root}>\n      <div\n        className={classes.tierLabel}\n        style={{ backgroundColor: labelColour }}\n      >\n        <p style={{ verticalAlign: \"middle\" }}>{name}</p>\n      </div>\n      <ReactSortable\n        list={list}\n        setList={setList}\n        className={classes.list}\n        group={group}\n      >\n        {list.map((char) => (\n          <CharacterTile char={char} key={char.id} />\n        ))}\n      </ReactSortable>\n    </div>\n  );\n};\n\nexport default Tier;\n","export const DefaultColourOrder = [\n  \"red\",\n  \"red-orange\",\n  \"orange\",\n  \"yellow\",\n  \"yellow-green\",\n  \"green\",\n  \"cyan\",\n  \"blue\",\n  \"dark-blu\",\n  \"pink\",\n  \"purple\",\n  \"black\",\n  \"dark-grey\",\n  \"grey\",\n  \"white\",\n];\n\nexport const DefaultTiers = [\"S\", \"A\", \"B\", \"C\", \"D\", \"E\", \"F\"];\n","import React from \"react\";\nimport { SnackbarMessage } from \"../utils/common\";\n\ntype ContextProps = {\n  showSidebar: boolean;\n  setShowSidebar: (show: boolean) => void;\n  setMessage: (msg: SnackbarMessage) => void;\n};\n\nconst AppContext = React.createContext<Partial<ContextProps>>({\n  showSidebar: false,\n});\n\nexport default AppContext;\n","import React, { FC, useState, useRef, useEffect, useContext } from \"react\";\nimport { makeStyles, Theme, createStyles } from \"@material-ui/core/styles\";\nimport { AnimeCharacterData, DragAnimeCharItem } from \"../../utils/Jikan\";\nimport { ReactSortable } from \"react-sortablejs\";\nimport CharacterTile from \"./CharacterTile\";\nimport Tier from \"./Tier\";\nimport { DefaultColourOrder, DefaultTiers } from \"./constants\";\nimport domtoimage from \"dom-to-image\";\nimport Button from \"@material-ui/core/Button\";\nimport { saveAs } from \"file-saver\";\n//import { Save, SaveAlt } from \"@material-ui/icons\";\nimport SaveIcon from \"@material-ui/icons/Save\";\nimport SaveAltIcon from \"@material-ui/icons/SaveAlt\";\nimport MediaQuery from \"react-responsive\";\nimport { CharacterItem, DragItem } from \"../../utils/common\";\nimport AppContext from \"../../contexts/AppContext\";\n\n/* eslint-disable @typescript-eslint/camelcase */\nconst useStyles = makeStyles((theme: Theme) =>\n  createStyles({\n    root: {\n      padding: 10,\n      backgroundColor: \"var(--dark-grey)\",\n    },\n    unrankedList: {\n      display: \"flex\",\n      flexWrap: \"wrap\",\n      marginTop: 20,\n    },\n    button: {\n      marginRight: theme.spacing(1),\n    },\n    buttonGroup: {\n      display: \"flex\",\n      marginBottom: theme.spacing(2),\n    },\n    btnIcon: {\n      marginRight: theme.spacing(1),\n    },\n  })\n);\n/* eslint-enable @typescript-eslint/camelcase */\n\ninterface Props {\n  mediaId: string | number;\n  characterData: CharacterItem[];\n}\n\ninterface TierData {\n  sorted: CharacterItem[][];\n  unsorted: CharacterItem[];\n}\n\nconst store = window.localStorage;\n\n/**\n * Load save data from localStorage if it exists.\n * @param mediaId - the series/anime/manga's ID with the media's prefix\n * @param characterData - character data\n */\nconst getSaveData = (\n  mediaId: string | number,\n  characterData: CharacterItem[]\n): TierData => {\n  const saveData = store.getItem(`${mediaId}`);\n  if (saveData) {\n    return JSON.parse(saveData) as TierData;\n  } else {\n    return {\n      sorted: [],\n      unsorted: characterData,\n    };\n  }\n};\n\nconst TierList: FC<Props> = ({ mediaId, characterData }): JSX.Element => {\n  const classes = useStyles();\n  const tierlistEl = useRef<HTMLDivElement>(null); //For export to image\n  const tierData = useRef<TierData>(getSaveData(mediaId, characterData));\n  const [list, setList] = useState<CharacterItem[]>(tierData.current.unsorted);\n  const appContext = useContext(AppContext);\n\n  //Handle \"download image\"\n  const handleExport = (): void => {\n    if (tierlistEl.current) {\n      domtoimage\n        .toBlob(tierlistEl.current)\n        .then((blob: Blob) => {\n          saveAs(blob, `tierlist-${mediaId}.png`);\n        })\n        .catch((error) => {\n          console.error(\"Could not generate image\", error);\n        });\n    }\n  };\n\n  //Handle save to browser localstorage\n  const handleSave = (): void => {\n    try {\n      tierData.current.unsorted = list; //Update the unsorted list\n      store.setItem(`${mediaId}`, JSON.stringify(tierData.current));\n      appContext.setMessage?.({\n        text: \"Saved successfully!\",\n        severity: \"success\",\n      });\n    } catch (err) {\n      appContext.setMessage?.({\n        text: err.toString(),\n        severity: \"error\",\n      });\n    }\n  };\n\n  //Propogate state upwards from Tier\n  const handleTierChange = (list: CharacterItem[], index: number): void => {\n    tierData.current.sorted[index] = list;\n  };\n\n  return (\n    <div>\n      <div className={classes.buttonGroup}>\n        <Button\n          onClick={handleExport}\n          className={classes.button}\n          variant=\"outlined\"\n        >\n          <SaveAltIcon className={classes.btnIcon} />\n          Download <MediaQuery minWidth={768}>image</MediaQuery>\n        </Button>\n        <Button\n          onClick={handleSave}\n          className={classes.button}\n          variant=\"outlined\"\n        >\n          <SaveIcon className={classes.btnIcon} />\n          Save\n        </Button>\n      </div>\n      <div ref={tierlistEl} className={classes.root}>\n        {DefaultTiers.map((tier, index) => (\n          <Tier\n            index={index}\n            key={index}\n            //ref={tierRefs[index]}\n            onTierChange={handleTierChange}\n            name={tier}\n            listItems={tierData.current.sorted[index]}\n            group=\"tierlist\"\n            labelColour={`var(--tier-${DefaultColourOrder[index]})`}\n          />\n        ))}\n        <ReactSortable\n          group=\"tierlist\"\n          list={list}\n          setList={setList}\n          className={classes.unrankedList}\n        >\n          {list.map((char) => (\n            <CharacterTile char={char} key={char.id} />\n          ))}\n        </ReactSortable>\n      </div>\n    </div>\n  );\n};\n\nexport default TierList;\n","import React, { useState, useEffect, useRef, useContext } from \"react\";\nimport \"./ListMaker.scss\";\nimport SearchBar from \"../components/SearchBar\";\nimport SearchResults from \"../components/SearchResults\";\nimport {\n  searchAnime,\n  searchManga,\n  getAnimeCharactersStaff,\n  getMangaCharacters,\n  filterAnime,\n} from \"../utils/Jikan\";\nimport {\n  searchSeries,\n  TVDBUrl,\n  getSeriesCharacters,\n  TVDBImgUrl,\n  missingActorUrl,\n} from \"../utils/TVDB\";\nimport { makeStyles, Theme, createStyles } from \"@material-ui/core/styles\";\nimport CircularProgress from \"@material-ui/core/CircularProgress\";\nimport TierList from \"../components/TierList/TierList\";\nimport { CharacterItem, ResultItem, SearchType } from \"../utils/common\";\nimport AppContext from \"../contexts/AppContext\";\nimport mangaFilter from \"../utils/mangaFilter\";\n//import Firebase, { FirebaseContext } from \"../components/Firebase\";\n\n//TODO: validate inputs\n\nconst useStyles = makeStyles((theme: Theme) =>\n  createStyles({\n    root: {\n      display: \"grid\",\n      gridGap: \"20px\",\n      gridTemplateColumns: \"repeat(auto-fill, minmax(200px, 1fr))\",\n    },\n    loadingCircle: {\n      margin: \"100px auto\",\n    },\n    searchBar: {\n      marginBottom: 10,\n    },\n    \"@media only screen and (min-width: 768px)\": {\n      searchBar: {\n        marginBottom: 40,\n      },\n    },\n  })\n);\n\nconst mediaTypePrefix = {\n  [SearchType.TVshow]: \"tv-\",\n  [SearchType.Anime]: \"anime-\",\n  [SearchType.Manga]: \"manga\",\n};\n\nconst filterSet = new Set(mangaFilter);\n\n//TODO: Refactor this into someting more focused. It's handling too many responsibilities right now...\nconst ListMaker: React.FC = () => {\n  const [searchResult, setSearchResult] = useState<ResultItem[]>([]);\n  const [isLoading, setLoading] = useState<boolean>(false);\n  const [mediaId, setMediaId] = useState<number>();\n  const [characterData, setCharacterData] = useState<CharacterItem[]>([]);\n  const [searchType, setSearchType] = useState<SearchType>(SearchType.TVshow);\n  //const [token, setToken] = useState<string>(localStorage.getItem(\"auth-token\") || \"\");\n  //const firebase = useContext(FirebaseContext);\n  const { setMessage } = useContext(AppContext);\n\n  const classes = useStyles();\n\n  //Handle a search submit\n  const handleSearch = (searchValue: string): void => {\n    //Clear the previous search's results\n    setCharacterData([]);\n\n    if (searchValue.length >= 3) {\n      setLoading(true);\n\n      if (searchType === SearchType.TVshow) {\n        searchSeries(searchValue).then(\n          (res) => {\n            console.log(res);\n            setSearchResult(\n              res.data.data.map((elem) => ({\n                id: elem.id,\n                label: elem.seriesName,\n                imageUrl: `${TVDBUrl}${elem.image}`,\n              }))\n            );\n            setLoading(false);\n          },\n          (err) => {\n            setMessage?.({\n              text: \"Could not search, TVDB's API is down\",\n              severity: \"error\",\n            });\n            setLoading(false);\n          }\n        );\n      } else if (searchType === SearchType.Anime) {\n        searchAnime(searchValue, 10).then(\n          (res) => {\n            console.log(res);\n            const filtered = filterAnime(res.data.results);\n            setSearchResult(\n              filtered.map((elem) => ({\n                id: elem.mal_id,\n                label: elem.title,\n                imageUrl: elem.image_url,\n              }))\n            );\n            setLoading(false);\n          },\n          (err) => {\n            setMessage?.({\n              text: \"Could not search, either MAL or Jikan's API is down\",\n              severity: \"error\",\n            });\n            setLoading(false);\n          }\n        );\n      } else if (searchType === SearchType.Manga) {\n        searchManga(searchValue, 10).then(\n          (res) => {\n            console.log(res);\n            const filtered = res.data.results.filter(\n              (manga) => !filterSet.has(manga.mal_id)\n            );\n            setSearchResult(\n              filtered.map((elem) => ({\n                id: elem.mal_id,\n                label: elem.title,\n                imageUrl: elem.image_url,\n              }))\n            );\n            setLoading(false);\n          },\n          (err) => {\n            setMessage?.({\n              text: \"Could not search, either MAL or Jikan's API is down\",\n              severity: \"error\",\n            });\n            setLoading(false);\n          }\n        );\n      }\n    }\n  };\n\n  //Handle when a user clicks a search result entry\n  const handleOnSelect = (id: number): void => {\n    setLoading(true);\n    if (searchType === SearchType.TVshow) {\n      getSeriesCharacters(id).then((res) => {\n        console.log(res);\n        setMediaId(id);\n        setCharacterData(\n          res.data.data.map((elem) => ({\n            id: elem.id,\n            name: elem.role,\n            actor: elem.name,\n            imageUrl: elem.image\n              ? `${TVDBImgUrl}${elem.image}`\n              : missingActorUrl,\n          }))\n        );\n      });\n      setLoading(false);\n    } else if (searchType === SearchType.Anime) {\n      getAnimeCharactersStaff(id)\n        .then((res) => {\n          //console.log(res);\n          if (!res || res.data.characters.length === 0) {\n            setMessage?.({\n              text: \"Uh oh, looks like that Anime entry has no characters.\",\n              severity: \"error\",\n            });\n          } else {\n            setMediaId(id);\n            setCharacterData(\n              res.data.characters.map((elem) => ({\n                ...elem,\n                id: elem.mal_id,\n                imageUrl: elem.image_url,\n              }))\n            );\n          }\n          setLoading(false);\n        })\n        .catch((err) => {\n          setMessage?.(err.response.data.message);\n          setLoading(false);\n        });\n    } else if (searchType === SearchType.Manga) {\n      getMangaCharacters(id)\n        .then((res) => {\n          console.log(res);\n          if (!res || res.data.characters.length === 0) {\n            setMessage?.({\n              text: \"Uh oh, looks like that Manga entry has no characters.\",\n              severity: \"error\",\n            });\n          } else {\n            setMediaId(id);\n            setCharacterData(\n              res.data.characters.map((elem) => ({\n                ...elem,\n                id: elem.mal_id,\n                imageUrl: elem.image_url,\n              }))\n            );\n          }\n          setLoading(false);\n        })\n        .catch((err) => {\n          setMessage?.({\n            text: err.response.data.message,\n            severity: \"error\",\n          });\n          setLoading(false);\n        });\n    }\n  };\n\n  return (\n    <div className=\"pageRoot\">\n      <SearchBar\n        onSearch={handleSearch}\n        className={classes.searchBar}\n        defaultValue={searchType}\n        onChangeSearchType={(event): void => {\n          setSearchType(event.target.value);\n          //searchType.current = event.target.value;\n          console.log(event.target.value);\n        }}\n      />\n      {!(characterData.length > 0) && (\n        <SearchResults\n          data={searchResult}\n          loading={isLoading}\n          onSelect={handleOnSelect}\n        />\n      )}\n      {isLoading && (\n        <CircularProgress size={150} className={classes.loadingCircle} />\n      )}\n      {characterData.length > 0 && mediaId && (\n        <TierList\n          mediaId={`${mediaTypePrefix[searchType]}${mediaId}`}\n          characterData={characterData}\n        />\n      )}\n    </div>\n  );\n};\n\nexport default ListMaker;\n","export default[605,632,839,1277,1281,1391,1392,1393,1394,1395,1767,1877,2927,2929,2958,3095,3212,3233,3234,3300,3410,3411,3412,3421,3422,3424,3437,3440,3441,3442,3445,3447,3449,3450,3454,3460,3461,3462,3501,3512,3527,3528,3530,3535,3536,3542,3558,3562,3619,3622,3623,3625,3629,3697,3701,3702,3703,3705,3706,3707,3733,3736,3739,3742,3744,3768,3794,3801,3804,3805,3806,3808,3810,3812,3815,3823,3827,3828,3830,3832,3833,3834,3835,3844,3847,3848,3870,3922,3937,3940,3967,3969,3977,3979,3984,3985,4023,4029,4106,4162,4164,4165,4169,4170,4217,4225,4240,4315,4740,4741,5180,5192,5419,5435,5436,5437,5439,5467,5736,6278,6628,6824,6833,6840,6899,6947,6972,7073,7124,7127,7128,7129,7146,7164,7257,7298,7303,7412,7413,7452,7470,7484,7489,7501,7545,7579,7580,7608,7609,7612,7616,7683,7686,7688,7746,7785,7801,7803,7804,7805,7807,7808,7817,7820,7823,7825,7826,7827,7830,7831,7833,7835,7862,7874,7875,7884,7897,7906,7907,7908,7998,8258,8326,8349,8426,8458,8498,8506,8526,8633,8808,8844,8858,8859,8937,9012,9013,9020,9081,9316,9370,9420,9709,9759,9760,9847,9865,9912,9913,9914,9915,9916,9917,9919,9920,9921,9922,9923,9924,9925,9926,9927,9938,9939,9940,9941,9942,9943,9944,9945,9946,9947,9948,9949,9950,9951,9952,9953,9954,9955,9956,9957,9958,9959,9960,9961,9968,10020,10087,10157,10158,10217,10245,10248,10269,10379,10428,10574,10753,10769,10775,11017,11025,11108,11115,11123,11158,11200,11256,11271,11309,11312,11333,11369,11427,11510,11534,11549,11556,11580,11637,11642,11650,11740,11760,11762,11765,11811,11821,11826,11829,11885,11888,11916,11936,11986,11999,12034,12088,12089,12129,12130,12171,12176,12177,12178,12218,12223,12230,12301,12316,12339,12348,12393,12402,12403,12408,12409,12410,12546,12563,12564,12565,12566,12600,12634,12661,12710,12715,12723,12730,12804,12827,12847,12932,12935,12940,12977,12984,13097,13109,13231,13246,13286,13304,13317,13332,13333,13353,13376,13388,13425,13464,13467,13531,13547,13569,13570,13620,13650,13684,13805,13987,14037,14081,14085,14100,14106,14107,14108,14152,14193,14242,14267,14362,14371,14372,14373,14374,14375,14393,14394,14416,14417,14449,14450,14476,14551,14552,14584,14585,14602,14638,14644,14646,14648,14651,14667,14693,14694,14742,14755,14756,14765,14766,14767,14769,14774,14793,14794,14797,14802,14803,14805,14812,14813,14815,14817,14819,14838,14840,14848,14853,14867,14878,14912,14913,14915,14916,14917,14958,14959,14960,14962,14963,14966,14968,14981,14982,14984,15004,15019,15024,15026,15028,15031,15034,15063,15076,15080,15131,15196,15199,15232,15294,15296,15308,15310,15353,15354,15374,15402,15419,15430,15462,15524,15560,15568,15580,15598,15733,15773,15789,15791,15819,15853,15864,15925,15926,15939,15941,15944,15948,15979,15989,16e3,16001,16002,16012,16014,16017,16021,16022,16024,16035,16041,16047,16079,16101,16105,16116,16117,16128,16130,16131,16133,16134,16139,16152,16154,16155,16167,16170,16206,16214,16266,16267,16275,16299,16322,16324,16326,16336,16337,16340,16363,16364,16365,16366,16367,16368,16379,16387,16388,16435,16463,16464,16469,16475,16477,16487,16488,16489,16491,16492,16493,16495,16510,16545,16546,16559,16560,16561,16568,16573,16590,16591,16863,16886,16887,16910,16917,16918,16991,17047,17058,17078,17083,17109,17120,17130,17138,17254,17266,17269,17270,17289,17290,17316,17332,17338,17346,17352,17369,17379,17382,17438,17466,17469,17470,17564,17603,17605,17645,17678,17727,17787,17804,17812,17813,17816,17843,17850,17922,17944,17951,17990,17993,18033,18081,18082,18099,18102,18122,18134,18156,18168,18174,18199,18207,18301,18303,18332,18349,18378,18426,18463,18476,18490,18529,18561,18628,18662,18730,18796,18797,18798,18805,18851,18852,18886,18921,18948,18951,19040,19092,19106,19126,19133,19165,19184,19201,19202,19260,19261,19305,19361,19403,19411,19425,19485,19644,19689,19690,19756,19758,19760,19783,19811,19858,19913,19976,19977,20007,20015,20033,20034,20047,20052,20059,20061,20070,20093,20117,20119,20128,20177,20179,20180,20223,20252,20255,20299,20302,20311,20312,20313,20319,20320,20335,20353,20387,20389,20399,20403,20478,20479,20487,20488,20492,20498,20499,20500,20502,20517,20527,20536,20559,20560,20570,20571,20573,20610,20611,20653,20692,20709,20715,20897,20905,20913,20915,20917,20927,20932,20941,20951,20972,21010,21012,21037,21050,21102,21106,21122,21126,21154,21169,21193,21195,21196,21197,21199,21206,21208,21209,21211,21213,21231,21232,21234,21236,21238,21240,21241,21242,21244,21245,21246,21247,21248,21249,21250,21269,21280,21284,21293,21373,21374,21375,21493,21546,21573,21605,21606,21636,21661,21668,21688,21714,21719,21721,21724,21727,21728,21746,21748,21751,21764,21765,21767,21768,21769,21771,21772,21773,21774,21775,21776,21777,21778,21779,21780,21786,21792,21793,21794,21807,21808,21810,21811,21812,21816,21817,21818,21819,21820,21821,21834,21839,21849,21855,21866,21869,21871,21873,21874,21875,21876,21877,21878,21887,21892,21914,21918,21936,21940,21941,21944,21954,21955,21958,21960,21961,21962,21963,21964,21966,21972,21984,21986,22006,22011,22012,22015,22016,22017,22018,22019,22020,22021,22022,22024,22025,22026,22041,22042,22043,22064,22072,22073,22076,22077,22081,22084,22089,22126,22133,22134,22141,22145,22146,22152,22153,22155,22205,22213,22219,22220,22224,22227,22228,22236,22237,22238,22269,22270,22272,22274,22277,22283,22285,22286,22312,22317,22318,22321,22330,22332,22340,22345,22346,22357,22362,22372,22373,22374,22375,22376,22377,22380,22387,22388,22399,22407,22409,22410,22411,22420,22430,22432,22458,22462,22463,22465,22468,22469,22470,22472,22486,22502,22512,22524,22526,22579,22590,22591,22592,22593,22596,22599,22606,22609,22612,22613,22624,22625,22662,22666,22667,22668,22680,22681,22683,22702,22704,22717,22724,22726,22736,22739,22740,22741,22758,22759,22760,22827,22828,22832,22838,22840,22844,22845,22869,22930,22931,22932,22960,22976,22977,22979,23043,23048,23061,23064,23101,23106,23120,23122,23124,23126,23128,23129,23132,23133,23137,23143,23144,23145,23146,23152,23155,23163,23164,23190,23221,23389,23409,23410,23411,23412,23421,23434,23451,23454,23456,23461,23471,23478,23483,23510,23520,23544,23545,23579,23594,23625,23634,23635,23686,23708,23714,23715,23719,23752,23759,23812,23813,23826,23831,23833,23853,23855,23872,23914,23916,23919,23966,23974,23990,23994,24e3,24048,24055,24135,24136,24137,24140,24158,24163,24168,24169,24170,24171,24180,24188,24189,24194,24195,24196,24197,24198,24200,24202,24203,24206,24245,24259,24260,24304,24331,24333,24359,24379,24383,24384,24388,24391,24392,24397,24410,24415,24416,24448,24491,24508,24511,24623,24634,24642,24678,24687,24711,24712,24713,24719,24740,24752,24758,24762,24781,24782,24784,24788,24789,24814,24843,24844,24853,24854,24860,24911,24912,24913,24918,24919,24920,24921,24922,24924,24931,24932,24935,24957,24958,24975,24976,24993,24998,25e3,25001,25002,25004,25005,25006,25007,25009,25032,25033,25039,25040,25047,25048,25050,25051,25056,25073,25074,25087,25095,25099,25100,25102,25103,25104,25126,25138,25139,25140,25142,25143,25145,25147,25156,25192,25275,25303,25305,25367,25369,25381,25390,25399,25400,25402,25406,25426,25429,25431,25432,25434,25436,25441,25443,25445,25511,25512,25517,25523,25565,25610,25619,25622,25623,25626,25651,25662,25667,25686,25691,25705,25731,25733,25737,25740,25745,25746,25754,25756,25760,25761,25774,25785,25790,25802,25830,25832,25833,25865,25887,25920,25934,25935,25936,25957,26003,26004,26025,26032,26035,26042,26043,26045,26054,26062,26066,26067,26068,26069,26070,26093,26096,26097,26112,26120,26222,26223,26226,26227,26228,26242,26261,26269,26309,26316,26332,26349,26397,26400,26413,26420,26435,26437,26438,26461,26470,26471,26472,26483,26498,26516,26517,26518,26526,26563,26607,26630,26649,26668,26722,26730,26738,26799,26873,26879,26883,26885,26891,26895,26897,26911,26917,26921,26925,26939,26991,26993,27069,27097,27099,27103,27107,27121,27123,27125,27147,27201,27205,27209,27213,27215,27219,27221,27253,27255,27257,27263,27267,27269,27339,27341,27403,27465,27467,27525,27527,27539,27541,27551,27565,27567,27569,27591,27597,27601,27603,27605,27609,27611,27645,27647,27649,27651,27653,27703,27713,27733,27735,27739,27753,27755,27787,27797,27799,27825,27897,27911,27923,27973,27975,27977,27995,27999,28001,28003,28055,28057,28083,28085,28087,28089,28095,28137,28166,28170,28186,28190,28196,28204,28228,28249,28283,28341,28425,28427,28431,28441,28475,28479,28481,28483,28505,28541,28583,28585,28637,28641,28643,28673,28711,28747,28767,28781,28847,28849,28869,28871,28873,28889,28891,28909,28939,28941,28943,28945,28963,28977,28981,28985,28999,29015,29019,29023,29033,29035,29037,29043,29065,29077,29081,29085,29093,29107,29137,29151,29153,29157,29161,29167,29169,29171,29185,29201,29203,29223,29275,29281,29359,29393,29401,29419,29425,29449,29481,29483,29487,29491,29493,29497,29499,29501,29503,29507,29527,29533,29535,29537,29551,29555,29559,29573,29575,29577,29579,29581,29627,29629,29689,29693,29695,29717,29719,29737,29745,29797,29825,29865,29869,29923,29943,29947,29965,29981,30001,30003,30005,30035,30039,30057,30061,30073,30075,30077,30081,30093,30095,30097,30103,30111,30113,30117,30127,30151,30155,30195,30211,30231,30233,30235,30245,30249,30253,30261,30263,30269,30275,30279,30281,30283,30287,30291,30293,30295,30297,30319,30323,30325,30331,30333,30335,30337,30339,30345,30351,30355,30395,30399,30445,30449,30451,30455,30513,30515,30583,30645,30647,30651,30657,30659,30661,30663,30665,30667,30669,30671,30673,30675,30677,30681,30683,30685,30687,30689,30691,30693,30697,30699,30701,30703,30705,30707,30709,30713,30719,30721,30729,30731,30763,30765,30767,30769,30771,30773,30775,30785,30819,30835,30841,30843,30847,30879,30885,30923,30999,31021,31023,31039,31047,31109,31113,31139,31145,31147,31183,31239,31253,31259,31261,31263,31267,31269,31279,31281,31317,31321,31345,31347,31467,31663,31665,31667,31669,31671,31675,31677,31679,31683,31687,31689,31693,31697,31701,31703,31705,31709,31713,31715,31717,31721,31723,31725,31727,31729,31733,31735,31737,31739,31743,31745,31747,31749,31751,31755,31757,31763,31765,31767,31771,31777,31781,31785,31789,31793,31795,31799,31805,31807,31809,31813,31815,31817,31829,31831,31833,31957,31961,31969,31989,31991,32083,32101,32121,32369,32387,32537,32543,32545,32547,32551,32555,32563,32565,32567,32569,32571,32573,32575,32577,32579,32581,32583,32589,32591,32593,32595,32597,32601,32603,32605,32609,32613,32615,32619,32625,32631,32633,32637,32639,32643,32645,32647,32649,32651,32655,32661,32663,32665,32669,32671,32681,32683,32687,32689,32691,32697,32699,32701,32703,32705,32737,32741,32747,32749,32769,32789,32869,33007,33059,33137,33147,33203,33241,33255,33289,33443,33459,33491,33519,33573,33761,33779,33819,34079,34089,34217,34337,34595,34621,34629,34631,34693,34719,34757,34797,34799,35041,35091,35201,35353,35449,35619,35663,35699,35809,35831,35869,36093,36225,36241,36295,36393,36433,36491,36533,36555,36715,36765,36813,36915,36995,37031,37097,37101,37103,37567,37577,37583,37595,37617,37651,37763,37771,37777,37807,37863,37867,37947,38009,38137,38141,38143,38145,38187,38189,38191,38193,38195,38197,38199,38201,38213,38215,38217,38219,38221,38223,38225,38227,38233,38237,38239,38241,38247,38249,38253,38255,38257,38259,38263,38265,38271,38275,38279,38281,38293,38299,38303,38309,38313,38315,38317,38321,38323,38325,38331,38333,38335,38341,38343,38345,38347,38353,38355,38357,38359,38361,38363,38365,38367,38369,38377,38379,38381,38383,38385,38387,38389,38393,38395,38397,38399,38401,38403,38405,38407,38409,38411,38413,38415,38417,38419,38421,38423,38427,38429,38431,38433,38435,38437,38447,38449,38451,38453,38457,38461,38465,38467,38469,38487,38489,38491,38495,38497,38499,38501,38509,38511,38513,38515,38517,38519,38521,38523,38525,38527,38531,38533,38535,38539,38541,38543,38545,38549,38551,38553,38555,38557,38561,38563,38565,38567,38569,38573,38575,38577,38579,38581,38585,38591,38593,38595,38599,38601,38605,38607,38609,38611,38613,38615,38617,38619,38621,38623,38625,38629,38631,38633,38637,38655,38657,38659,38661,38665,38667,38671,38675,38677,38679,38681,38683,38687,38689,38691,38695,38699,38709,38727,38729,38731,38733,38737,38739,38741,38743,38745,38747,38751,38753,38755,38757,38759,38761,38763,38769,38777,38779,38781,38783,38785,38789,38793,38795,38801,38803,38807,38813,38817,38821,38823,38825,38829,38833,38837,38839,38841,38843,38851,38853,38857,38859,38861,38863,38865,38867,38869,38871,38873,38877,38881,38883,38887,38895,38897,38903,38905,38907,38911,38915,38917,38919,38923,38925,38927,38929,38931,38933,38935,38939,38943,38949,38951,38953,38955,38957,38959,38961,38973,38975,38977,38981,38983,38985,38987,38989,38991,38993,38995,38999,39001,39003,39005,39013,39015,39017,39019,39021,39025,39027,39029,39031,39033,39037,39039,39043,39063,39079,39099,39103,39109,39111,39113,39115,39117,39119,39133,39137,39153,39177,39179,39181,39189,39257,39259,39261,39263,39265,39269,39417,39443,39465,39467,39471,39473,39475,39477,39479,39483,39489,39493,39495,39499,39571,39721,39725,39727,39761,39885,39887,39889,39891,39895,39897,39899,39901,39903,39905,39909,39911,39915,39917,39923,39925,39927,39929,39931,39933,39941,39943,39989,40079,40449,40557,40615,40619,40621,40623,40625,40627,40631,40633,40635,40637,40639,40641,40645,40647,40649,40651,40653,40661,40663,40667,40671,40673,40675,40683,40685,40689,40693,40697,40833,41607,41613,41793,42017,42243,42349,42527,42663,42709,42839,42851,42947,42949,42951,42953,42959,42961,42963,42965,42967,42971,42977,42981,42983,42985,42987,42989,42993,42997,43003,43005,43007,43009,43015,43017,43019,43025,43029,43033,43035,43041,43043,43047,43049,43051,43053,43055,43057,43059,43061,43065,43067,43069,43073,43075,43077,43085,43087,43089,43091,43093,43095,43101,43103,43105,43109,43111,43113,43115,43117,43123,43125,43127,43129,43131,43133,43135,43137,43139,43141,43147,43149,43151,43153,43155,43159,43163,43167,43169,43171,43173,43175,43177,43179,43181,43183,43185,43187,43189,43191,43199,43201,43203,43205,43207,43209,43211,43213,43219,43225,43229,43241,43245,43247,43249,43251,43253,43257,43259,43261,43263,43273,43279,43283,43291,43293,43295,44047,44051,44053,44141,44455,44459,44567,44581,44583,44871,44873,44931,45059,45063,45069,45101,45225,45227,45329,45367,45371,45391,45401,45403,45413,45437,45465,45481,45483,45489,45515,45541,45543,45545,45549,45583,45587,45595,45599,45725,45727,45731,45747,45835,45879,45960,46044,46332,46370,46462,46468,46470,46534,46584,47008,47090,47096,47120,47162,47292,47316,47330,47407,47529,47601,47733,47787,48037,48189,48203,48301,48327,48427,48851,49033,49035,49039,49041,49063,49149,49175,49235,49237,49261,49271,49377,49379,49387,49389,49401,49433,49453,49491,49493,49531,49533,49545,49555,49667,49697,49703,49755,49801,49899,49903,49923,50103,50213,50253,50355,50389,50479,50481,50525,50667,50803,50919,51137,51139,51141,51143,51203,51229,51403,51413,51427,51473,51477,51481,51543,51745,51883,51885,51889,51891,51893,51913,51919,51931,52045,52119,52149,52309,52329,52507,52509,52511,52513,52515,52517,52519,52521,52523,52525,52533,52535,52537,52539,52541,52543,52545,52547,52549,52551,52555,52557,52559,52565,52567,52569,52571,52573,52575,52577,52579,52581,52583,52589,52591,52593,52595,52599,52601,52603,52605,52607,52609,52611,52615,52617,52619,52621,52623,52625,52627,52629,52631,52633,52635,52641,52647,52649,52653,52655,52657,52659,52661,52663,52667,52669,52671,52681,52689,52693,52695,52697,52709,52713,52723,52725,52727,52729,52731,52733,52735,52737,52739,52743,52747,52753,52755,52757,52759,52761,52763,52769,52771,52773,52775,52777,52783,52787,52789,52791,52793,52795,52797,52821,52825,52827,52829,52833,52835,52837,52839,52841,52843,52847,52851,52857,52861,52863,52865,52873,52875,52877,52879,52883,52885,52887,52889,52891,52893,52895,52899,52905,52907,52909,52911,52915,52919,52923,52925,52927,52929,52931,52935,52937,52939,52941,52943,52947,52949,52957,52959,52961,52963,52965,52967,52969,52971,52973,52975,52977,52979,52981,52983,52985,52991,52995,52997,52999,53001,53003,53005,53007,53009,53013,53019,53021,53023,53025,53027,53029,53031,53033,53035,53037,53039,53041,53043,53045,53047,53049,53051,53055,53057,53065,53069,53071,53073,53077,53079,53081,53085,53087,53089,53103,53105,53109,53111,53115,53117,53121,53129,53139,53141,53143,53145,53147,53149,53151,53153,53155,53157,53165,53167,53173,53175,53181,53185,53187,53191,53193,53197,53203,53207,53209,53211,53213,53215,53219,53221,53223,53225,53229,53231,53233,53235,53237,53239,53241,53243,53245,53249,53253,53259,53261,53265,53269,53271,53275,53277,53291,53293,53295,53297,53299,53301,53303,53305,53315,53317,53319,53321,53323,53325,53329,53331,53333,53335,53337,53339,53341,53343,53345,53347,53349,53351,53353,53355,53357,53359,53369,53371,53373,53381,53383,53385,53387,53393,53395,53397,53399,53405,53407,53413,53415,53417,53419,53421,53423,53425,53427,53429,53431,53433,53435,53437,53439,53441,53443,53445,53447,53449,53451,53453,53455,53457,53459,53461,53463,53467,53469,53471,53473,53475,53479,53481,53483,53485,53487,53489,53491,53493,53495,53497,53499,53501,53503,53505,53507,53511,53513,53515,53517,53519,53525,53527,53559,53561,53563,53565,53571,53573,53577,53583,53585,53587,53589,53591,53593,53595,53597,53599,53601,53603,53605,53607,53611,53613,53615,53617,53619,53621,53623,53625,53635,53637,53641,53643,53645,53647,53649,53651,53653,53661,53663,53667,53669,53671,53673,53675,53677,53679,53681,53685,53687,53689,53691,53693,53695,53697,53699,53703,53705,53707,53711,53715,53717,53719,53721,53723,53731,53737,53739,53741,53743,53745,53747,53749,53751,53753,53755,53763,53769,53773,53775,53777,53781,53783,53785,53787,53793,53795,53797,53799,53801,53803,53805,53807,53811,53813,53817,53819,53821,53823,53827,53829,53833,53835,53837,53839,53843,53847,53851,53853,53855,53857,53859,53861,53867,53871,53881,53883,53885,53887,53893,53897,53903,53905,53907,53913,53923,53925,53933,53935,53937,53939,53943,53945,53947,53951,53955,53957,53959,53961,53967,53969,53971,53973,53975,53977,53979,53981,53985,53987,53991,53993,53995,53999,54001,54005,54007,54009,54013,54015,54021,54029,54031,54033,54035,54037,54039,54041,54043,54047,54049,54051,54053,54055,54057,54059,54063,54069,54073,54075,54077,54079,54083,54085,54089,54093,54095,54101,54107,54109,54115,54231,54317,54479,54483,54485,54491,54493,54495,54497,54499,54501,54503,54505,54507,54509,54511,54513,54515,54517,54519,54523,54527,54529,54537,54539,54541,54545,54547,54549,54601,54603,54605,54607,54611,54613,54615,54617,55053,55189,55345,55349,55565,55589,55601,55603,55607,55611,55613,55615,55617,55619,55623,55625,55627,55629,55637,55639,55641,55643,55645,55651,55653,55655,55657,55659,55663,55667,55669,55671,55673,55675,55677,55679,55683,55685,55693,55695,55697,55705,55709,55711,55715,55717,55719,55721,55723,55729,55737,55739,55743,55745,55747,55749,55753,55755,55757,55793,55853,55905,55947,55949,55951,55953,55955,55957,55959,55961,55963,55971,55973,55975,55979,55981,55983,56019,56021,56025,56027,56031,56033,56035,56037,56039,56229,56253,56257,56259,56261,56263,56265,56267,56269,56273,56275,56277,56279,56281,56283,56285,56287,56289,56291,56293,56297,56299,56305,56335,56337,56369,56371,56561,56593,56595,56599,56603,56605,56607,56715,56817,56831,57141,57271,57277,57483,57485,57511,57525,57527,57529,57533,57547,57549,57555,57561,57565,57571,57575,57577,57591,57595,57601,57605,57609,57611,57617,57619,57621,57629,57633,57635,57637,57639,57641,57643,57645,57647,57649,57655,57661,57663,57667,57669,57671,57673,57675,57679,57681,57683,57685,57689,57691,57693,57699,57701,57703,57705,57727,57731,57733,57735,57737,57739,57745,57747,57749,57755,57757,57761,57869,57883,58031,58093,58153,58263,58265,58267,58269,58271,58273,58275,58277,58279,58419,58535,58607,58609,58771,58781,58783,58787,58789,58791,58793,58795,58797,58799,58803,58807,58809,58811,58813,58815,58817,58819,58821,58823,58825,58827,58829,58831,58833,58835,58837,58839,58843,58845,58847,58849,58851,58855,58861,58863,58867,58869,58871,58873,58877,58885,58887,58891,58895,58897,58899,58903,58907,58913,58915,58917,58919,58925,58927,58929,58931,58933,58935,58937,58939,58941,58945,58947,58949,58951,58953,58955,58957,58959,58963,58965,58967,58969,58973,58975,58977,58981,58983,58987,58989,58991,58993,58995,58997,58999,59001,59003,59005,59007,59009,59011,59013,59039,59041,59063,59079,59413,59415,59417,59419,59421,59425,59427,59429,59431,59433,59437,59441,59443,59445,59449,59451,59453,59455,59457,59459,59461,59463,59465,59467,59473,59475,59477,59485,59487,59491,59493,59495,59497,59499,59621,59623,59635,59639,59703,59715,59793,59811,59813,59815,59817,59819,59821,59823,59825,59827,59831,59833,59837,59839,59843,59845,59903,59921,59923,59925,59933,59935,59937,59939,59941,59943,59945,59949,59953,59959,60019,60031,60037,60039,60043,60047,60063,60125,60135,60137,60139,60143,60147,60149,60151,60153,60155,60157,60159,60227,60235,60237,60239,60241,60243,60245,60249,60253,60257,60261,60291,60309,60311,60313,60315,60317,60319,60321,60323,60325,60327,60329,60331,60333,60335,60337,60339,60343,60429,60431,60433,60439,60443,60447,60451,60455,60459,60463,60521,60523,60525,60527,60529,60531,60533,60535,60537,60539,60541,60543,60545,60547,60549,60551,60555,60601,60629,60631,60639,60641,60643,60645,60647,60649,60653,60659,60663,60733,60735,60737,60739,60741,60745,60747,60749,60751,60753,60755,60757,60759,60761,60763,60765,60767,60769,60835,60837,60839,60841,60843,60845,60847,60849,60851,60853,60857,60861,60865,60867,60871,60935,60937,60939,60941,60943,60945,60947,60949,60951,60953,60955,60957,60959,60961,60963,60965,60995,61001,61011,61015,61029,61031,61035,61037,61039,61041,61043,61049,61083,61105,61115,61125,61127,61131,61135,61141,61161,61167,61197,61203,61219,61249,61253,61257,61275,61277,61279,61281,61283,61303,61305,61331,61333,61351,61353,61355,61359,61375,61377,61393,61395,61417,61419,61423,61437,61439,61455,61457,61459,61479,61487,61491,61505,61509,61511,61519,61525,61527,61545,61547,61555,61559,61565,61567,61569,61575,61591,61593,61595,61617,61619,61631,61633,61645,61647,61657,61663,61669,61671,61675,61681,61687,61699,61701,61709,61719,61721,61739,61741,61763,61765,61779,61781,61787,61789,61797,61807,61837,61839,61843,61845,61857,61859,61865,61867,61891,61921,61923,61935,61937,61947,61949,61953,61955,61961,61989,62003,62005,62015,62029,62031,62041,62045,62047,62055,62057,62063,62065,62075,62079,62087,62089,62091,62093,62097,62099,62101,62107,62109,62111,62113,62115,62117,62119,62123,62125,62127,62129,62131,62137,62143,62145,62147,62149,62151,62153,62155,62157,62159,62161,62163,62165,62167,62171,62173,62177,62179,62181,62191,62193,62195,62197,62199,62203,62205,62207,62209,62211,62213,62215,62221,62223,62225,62227,62229,62245,62247,62249,62253,62255,62267,62269,62277,62285,62287,62289,62301,62303,62311,62313,62315,62317,62319,62323,62333,62339,62343,62345,62349,62351,62353,62355,62357,62359,62361,62363,62365,62367,62369,62371,62373,62379,62383,62389,62391,62395,62397,62403,62407,62413,62415,62421,62423,62425,62431,62433,62435,62439,62441,62443,62445,62447,62449,62451,62453,62461,62463,62465,62489,62491,62513,62515,62521,62523,62529,62553,62555,62563,62565,62575,62577,62579,62581,62583,62585,62587,62589,62591,62593,62595,62601,62603,62607,62611,62619,62623,62637,62647,62649,62651,62653,62655,62657,62659,62667,62679,62683,62697,62703,62707,62711,62719,62725,62733,62743,62747,62757,62779,62787,62791,62811,62835,62837,62843,62865,62883,62895,62907,62909,62911,62913,62915,62919,62921,62933,62939,62971,62979,62987,62997,62999,63007,63009,63011,63013,63025,63031,63045,63053,63055,63057,63059,63061,63063,63065,63067,63069,63071,63073,63075,63077,63079,63081,63083,63087,63089,63093,63095,63097,63099,63109,63121,63125,63127,63133,63141,63143,63145,63147,63149,63151,63165,63173,63181,63193,63203,63205,63207,63211,63213,63215,63217,63219,63221,63223,63225,63227,63229,63245,63269,63273,63285,63287,63289,63291,63293,63297,63307,63309,63315,63317,63319,63331,63341,63343,63347,63349,63351,63355,63361,63363,63369,63371,63375,63377,63379,63381,63383,63387,63389,63391,63393,63395,63397,63399,63401,63403,63407,63409,63411,63413,63417,63419,63421,63425,63427,63431,63435,63451,63465,63473,63483,63489,63493,63513,63517,63529,63539,63541,63549,63561,63565,63583,63599,63607,63621,63623,63633,63641,63647,63649,63651,63657,63665,63685,63689,63701,63709,63733,63741,63751,63759,63761,63767,63797,63805,63809,63811,63813,63815,63817,63819,63821,63823,63825,63833,63855,63865,63875,63879,63881,63915,63917,63945,63951,63959,63963,63965,63967,63969,63971,63973,63975,63977,63979,63981,63985,63987,63993,63997,63999,64001,64015,64021,64027,64031,64033,64053,64067,64069,64091,64095,64099,64105,64117,64127,64151,64161,64171,64175,64201,64205,64213,64219,64233,64237,64281,64283,64285,64287,64289,64291,64293,64295,64297,64299,64303,64305,64307,64319,64323,64329,64343,64357,64361,64363,64365,64367,64369,64371,64373,64375,64377,64379,64381,64395,64399,64405,64415,64429,64441,64443,64449,64451,64453,64457,64469,64485,64497,64499,64503,64505,64513,64515,64529,64541,64555,64559,64571,64575,64579,64581,64583,64595,64611,64631,64647,64659,64661,64663,64665,64667,64669,64689,64691,64703,64709,64721,64745,64761,64769,64783,64803,64813,64819,64831,64845,64893,64905,64911,64933,64947,64951,64959,64977,65009,65017,65023,65035,65047,65061,65081,65093,65103,65111,65117,65139,65157,65165,65171,65183,65215,65229,65233,65247,65259,65265,65287,65289,65305,65313,65323,65341,65343,65345,65347,65349,65351,65353,65355,65357,65359,65361,65363,65365,65369,65371,65373,65375,65377,65379,65381,65383,65385,65389,65391,65393,65401,65403,65405,65407,65409,65411,65413,65415,65417,65419,65421,65423,65425,65429,65433,65435,65441,65445,65449,65451,65453,65455,65457,65461,65463,65467,65483,65503,65513,65515,65517,65523,65533,65547,65553,65559,65565,65581,65585,65589,65599,65605,65625,65635,65675,65681,65691,65699,65701,65715,65731,65735,65741,65763,65765,65767,65769,65781,65785,65793,65801,65809,65815,65843,65853,65861,65873,65877,65891,65893,65897,65913,65925,65955,65971,65981,65983,66015,66021,66037,66041,66043,66045,66053,66063,66069,66071,66073,66075,66077,66081,66083,66117,66123,66131,66137,66205,66215,66221,66227,66229,66231,66233,66237,66239,66249,66259,66269,66273,66285,66303,66305,66313,66319,66323,66359,66371,66393,66395,66405,66435,66439,66453,66457,66459,66463,66469,66487,66493,66499,66503,66505,66511,66519,66521,66527,66531,66535,66541,66551,66555,66583,66587,66597,66599,66601,66607,66611,66615,66649,66657,66661,66663,66667,66669,66677,66679,66713,66715,66725,66727,66729,66731,66735,66747,66749,66771,66773,66799,66815,66823,66829,66853,66859,66863,66865,66873,66875,66877,66881,66885,66891,66901,66919,66927,66929,66931,66933,66935,66937,66939,66945,66957,66975,66979,66985,66987,66989,66991,66999,67001,67005,67009,67047,67065,67075,67077,67087,67095,67097,67103,67107,67127,67133,67135,67141,67143,67155,67157,67159,67161,67173,67181,67183,67185,67197,67203,67205,67207,67209,67217,67231,67233,67241,67243,67249,67251,67263,67265,67269,67271,67273,67277,67279,67283,67287,67289,67293,67295,67299,67303,67309,67333,67363,67365,67369,67381,67383,67413,67415,67425,67427,67429,67431,67469,67471,67473,67475,67477,67493,67501,67503,67505,67507,67509,67515,67553,67555,67557,67559,67561,67563,67565,67593,67595,67627,67629,67631,67633,67635,67637,67639,67641,67643,67653,67655,67659,67661,67663,67665,67669,67671,67677,67679,67681,67685,67691,67711,67713,67721,67725,67727,67737,67741,67743,67749,67751,67753,67775,67785,67787,67789,67791,67793,67795,67805,67807,67853,67855,67857,67859,67861,67863,67865,67867,67869,67871,67873,67885,67887,67889,67897,67899,67913,67915,67917,67919,67921,67923,67931,67939,67947,67949,67981,67983,67987,67991,68007,68009,68043,68049,68057,68059,68063,68065,68067,68075,68077,68081,68085,68087,68105,68109,68117,68123,68125,68129,68131,68149,68151,68153,68155,68157,68159,68161,68163,68165,68173,68175,68201,68203,68211,68241,68249,68251,68277,68307,68309,68311,68313,68315,68317,68319,68321,68323,68325,68327,68329,68341,68343,68375,68407,68409,68411,68413,68415,68417,68433,68435,68465,68467,68473,68475,68483,68485,68487,68489,68491,68493,68495,68497,68499,68505,68517,68523,68527,68547,68575,68579,68583,68589,68605,68607,68613,68617,68621,68637,68641,68649,68695,68697,68703,68705,68711,68715,68719,68729,68731,68747,68761,68767,68771,68773,68789,68795,68797,68817,68833,68835,68845,68859,68861,68865,68867,68873,68875,68889,68891,68893,68917,68923,68925,68945,68949,68951,68953,68959,68963,68999,69001,69005,69009,69019,69049,69053,69055,69061,69063,69065,69091,69095,69103,69105,69111,69123,69127,69157,69163,69165,69201,69207,69209,69219,69225,69229,69265,69267,69269,69273,69277,69281,69285,69303,69305,69307,69309,69313,69325,69341,69343,69345,69361,69363,69367,69393,69403,69409,69419,69439,69447,69457,69467,69483,69485,69495,69499,69507,69511,69513,69527,69531,69539,69551,69557,69559,69569,69573,69575,69577,69579,69581,69583,69585,69587,69591,69593,69599,69607,69611,69615,69621,69627,69631,69633,69637,69641,69643,69645,69647,69649,69657,69661,69663,69665,69667,69669,69673,69675,69677,69679,69681,69683,69685,69687,69689,69691,69693,69697,69699,69701,69703,69705,69707,69709,69711,69715,69717,69719,69721,69725,69733,69739,69743,69757,69759,69767,69775,69779,69787,69789,69799,69801,69807,69809,69835,69839,69843,69847,69863,69865,69867,69873,69875,69877,69891,69899,69909,69915,69919,69923,69925,69927,69939,69943,69955,69971,69977,69981,69989,70005,70007,70009,70015,70017,70021,70023,70027,70031,70039,70047,70049,70051,70073,70079,70083,70091,70095,70127,70133,70139,70141,70143,70149,70151,70153,70159,70167,70181,70201,70203,70213,70221,70225,70227,70229,70231,70233,70235,70237,70239,70263,70265,70267,70275,70277,70285,70287,70291,70293,70297,70319,70337,70343,70347,70353,70371,70413,70421,70431,70439,70441,70443,70467,70479,70491,70501,70503,70505,70507,70509,70517,70533,70535,70551,70563,70569,70575,70577,70579,70585,70607,70615,70623,70635,70659,70683,70685,70689,70697,70707,70709,70721,70737,70743,70745,70747,70749,70777,70779,70781,70803,70825,70831,70835,70837,70839,70841,70843,70845,70847,70849,70851,70853,70855,70857,70859,70861,70863,70865,70867,70869,70871,70873,70877,70901,70903,70907,70913,70915,70917,70925,70929,70931,70943,70959,70961,70963,70977,70991,71005,71007,71009,71021,71023,71027,71047,71053,71059,71063,71067,71075,71079,71099,71101,71115,71117,71135,71139,71143,71171,71173,71175,71181,71217,71233,71237,71243,71245,71247,71249,71251,71255,71257,71261,71263,71265,71279,71285,71305,71315,71327,71361,71385,71389,71391,71393,71395,71397,71399,71401,71403,71405,71407,71409,71411,71413,71415,71417,71419,71421,71423,71425,71427,71437,71449,71451,71453,71467,71479,71481,71493,71507,71519,71533,71543,71551,71555,71561,71563,71569,71571,71573,71581,71585,71599,71601,71619,71637,71679,71745,71749,71765,71769,71805,71809,71843,71845,71867,71869,71873,71875,71879,71883,71887,71893,71895,71897,71899,71901,71921,71923,71925,71927,71943,71947,71951,71953,71955,71959,71975,71977,71979,72063,72065,72159,72161,72169,72171,72173,72175,72177,72179,72181,72183,72311,72313,72325,72327,72329,72331,72333,72335,72377,72379,72381,72383,72385,72387,72389,72391,72395,72397,72399,72401,72403,72407,72409,72411,72413,72415,72417,72419,72425,72473,72475,72477,72479,72481,72483,72485,72487,72489,72491,72493,72529,72531,72571,72629,72655,72657,72659,72661,72663,72665,72667,72669,72671,72673,72675,72677,72679,72681,72683,72685,72691,72693,72695,72697,72699,72703,72705,72709,72739,72741,72743,72745,72747,72749,72751,72753,72755,72757,72759,72761,72857,72859,72903,72905,72907,72915,72917,72919,72921,72923,72925,72927,72929,72931,72933,72935,73061,73063,73065,73067,73069,73071,73073,73075,73077,73079,73081,73231,73233,73235,73237,73241,73243,73245,73247,73249,73251,73253,73255,73257,73263,73317,73319,73321,73323,73325,73327,73329,73331,73333,73335,73337,73407,73409,73413,73415,73469,73471,73473,73475,73477,73479,73481,73483,73485,73487,73489,73539,73649,73651,73653,73655,73657,73659,73661,73663,73665,73667,73669,73797,73799,73801,73803,73805,73807,73809,73811,73813,73815,73817,73955,73957,73959,73961,73965,73967,73969,73971,73973,74019,74095,74097,74099,74101,74103,74105,74107,74109,74111,74113,74115,74187,74189,74191,74193,74201,74203,74205,74207,74209,74211,74213,74215,74217,74219,74223,74225,74227,74229,74233,74235,74239,74241,74243,74245,74247,74249,74253,74255,74257,74275,74277,74291,74305,74307,74315,74317,74319,74327,74329,74353,74355,74367,74369,74381,74383,74387,74417,74427,74429,74443,74445,74455,74515,74517,74521,74523,74527,74533,74539,74541,74547,74559,74561,74571,74583,74585,74589,74591,74599,74601,74627,74629,74635,74637,74641,74643,74659,74661,74663,74665,74667,74669,74671,74673,74675,74677,74679,74683,74685,74687,74689,74691,74715,74717,74725,74727,74757,74771,74773,74775,74777,74779,74805,74807,74815,74817,74829,74831,74835,74837,74839,74911,74913,74941,74943,74949,74951,74961,74963,74967,74975,74977,74983,74985,74999,75001,75059,75063,75071,75073,75085,75089,75091,75093,75095,75107,75109,75131,75133,75151,75153,75155,75163,75165,75213,75215,75223,75225,75231,75233,75245,75247,75249,75251,75253,75257,75259,75261,75263,75267,75269,75279,75303,75305,75315,75317,75321,75323,75325,75327,75337,75339,75367,75369,75375,75377,75399,75401,75403,75405,75407,75409,75411,75419,75421,75453,75455,75465,75467,75481,75483,75501,75503,75521,75525,75535,75537,75545,75547,75593,75595,75617,75631,75633,75635,75651,75653,75661,75663,75673,75675,75691,75693,75705,75707,75725,75735,75737,75743,75745,75759,75761,75779,75781,75785,75787,75801,75803,75811,75813,75815,75831,75833,75835,75841,75847,75849,75851,75855,75857,75865,75867,75885,75887,75919,75921,75951,75953,75963,75965,75977,76027,76051,76053,76071,76073,76077,76089,76091,76151,76153,76161,76163,76237,76239,76289,76291,76309,76311,76347,76349,76355,76357,76363,76365,76387,76389,76391,76393,76399,76401,76417,76419,76425,76427,76439,76441,76443,76445,76447,76449,76453,76457,76463,76467,76469,76471,76475,76477,76479,76483,76487,76489,76491,76493,76495,76497,76499,76501,76503,76511,76513,76531,76533,76541,76543,76555,76557,76579,76581,76599,76601,76605,76607,76623,76625,76629,76631,76645,76647,76649,76651,76653,76655,76657,76669,76671,76685,76687,76695,76697,76723,76725,76737,76739,76743,76745,76749,76751,76755,76757,76777,76779,76781,76783,76789,76795,76827,76837,76841,76849,76853,76861,76863,76895,76897,76901,76903,76905,76907,76909,76911,76915,76917,76919,76921,76925,76935,76937,76945,76947,76949,76951,76961,76963,76983,76985,76991,76995,77005,77007,77015,77017,77021,77035,77037,77055,77063,77071,77085,77087,77097,77101,77103,77107,77115,77117,77125,77127,77131,77133,77159,77161,77169,77171,77181,77183,77185,77187,77189,77191,77193,77195,77197,77199,77201,77203,77205,77207,77295,77297,77299,77305,77309,77311,77313,77319,77323,77325,77327,77329,77331,77333,77335,77337,77339,77341,77347,77349,77351,77353,77355,77381,77385,77387,77389,77391,77393,77395,77397,77399,77401,77403,77405,77411,77415,77437,77443,77445,77449,77451,77499,77507,77509,77553,77591,77677,77703,77705,77707,77709,77713,77715,77717,77719,77721,77723,77729,77731,77733,77735,77737,77739,77741,77743,77745,77747,77749,77751,77757,77759,77761,77763,77909,77911,77913,77915,77917,77919,77921,77923,77927,77929,77945,78019,78077,78079,78081,78083,78085,78087,78089,78091,78093,78095,78141,78157,78159,78185,78189,78193,78263,78267,78287,78317,78325,78327,78331,78385,78389,78397,78399,78403,78405,78407,78411,78413,78415,78417,78419,78421,78423,78425,78427,78431,78437,78439,78441,78443,78445,78449,78451,78455,78459,78463,78483,78487,78489,78491,78493,78495,78549,78553,78555,78559,78561,78563,78565,78567,78569,78571,78593,78595,78597,78603,78605,78657,78661,78663,78665,78667,78705,78707,78709,78711,78713,78715,78787,78801,78817,78819,78825,78827,78829,78833,78835,78837,78879,78939,78941,78945,78947,78949,78953,78989,78991,78993,78995,78997,79155,79247,79249,79251,79253,79255,79257,79259,79265,79271,79273,79275,79277,79279,79281,79283,79285,79287,79289,79291,79293,79295,79297,79299,79301,79303,79307,79309,79313,79315,79317,79319,79321,79323,79325,79331,79335,79337,79341,79343,79345,79347,79349,79351,79353,79363,79365,79367,79369,79371,79399,79435,79445,79447,79449,79461,79463,79465,79469,79487,79491,79599,79695,79697,79699,79701,79703,79729,79735,79737,79739,79741,79743,79747,79751,79753,79761,79763,79839,79841,79845,79853,79855,79857,79859,79861,79863,79865,79889,79953,79955,79957,79959,80009,80011,80013,80015,80081,80083,80085,80087,80231,80271,80275,80277,80303,80305,80307,80311,80313,80317,80319,80321,80323,80325,80327,80337,80339,80341,80343,80345,80347,80349,80351,80403,80407,80461,80463,80465,80467,80505,80507,80509,80511,80593,80595,80599,80601,80605,80607,80609,80613,80615,80617,80619,80621,80623,80629,80631,80633,80635,80637,80639,80641,80647,80653,80659,80661,80663,80665,80693,80695,80697,80701,80739,80743,80745,80749,80751,80773,80817,80917,81021,81025,81031,81033,81035,81037,81039,81041,81053,81055,81057,81059,81061,81063,81097,81107,81137,81139,81141,81143,81159,81267,81269,81271,81309,81311,81313,81335,81337,81339,81365,81461,81521,81523,81525,81527,81567,81629,81631,81739,81757,81759,81761,81763,81765,81793,81795,81807,81811,81817,81823,81827,81829,81831,81835,81839,81841,81843,81849,81851,81855,81859,81861,81863,81865,81867,81869,81871,81873,81875,81879,81881,81883,81889,81891,81899,81901,81903,81907,81937,82019,82027,82033,82097,82189,82217,82219,82221,82223,82319,82321,82327,82385,82387,82389,82391,82393,82395,82415,82417,82419,82421,82423,82425,82455,82457,82459,82461,82463,82519,82521,82523,82525,82527,82529,82531,82549,82551,82553,82555,82557,82559,82561,82563,82565,82569,82599,82601,82603,82605,82607,82609,82633,82635,82637,82639,82641,82643,82651,82665,82667,82669,82675,82677,82679,82681,82685,82703,82705,82707,82709,82723,82725,82727,82763,82765,82767,82813,82823,82825,82827,82829,82831,82875,82877,82889,82899,82903,82929,82931,82933,82935,82937,82979,82981,83007,83009,83011,83013,83017,83073,83075,83077,83109,83111,83113,83157,83159,83161,83163,83165,83195,83199,83201,83215,83233,83235,83303,83305,83307,83309,83311,83313,83315,83317,83319,83355,83357,83359,83361,83463,83549,83555,83589,83591,83593,83595,83597,83599,83601,83697,83701,83703,83705,83707,83709,83711,83713,83715,83797,83929,83931,83937,83939,83941,83943,83945,83951,83953,83955,83963,83965,83967,83969,83973,83975,83977,83979,83981,83983,83985,83987,83989,83995,83997,83999,84007,84011,84013,84017,84019,84023,84025,84027,84029,84031,84033,84035,84037,84039,84041,84043,84045,84047,84049,84051,84053,84055,84057,84063,84065,84071,84077,84081,84083,84085,84087,84089,84091,84093,84097,84101,84107,84109,84111,84113,84115,84117,84121,84127,84129,84131,84135,84139,84141,84143,84145,84147,84149,84155,84159,84161,84163,84169,84171,84175,84177,84181,84183,84185,84187,84189,84191,84193,84195,84197,84199,84201,84203,84207,84209,84211,84215,84217,84219,84221,84237,84241,84243,84245,84247,84249,84251,84253,84269,84271,84273,84275,84277,84285,84287,84289,84291,84293,84295,84297,84299,84303,84305,84307,84353,84357,84359,84361,84363,84365,84367,84369,84371,84375,84377,84379,84381,84385,84387,84401,84403,84405,84453,84455,84457,84509,84511,84575,84579,84581,84583,84585,84587,84589,84591,84593,84611,84695,84721,84781,84843,84871,84903,84905,84907,84957,84959,84963,84965,85021,85023,85025,85053,85065,85087,85089,85093,85097,85099,85101,85103,85107,85109,85111,85115,85117,85129,85137,85139,85157,85167,85273,85275,85285,85287,85291,85293,85331,85333,85335,85337,85433,85441,85445,85447,85543,85557,85559,85625,85627,85635,85747,85751,85753,85755,85787,85803,85805,85806,85807,85808,85809,85826,85841,85843,85844,85845,85846,85847,85871,85895,85945,85946,85947,85948,85949,85950,85952,85953,85954,85955,85957,85958,85960,86064,86065,86066,86067,86068,86069,86070,86071,86072,86077,86078,86097,86130,86131,86132,86133,86134,86189,86221,86222,86309,86345,86398,86407,86424,86427,86428,86429,86430,86431,86432,86433,86435,86436,86438,86439,86440,86441,86442,86444,86445,86446,86448,86449,86451,86453,86454,86455,86456,86457,86458,86460,86461,86462,86463,86464,86466,86467,86468,86469,86470,86472,86473,86474,86475,86476,86477,86478,86479,86480,86481,86482,86483,86486,86487,86489,86490,86492,86493,86495,86496,86497,86498,86499,86500,86501,86502,86505,86506,86507,86508,86509,86510,86511,86512,86513,86514,86515,86516,86517,86518,86519,86520,86521,86522,86523,86524,86525,86526,86527,86528,86529,86530,86532,86533,86534,86535,86537,86538,86539,86540,86541,86542,86544,86545,86546,86548,86550,86551,86552,86554,86556,86557,86558,86559,86575,86577,86618,86619,86620,86621,86623,86624,86625,86626,86627,86634,86660,86662,86663,86664,86685,86686,86687,86739,86740,86741,86743,86745,86747,86816,86818,86819,86820,86821,86822,86823,86824,86825,86826,86827,86828,86829,86832,86833,86834,86836,86837,86842,86865,86866,86903,86904,86905,86906,86907,86908,86909,86911,86912,86914,86916,86917,86918,86956,86988,86989,86997,87040,87075,87089,87090,87091,87092,87094,87103,87108,87214,87311,87312,87313,87314,87315,87316,87318,87319,87320,87322,87323,87324,87328,87329,87330,87331,87332,87335,87336,87337,87338,87339,87341,87343,87346,87347,87348,87349,87350,87352,87353,87372,87373,87400,87401,87402,87423,87425,87426,87427,87428,87429,87537,87538,87539,87572,87573,87574,87576,87594,87595,87596,87619,87643,87667,87668,87709,87710,87711,87732,87733,87734,87735,87838,87840,87841,87842,87843,87847,87848,87850,87851,87853,87854,87855,87856,87857,87860,87861,87863,87865,87867,87869,87870,87871,87872,87873,87874,87875,87876,87877,87878,87879,87880,87881,87883,87884,87885,87886,87887,87888,87889,87892,87894,87927,87928,87963,87976,88020,88021,88022,88043,88068,88155,88163,88165,88169,88170,88172,88174,88175,88176,88177,88178,88179,88180,88181,88182,88183,88184,88185,88186,88187,88188,88189,88190,88191,88192,88193,88194,88196,88197,88199,88200,88201,88202,88203,88204,88205,88206,88207,88208,88210,88211,88212,88215,88216,88217,88218,88219,88220,88221,88222,88223,88224,88225,88226,88227,88240,88260,88265,88267,88272,88276,88279,88292,88307,88308,88316,88324,88325,88371,88372,88373,88374,88375,88376,88401,88402,88403,88418,88422,88423,88434,88496,88497,88498,88499,88512,88531,88606,88607,88608,88609,88610,88653,88654,88655,88683,88684,88685,88725,88726,88727,88796,88797,88798,88799,88800,88803,88804,88805,88807,88808,88809,88810,88811,88812,88813,88814,88815,88816,88817,88820,88821,88822,88823,88824,88825,88826,88827,88829,88830,88831,88832,88833,88834,88835,88836,88837,88838,88839,88840,88841,88842,88843,88844,88845,88846,88847,88852,88853,88854,88876,88877,88911,88918,88919,88920,88921,88951,88952,88953,89058,89060,89105,89106,89107,89108,89109,89111,89112,89113,89115,89117,89119,89120,89121,89122,89123,89124,89125,89126,89127,89156,89186,89187,89212,89214,89215,89223,89224,89225,89226,89227,89286,89288,89289,89297,89300,89301,89304,89306,89307,89308,89309,89310,89311,89312,89314,89316,89326,89327,89328,89335,89342,89421,89438,89451,89458,89477,89478,89479,89480,89504,89508,89509,89510,89511,89512,89515,89516,89517,89518,89519,89521,89522,89524,89525,89526,89530,89534,89537,89548,89549,89550,89555,89556,89561,89564,89566,89567,89572,89573,89574,89575,89611,89612,89613,89614,89615,89616,89617,89618,89620,89622,89623,89624,89625,89626,89627,89628,89629,89630,89631,89632,89633,89634,89636,89637,89639,89640,89641,89646,89647,89649,89652,89655,89656,89657,89658,89659,89660,89662,89663,89664,89665,89666,89667,89668,89682,89690,89692,89695,89697,89699,89725,89727,89728,89778,89800,89801,89802,89803,89804,89828,89835,89836,89837,89863,89874,89875,89876,89877,89878,89879,89880,89889,89890,89891,89932,89933,90033,90040,90041,90075,90082,90305,90345,90346,90430,90433,90440,90458,90459,90460,90461,90464,90471,90484,90485,90488,90489,90490,90492,90508,90521,90522,90551,90588,90589,90590,90612,90682,90707,90708,90709,90731,90809,90812,90813,90829,90830,90921,90946,90951,90982,91001,91039,91043,91044,91046,91056,91097,91164,91192,91193,91195,91213,91214,91215,91216,91217,91218,91219,91220,91221,91222,91223,91224,91226,91227,91228,91229,91231,91232,91234,91235,91236,91237,91242,91243,91244,91246,91247,91249,91251,91252,91254,91255,91256,91257,91258,91259,91260,91261,91262,91263,91265,91266,91267,91268,91272,91273,91276,91277,91278,91279,91281,91282,91283,91284,91285,91292,91293,91294,91295,91297,91298,91299,91300,91301,91302,91303,91305,91306,91307,91308,91309,91311,91312,91313,91314,91317,91318,91319,91320,91321,91322,91323,91324,91326,91327,91328,91329,91330,91332,91333,91334,91335,91336,91337,91338,91339,91340,91341,91342,91343,91344,91345,91346,91348,91349,91350,91352,91353,91354,91355,91356,91357,91358,91359,91360,91361,91362,91363,91364,91365,91366,91367,91368,91369,91370,91371,91372,91373,91374,91375,91376,91377,91378,91379,91380,91381,91382,91383,91385,91389,91390,91392,91393,91395,91396,91397,91398,91399,91400,91401,91402,91404,91405,91406,91408,91409,91410,91411,91412,91413,91414,91416,91418,91419,91420,91421,91423,91424,91425,91426,91427,91453,91462,91464,91466,91467,91474,91475,91488,91489,91490,91491,91493,91494,91495,91496,91500,91507,91520,91527,91528,91529,91530,91533,91557,91560,91564,91592,91593,91594,91596,91602,91603,91604,91605,91606,91607,91608,91621,91626,91627,91628,91630,91631,91632,91633,91635,91636,91637,91646,91649,91650,91658,91659,91660,91661,91664,91682,91684,91685,91686,91687,91689,91690,91691,91692,91693,91694,91698,91700,91715,91716,91717,91718,91719,91741,91742,91743,91760,91762,91773,91774,91813,91814,91815,91837,91839,91840,91855,91858,91859,91860,91865,91883,91912,91921,91960,91988,91990,91991,91992,91994,91995,91998,91999,92e3,92001,92002,92003,92004,92005,92007,92034,92036,92057,92058,92059,92060,92061,92066,92077,92080,92081,92082,92084,92096,92100,92132,92150,92151,92154,92161,92165,92169,92174,92176,92177,92197,92198,92199,92200,92201,92204,92205,92207,92218,92220,92225,92228,92284,92315,92488,92502,92510,92511,92514,92515,92578,92633,92641,92691,92698,92711,92714,92715,92719,92722,92768,92864,92865,92866,92916,92918,92919,92941,92986,92987,93066,93067,93068,93111,93154,93155,93167,93188,93206,93246,93248,93249,93250,93319,93320,93321,93330,93337,93338,93339,93341,93343,93344,93345,93369,93370,93371,93373,93382,93383,93410,93429,93505,93607,93635,93646,93652,93654,93655,93661,93663,93665,93687,93749,93750,93760,93768,93771,93778,93779,93780,93795,93855,93865,93866,93867,93868,93870,93955,93970,93983,93985,93990,93996,94e3,94001,94003,94042,94046,94053,94054,94056,94057,94087,94098,94102,94103,94106,94125,94135,94136,94138,94161,94195,94216,94217,94218,94219,94241,94242,94243,94244,94245,94255,94257,94258,94263,94304,94381,94387,94388,94408,94459,94551,94574,94627,94628,94629,94634,94639,94656,94686,94687,94709,94712,94713,94734,94735,94776,94777,94804,94805,94807,94809,94810,94817,94820,94821,94841,94842,94843,94852,94853,94895,94897,94899,94900,94901,94902,94903,94926,94937,94974,94991,94992,94993,95013,95014,95017,95025,95027,95028,95030,95034,95050,95052,95056,95078,95113,95115,95126,95128,95150,95151,95152,95153,95154,95155,95156,95157,95158,95159,95161,95162,95163,95164,95190,95191,95192,95194,95231,95232,95233,95234,95235,95275,95276,95299,95300,95301,95305,95351,95365,95366,95425,95429,95438,95457,95488,95515,95599,95644,95645,95646,95647,95648,95650,95662,95663,95664,95665,95675,95680,95681,95688,95690,95691,95692,95729,95731,95733,95734,95741,95743,95759,95760,95768,95769,95770,95783,95788,95789,95790,95791,95792,95829,95852,95854,95867,95868,95869,95870,95879,95886,95929,95930,95943,95944,95988,95990,95992,95993,95994,96005,96006,96008,96009,96027,96028,96029,96052,96053,96056,96065,96081,96082,96083,96129,96152,96156,96164,96168,96181,96182,96201,96222,96223,96224,96225,96231,96232,96242,96253,96269,96270,96271,96272,96294,96298,96314,96341,96349,96378,96379,96380,96397,96433,96442,96443,96444,96445,96446,96450,96471,96472,96478,96523,96527,96552,96555,96556,96579,96593,96594,96596,96611,96614,96625,96638,96658,96662,96663,96664,96665,96667,96669,96698,96699,96700,96701,96702,96704,96705,96706,96709,96710,96713,96796,96797,96798,96814,96815,96816,96817,96834,96848,96849,96851,96867,96869,96917,96921,96933,96943,96946,96964,96965,96966,96967,96982,96983,96986,96987,96993,96994,96997,96998,96999,97e3,97016,97018,97065,97066,97067,97081,97104,97118,97120,97121,97122,97126,97138,97139,97140,97141,97142,97143,97151,97153,97154,97164,97168,97169,97188,97189,97190,97191,97192,97193,97194,97195,97198,97199,97224,97236,97237,97238,97239,97240,97241,97242,97263,97265,97272,97276,97277,97279,97284,97287,97288,97289,97290,97298,97306,97310,97315,97322,97326,97332,97345,97399,97400,97401,97407,97409,97410,97412,97418,97423,97424,97425,97433,97436,97439,97456,97459,97512,97517,97527,97528,97529,97544,97545,97546,97547,97549,97550,97551,97552,97553,97570,97582,97583,97584,97586,97589,97594,97595,97596,97606,97610,97611,97614,97617,97626,97639,97640,97641,97642,97652,97655,97657,97661,97662,97666,97667,97669,97679,97680,97702,97703,97704,97707,97708,97709,97710,97725,97740,97741,97742,97743,97745,97747,97750,97751,97753,97755,97759,97774,97776,97778,97782,97783,97793,97797,97801,97802,97803,97807,97828,97829,97830,97831,97832,97833,97834,97835,97836,97845,97856,97859,97864,97865,97867,97868,97891,97896,97897,97898,97904,97905,97907,97953,97954,97955,97958,97959,97960,97975,97981,97983,97984,97999,98003,98006,98008,98025,98030,98033,98069,98075,98076,98110,98111,98121,98128,98136,98137,98138,98139,98161,98162,98178,98180,98181,98221,98222,98227,98228,98229,98230,98243,98259,98260,98261,98263,98298,98299,98321,98391,98394,98406,98421,98431,98435,98441,98447,98470,98472,98473,98474,98482,98483,98487,98512,98523,98537,98581,98589,98623,98635,98647,98689,98705,98706,98710,98761,98793,98795,98801,98802,98816,98817,98818,98819,98839,98857,98866,98867,98868,98869,98870,98871,98872,98873,98874,98875,98906,98907,98917,98936,98945,98950,98955,98956,98957,98958,98959,98962,98985,98992,99023,99024,99025,99026,99030,99068,99069,99070,99091,99128,99138,99165,99172,99186,99203,99215,99222,99223,99225,99226,99227,99228,99229,99230,99231,99236,99300,99301,99302,99324,99325,99326,99327,99330,99337,99338,99339,99368,99370,99371,99382,99405,99413,99432,99454,99482,99483,99484,99490,99491,99493,99494,99495,99496,99497,99499,99500,99501,99502,99503,99504,99505,99506,99507,99508,99509,99511,99512,99514,99515,99516,99526,99550,99551,99553,99616,99617,99645,99679,99694,99712,99716,99717,99719,99720,99726,99728,99735,99741,99743,99744,99802,99803,99814,99817,99830,99848,99849,99865,99867,99869,99870,99872,99875,99876,99877,99878,99879,99880,99903,99909,99917,99926,99946,99971,100004,100034,100065,100066,100067,100068,100080,100081,100082,100087,100098,100135,100174,100242,100243,100252,100253,100269,100278,100291,100298,100303,100304,100320,100324,100341,100343,100364,100365,100376,100378,100380,100398,100399,100401,100402,100403,100413,100427,100454,100456,100457,100460,100461,100486,100497,100499,100511,100523,100524,100526,100527,100529,100530,100531,100532,100533,100544,100545,100548,100549,100571,100572,100573,100574,100575,100576,100577,100578,100644,100645,100646,100647,100648,100649,100650,100651,100656,100657,100681,100682,100683,100684,100685,100686,100687,100688,100689,100714,100715,100819,100820,100821,100891,100901,100903,100904,100911,100912,100913,100914,100915,100916,100926,101012,101029,101044,101100,101159,101160,101161,101162,101209,101210,101211,101212,101345,101346,101387,101388,101389,101390,101416,101488,101489,101523,101534,101535,101595,101612,101623,101631,101773,101774,101775,101776,101853,101857,101914,101915,101916,101917,101919,101972,101976,101997,102004,102018,102079,102080,102081,102097,102117,102118,102140,102141,102143,102147,102151,102156,102167,102168,102175,102176,102177,102200,102211,102212,102215,102230,102231,102232,102243,102265,102266,102302,102303,102306,102307,102310,102320,102321,102322,102331,102346,102365,102382,102413,102421,102426,102467,102468,102506,102566,102580,102585,102587,102639,102640,102641,102642,102643,102644,102645,102646,102676,102713,102717,102718,102726,102764,102765,102766,102767,102773,102813,102814,102815,102826,102833,102855,102856,102859,102866,102874,103100,103129,103130,103137,103138,103139,103140,103142,103171,103172,103184,103205,103248,103249,103250,103251,103256,103335,103350,103359,103382,103399,103401,103403,103433,103441,103442,103451,103460,103463,103467,103471,103472,103473,103474,103485,103495,103496,103497,103499,103500,103501,103534,103538,103549,103552,103553,103565,103566,103569,103582,103583,103609,103610,103611,103616,103617,103631,103632,103638,103639,103640,103641,103642,103662,103665,103681,103682,103683,103698,103699,103700,103702,103703,103704,103712,103715,103726,103728,103730,103731,103732,103733,103734,103735,103759,103767,103774,103775,103776,103833,103839,103840,103857,103860,103862,103885,103893,103894,103895,103896,103911,103912,103913,103914,103935,103936,103937,103938,103972,103974,103975,104009,104010,104011,104028,104029,104030,104031,104041,104043,104044,104045,104047,104052,104058,104077,104094,104095,104096,104097,104098,104180,104181,104182,104184,104203,104204,104205,104206,104208,104209,104210,104211,104213,104214,104215,104216,104217,104219,104220,104221,104222,104223,104225,104239,104240,104242,104243,104244,104253,104254,104256,104261,104263,104264,104265,104275,104276,104277,104288,104289,104290,104292,104294,104295,104297,104309,104310,104311,104317,104319,104324,104341,104407,104447,104453,104454,104455,104456,104457,104458,104459,104464,104479,104480,104481,104501,104515,104516,104533,104549,104560,104564,104572,104575,104578,104581,104586,104591,104592,104598,104599,104600,104604,104605,104612,104614,104615,104631,104632,104644,104645,104646,104647,104658,104660,104663,104664,104665,104666,104676,104716,104725,104803,104955,105011,105020,105021,105022,105023,105054,105127,105130,105162,105164,105165,105170,105197,105198,105201,105202,105203,105204,105205,105206,105207,105208,105215,105217,105226,105259,105262,105274,105275,105279,105281,105283,105284,105285,105286,105287,105288,105289,105291,105292,105293,105294,105295,105296,105297,105298,105299,105301,105303,105304,105306,105329,105337,105367,105368,105384,105410,105412,105413,105414,105415,105416,105441,105444,105445,105506,105507,105508,105509,105510,105511,105512,105513,105514,105515,105516,105517,105519,105520,105521,105522,105524,105525,105547,105548,105549,105550,105552,105553,105554,105555,105556,105557,105558,105559,105560,105561,105562,105563,105564,105565,105566,105567,105568,105569,105570,105571,105572,105574,105575,105576,105577,105584,105585,105586,105587,105588,105590,105591,105592,105593,105594,105595,105596,105597,105598,105599,105600,105601,105602,105603,105604,105605,105606,105607,105608,105609,105610,105611,105618,105619,105621,105640,105641,105642,105643,105644,105670,105671,105672,105685,105686,105687,105688,105689,105690,105723,105726,105728,105746,105762,105763,105809,105810,105811,105813,105814,105824,105827,105845,105847,105848,105929,105935,105961,105990,105995,106004,106006,106042,106073,106082,106120,106209,106315,106379,106387,106388,106391,106574,106597,106598,106628,106629,106630,106708,106739,106740,106741,106742,106743,106744,106745,106746,106747,106748,106769,106770,106771,106773,106774,106775,106873,106877,106914,106915,106921,106947,107034,107045,107063,107064,107126,107128,107133,107150,107151,107159,107160,107173,107176,107194,107203,107213,107215,107217,107218,107294,107300,107306,107311,107312,107314,107325,107361,107362,107364,107365,107366,107368,107369,107370,107372,107373,107474,107484,107502,107504,107532,107533,107534,107535,107536,107560,107597,107598,107605,107606,107617,107622,107624,107625,107626,107635,107637,107658,107668,107669,107670,107671,107702,107705,107713,107721,107722,107759,107761,107763,107896,107905,107923,107941,107942,107980,107986,107987,107988,107989,107997,108013,108014,108015,108016,108017,108018,108033,108056,108066,108067,108098,108099,108108,108109,108133,108146,108153,108154,108155,108156,108178,108190,108218,108221,108222,108250,108278,108312,108319,108321,108323,108331,108343,108344,108350,108351,108364,108366,108384,108385,108399,108453,108454,108455,108456,108465,108466,108477,108478,108479,108521,108532,108533,108535,108538,108547,108559,108593,108622,108623,108624,108625,108647,108671,108673,108674,108676,108686,108687,108714,108735,108739,108740,108741,108742,108743,108745,108746,108748,108749,108750,108751,108755,108756,108757,108758,108765,108767,108775,108776,108778,108780,108781,108783,108784,108785,108788,108790,108793,108794,108808,108810,108811,108813,108814,108839,108840,108841,108842,108843,108844,108845,108846,108874,108875,108908,108924,108925,108926,108927,108928,108929,108930,108931,108933,108934,108977,108978,108979,108980,108981,108982,108983,108984,108988,108989,109017,109018,109078,109099,109102,109131,109132,109156,109173,109174,109175,109202,109239,109240,109271,109304,109315,109322,109383,109444,109445,109446,109447,109448,109452,109462,109463,109464,109491,109500,109503,109530,109551,109553,109554,109594,109595,109596,109656,109697,109710,109760,109761,109762,109802,109822,109842,109853,109854,109855,109864,109896,109918,109932,109949,109961,109967,109978,109997,109998,109999,11e4,110033,110043,110047,110084,110106,110107,110133,110134,110221,110222,110252,110254,110322,110325,110326,110333,110334,110366,110368,110369,110370,110372,110373,110381,110383,110386,110461,110463,110464,110465,110468,110472,110473,110474,110516,110525,110528,110541,110551,110552,110553,110601,110602,110603,110632,110701,110787,110788,110789,110790,110791,110793,110795,110796,110797,110798,110799,110801,110803,110816,110825,110841,110842,110844,110845,110846,110847,110850,110851,110853,110907,110945,110946,110947,110948,110971,110972,110973,110974,110975,110976,110977,110978,110979,111028,111029,111030,111051,111348,111396,111676,111702,111928,112088,112107,112108,112137,112142,112191,112200,112211,112212,112213,112214,112215,112315,112456,113199,113372,113735,113997,114008,114499,114606,114644,114645,114750,114977,114978,114983,115001,115004,115005,115007,115009,115025,115050,115051,115052,115057,115180,115629,115787,116320,116644,116798,116833,116887,118047,118048,118051,118079,118080,118162,118203,118204,118599,118600,119178,119273,119301,120189,120368,120406,120407,120408,120416,120417,120505,120506,120507,120533,120534,120592,120593,121189,121270,121853,123525,123567,124172,124441,124509,124554,124559,124560,124562,124573,124575,124577,124654,124655,124656,124669,124992,126155,126553];\n","import React from \"react\";\nimport \"./Header.scss\";\nimport {\n  AppBar,\n  Toolbar,\n  IconButton,\n  Typography,\n  //Button,\n} from \"@material-ui/core\";\nimport MenuIcon from \"@material-ui/icons/Menu\";\nimport { makeStyles, Theme, createStyles } from \"@material-ui/core/styles\";\nimport AppContext from \"../contexts/AppContext\";\n\nconst useStyles = makeStyles((theme: Theme) =>\n  createStyles({\n    root: {\n      flexGrow: 1,\n    },\n    menuButton: {\n      marginRight: theme.spacing(2),\n    },\n    title: {\n      flexGrow: 1,\n    },\n    \"@media only screen and (min-width: 768px)\": {\n      title: {\n        flexGrow: 1,\n      },\n    },\n  })\n);\n\nconst Header = (): JSX.Element => {\n  const classes = useStyles();\n\n  return (\n    <AppContext.Consumer>\n      {({ setShowSidebar }) => (\n        <div className=\"header\">\n          <AppBar position=\"static\">\n            <Toolbar>\n              <IconButton\n                edge=\"start\"\n                className={classes.menuButton}\n                color=\"inherit\"\n                aria-label=\"menu\"\n                onClick={() => setShowSidebar?.(true)}\n              >\n                <MenuIcon />\n              </IconButton>\n              <Typography variant=\"h4\" className={classes.title}>\n                Tierlist Maker\n              </Typography>\n              {/* <Button color=\"inherit\">Login</Button> */}\n            </Toolbar>\n          </AppBar>\n        </div>\n      )}\n    </AppContext.Consumer>\n  );\n};\n\nexport default Header;\n","import React, { FC, useEffect, useContext } from \"react\";\nimport clsx from \"clsx\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport {\n  Drawer,\n  List,\n  ListItem,\n  ListItemIcon,\n  ListItemText,\n  Divider,\n} from \"@material-ui/core\";\n//import InboxIcon from \"@material-ui/icons/MoveToInbox\";\n//import MailIcon from \"@material-ui/icons/Mail\";\nimport HomeIcon from \"@material-ui/icons/Home\";\nimport NoteAddIcon from \"@material-ui/icons/NoteAdd\";\nimport AppContext from \"../contexts/AppContext\";\nimport { useHistory, useLocation } from \"react-router-dom\";\n\nconst useStyles = makeStyles({\n  list: {\n    width: 250,\n  },\n  fullList: {\n    width: \"auto\",\n  },\n});\n\nconst SideNav: FC = () => {\n  const classes = useStyles();\n  const history = useHistory();\n  const location = useLocation();\n  const { showSidebar, setShowSidebar } = useContext(AppContext);\n\n  useEffect(() => {\n    setShowSidebar?.(false);\n  }, [location]);\n\n  const renderListItems = (): JSX.Element => {\n    return (\n      <div className={clsx(classes.list)} role=\"presentation\">\n        <List>\n          <ListItem button onClick={() => history.push(\"/Tierlist\")}>\n            <ListItemIcon>\n              <HomeIcon />\n            </ListItemIcon>\n            <ListItemText primary={\"Home\"} />\n          </ListItem>\n          <ListItem button onClick={() => history.push(\"/Tierlist/create\")}>\n            <ListItemIcon>\n              <NoteAddIcon />\n            </ListItemIcon>\n            <ListItemText primary={\"Tierlist creator\"} />\n          </ListItem>\n        </List>\n        <Divider />\n      </div>\n    );\n  };\n\n  return (\n    <Drawer\n      anchor={\"left\"}\n      open={showSidebar}\n      onClose={() => setShowSidebar?.(false)}\n    >\n      {renderListItems()}\n    </Drawer>\n  );\n};\n\nexport default SideNav;\n","import React from \"react\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport Card from \"@material-ui/core/Card\";\nimport CardContent from \"@material-ui/core/CardContent\";\nimport Typography from \"@material-ui/core/Typography\";\nimport NavigateNextIcon from \"@material-ui/icons/NavigateNext\";\n\nconst useStyles = makeStyles({\n  root: {\n    minWidth: 275,\n  },\n  title: {\n    marginBottom: 10,\n    fontWeight: 500,\n  },\n  stepContainer: {\n    display: \"flex\",\n    flexDirection: \"column\",\n    margin: \"20px auto\",\n    justifyContent: \"center\",\n  },\n  card: {\n    margin: \"10px\",\n  },\n  \"@media only screen and (min-width: 768px)\": {\n    card: {\n      minWidth: 200,\n      marginRight: 12,\n    },\n    stepContainer: {\n      flexDirection: \"row\",\n    },\n  },\n});\n\nconst Homepage = (): JSX.Element => {\n  const classes = useStyles();\n\n  const renderCard = (title: string, body: JSX.Element): JSX.Element => {\n    return (\n      <Card className={classes.card} key={title}>\n        <CardContent>\n          <Typography variant=\"h4\" className={classes.title}>\n            {title}\n          </Typography>\n          {body}\n        </CardContent>\n      </Card>\n    );\n  };\n\n  const step1 = <Typography>Pick a media type to search</Typography>;\n  const step2 = <Typography>Search for your entry</Typography>;\n  const step3 = <Typography>Create your own tierlist</Typography>;\n  const step4 = <Typography>Download it and share it</Typography>;\n\n  const steps = [\n    { title: \"Step 1\", body: step1 },\n    { title: \"Step 2\", body: step2 },\n    { title: \"Step 3\", body: step3 },\n    { title: \"Step 4\", body: step4 },\n  ];\n\n  return (\n    <div>\n      <h1>Make your own Tierlists!</h1>\n      <h2>This page is a Work In Progress.</h2>\n      <div className={classes.stepContainer}>\n        {steps.map((step) => renderCard(step.title, step.body))}\n      </div>\n    </div>\n  );\n};\n\nexport default Homepage;\n","import React, { useState, useEffect, SyntheticEvent } from \"react\";\nimport \"./App.scss\";\nimport ListMaker from \"./pages/ListMaker\";\nimport Header from \"./components/Header\";\nimport { createMuiTheme } from \"@material-ui/core/styles\";\nimport { ThemeProvider } from \"@material-ui/styles\";\nimport SideNav from \"./components/SideNav\";\nimport AppContext from \"./contexts/AppContext\";\nimport { BrowserRouter as Router, Switch, Route, Link } from \"react-router-dom\";\nimport Homepage from \"./pages/Homepage\";\nimport { Snackbar } from \"@material-ui/core\";\nimport Alert from \"@material-ui/lab/Alert\";\nimport { SnackbarMessage } from \"./utils/common\";\n\nconst darkTheme = createMuiTheme({\n  palette: {\n    type: \"dark\",\n  },\n});\n\nconst App = (): React.ReactElement => {\n  const [showSidebar, setShowSidebar] = useState<boolean>(false);\n  const [showSnackbar, setShowSnackbar] = useState<boolean>(false);\n  const [message, setMessage] = useState<SnackbarMessage>({\n    text: \"\",\n    severity: \"success\",\n  });\n\n  const handleCloseMessage = (): void => {\n    setMessage({ text: \"\", severity: message.severity });\n  };\n\n  const handleSnackbarClose = (event: SyntheticEvent, reason: string): void => {\n    if (reason === \"clickaway\") return;\n    setShowSnackbar(false);\n  };\n\n  //Show the snackbar when there's a message available\n  useEffect(() => {\n    if (message?.text) {\n      setShowSnackbar(true);\n    } else {\n      setShowSnackbar(false);\n    }\n  }, [message]);\n\n  return (\n    <div id=\"app\">\n      <ThemeProvider theme={darkTheme}>\n        <AppContext.Provider\n          value={{ showSidebar, setShowSidebar, setMessage }}\n        >\n          <Header />\n          <div id=\"appContent\">\n            <Router>\n              <Switch>\n                <Route path=\"/Tierlist/create\">\n                  <ListMaker />\n                </Route>\n                <Route path=\"/Tierlist/\">\n                  <Homepage />\n                </Route>\n              </Switch>\n              <SideNav />\n            </Router>\n          </div>\n          <Snackbar\n            open={showSnackbar}\n            autoHideDuration={6000}\n            onClose={handleSnackbarClose}\n          >\n            <Alert\n              elevation={6}\n              variant=\"filled\"\n              onClose={handleCloseMessage}\n              severity={message?.severity}\n            >\n              {message?.text}\n            </Alert>\n          </Snackbar>\n        </AppContext.Provider>\n      </ThemeProvider>\n    </div>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport Firebase from \"./firebase\";\n\nconst FirebaseContext = React.createContext<Firebase | null>(null);\n\nexport default FirebaseContext;\n","import firebase from \"firebase/app\";\n\nimport \"firebase/functions\";\nimport \"firebase/firestore\";\n\nconst prodConfig = {\n  apiKey: process.env.REACT_APP_PROD_API_KEY,\n  authDomain: process.env.REACT_APP_PROD_AUTH_DOMAIN,\n  databaseURL: process.env.REACT_APP_PROD_DATABASE_URL,\n  projectId: process.env.REACT_APP_PROD_PROJECT_ID,\n  storageBucket: process.env.REACT_APP_PROD_STORAGE_BUCKET,\n  messagingSenderId: process.env.REACT_APP_PROD_MESSAGING_SENDER_ID,\n  appId: process.env.REACT_APP_PROD_APP_ID,\n  measurementId: process.env.REACT_APP_PROD_MEASUREMENT_ID,\n};\n\n// const devConfig = {\n//   apiKey: process.env.REACT_APP_DEV_API_KEY,\n//   authDomain: process.env.REACT_APP_DEV_AUTH_DOMAIN,\n//   databaseURL: process.env.REACT_APP_DEV_DATABASE_URL,\n//   projectId: process.env.REACT_APP_DEV_PROJECT_ID,\n//   storageBucket: process.env.REACT_APP_DEV_STORAGE_BUCKET,\n//   messagingSenderId: process.env.REACT_APP_DEV_MESSAGING_SENDER_ID,\n// };\n\n// const config = process.env.NODE_ENV === \"production\" ? prodConfig : devConfig;\n\nclass Firebase {\n  db: firebase.firestore.Firestore;\n  functions: firebase.functions.Functions;\n\n  constructor() {\n    //firebase.initializeApp();\n    firebase.initializeApp(prodConfig);\n    this.db = firebase.firestore();\n    this.functions = firebase.functions();\n    this.functions.useFunctionsEmulator(\"http://localhost:5001\");\n\n    if (process.env.NODE_ENV !== \"production\") {\n      this.db.settings({\n        host: \"localhost:8080\",\n        ssl: false,\n      });\n    }\n  }\n}\n\nexport default Firebase;\n","import FirebaseContext from \"./context\";\nimport Firebase from \"./firebase\";\n\nexport default Firebase;\n\nexport { FirebaseContext };\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App.tsx\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport Firebase, { FirebaseContext } from \"./components/Firebase\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <FirebaseContext.Provider value={new Firebase()}>\n      <App />\n    </FirebaseContext.Provider>\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}