{"version":3,"sources":["utils/common.ts","components/SearchBar.tsx","utils/Jikan.ts","components/SearchResults.tsx","utils/TVDB.ts","components/TierList/CharacterTile.tsx","components/TierList/Tier.tsx","components/TierList/constants.ts","contexts/AppContext.tsx","components/TierList/TierList.tsx","pages/ListMaker.tsx","components/Header.tsx","components/SideNav.tsx","pages/Homepage.tsx","App.tsx","serviceWorker.js","components/Firebase/context.ts","components/Firebase/firebase.ts","components/Firebase/index.ts","index.js"],"names":["SearchType","CharacterRole","Rating","useStyles","makeStyles","theme","createStyles","root","display","alignItems","margin","backgroundColor","input","marginLeft","spacing","flex","fontSize","iconButton","padding","divider","height","select","suggestionsRoot","SearchBar","onSearch","onChangeSearchType","className","defaultValue","classes","useState","searchType","setSearchType","Paper","component","onSubmit","FormControl","variant","Select","value","onChange","event","casted","target","MenuItem","TVshow","Anime","Manga","Divider","orientation","InputBase","placeholder","name","autoComplete","IconButton","type","aria-label","Typography","gridGap","gridTemplateColumns","panel","borderRadius","outline","cursor","panel__title","fontWeight","panel__image","maxWidth","loadingCircle","SearchResults","data","loading","onSelect","map","elem","item","key","id","onClick","label","alt","src","imageUrl","baseUrl","proxyBaseUrl","process","characterTile","position","flexGrow","overflow","characterTile__name","top","left","right","zIndex","whiteSpace","textOverflow","characterTile__image","width","CharacterTile","char","title","flexWrap","minHeight","tierLabel","color","list","Tier","group","listItems","labelColour","index","onTierChange","setList","useEffect","style","verticalAlign","DefaultColourOrder","DefaultTiers","AppContext","React","createContext","showSidebar","unrankedList","marginTop","button","marginRight","buttonGroup","marginBottom","btnIcon","store","window","localStorage","TierList","mediaId","characterData","tierlistEl","useRef","tierData","saveData","getItem","JSON","parse","sorted","unsorted","getSaveData","current","appContext","useContext","handleTierChange","Button","domtoimage","toBlob","then","blob","saveAs","catch","error","console","minWidth","setItem","stringify","setMessage","text","severity","err","toString","ref","tier","searchBar","mediaTypePrefix","ListMaker","searchResult","setSearchResult","isLoading","setLoading","setMediaId","setCharacterData","preventDefault","searchQuery","limit","query","searchValue","elements","search","length","axios","get","encodeURIComponent","res","log","seriesName","image","params","q","results","mal_id","image_url","searchManga","malId","getSeriesCharacters","role","actor","characters","response","message","getMangaCharacters","CircularProgress","size","menuButton","Header","Consumer","setShowSidebar","AppBar","Toolbar","edge","fullList","SideNav","history","useHistory","location","useLocation","Drawer","anchor","open","onClose","clsx","List","ListItem","push","ListItemIcon","ListItemText","primary","stepContainer","flexDirection","justifyContent","card","Homepage","steps","body","step","Card","CardContent","darkTheme","createMuiTheme","palette","App","showSnackbar","setShowSnackbar","ThemeProvider","Provider","path","Snackbar","autoHideDuration","reason","Alert","elevation","Boolean","hostname","match","FirebaseContext","prodConfig","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","measurementId","Firebase","db","functions","firebase","initializeApp","this","firestore","useFunctionsEmulator","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.356dc844.chunk.js","sourcesContent":["/**\n * File for shared util methods and types. Not sure if this is the best project architecture...\n */\n\nexport enum SearchType {\n  TVshow = \"TVshow\",\n  //Movie = \"Movie\",\n  Anime = \"Anime\",\n  Manga = \"Manga\",\n}\n\nexport interface DragItem {\n  id: number;\n}\n\nexport interface ResultItem {\n  id: number;\n  label: string;\n  imageUrl: string;\n}\n\nexport interface CharacterItem extends DragItem {\n  id: number;\n  name: string;\n  actor?: string;\n  imageUrl: string;\n}\n\nexport interface SnackbarMessage {\n  text: string;\n  severity: \"error\" | \"warning\" | \"info\" | \"success\";\n}\n","import React, { FC, useState } from \"react\";\nimport { makeStyles, Theme, createStyles } from \"@material-ui/core/styles\";\n//import Button from \"@material-ui/core/Button\";\n//import TextField from \"@material-ui/core/TextField\";\nimport Paper from \"@material-ui/core/Paper\";\nimport IconButton from \"@material-ui/core/IconButton\";\nimport SearchIcon from \"@material-ui/icons/Search\";\nimport InputBase from \"@material-ui/core/InputBase\";\n//import MenuIcon from \"@material-ui/icons/Menu\";\nimport Divider from \"@material-ui/core/Divider\";\nimport Select from \"@material-ui/core/Select\";\nimport { Menu, MenuItem, FormControl, Typography } from \"@material-ui/core\";\nimport { SearchType } from \"../utils/common\";\n\nconst useStyles = makeStyles((theme: Theme) =>\n  createStyles({\n    root: {\n      display: \"flex\",\n      alignItems: \"center\",\n      margin: \"0 8px\",\n      backgroundColor: \"var(--darker-grey)\",\n    },\n    input: {\n      marginLeft: theme.spacing(1),\n      flex: 1,\n      fontSize: 16,\n    },\n    iconButton: {\n      padding: \"0 10px\",\n    },\n    divider: {\n      height: 28,\n      margin: 4,\n    },\n    select: {\n      padding: \"0 8px\",\n      fontSize: 14,\n    },\n    \"@media only screen and (min-width: 768px)\": {\n      root: {\n        display: \"flex\",\n        alignItems: \"center\",\n        margin: \"0 40px\",\n        backgroundColor: \"var(--darker-grey)\",\n      },\n      input: {\n        marginLeft: theme.spacing(1),\n        flex: 1,\n        fontSize: 20,\n      },\n      iconButton: {\n        padding: 10,\n      },\n      divider: {\n        height: 28,\n        margin: 4,\n      },\n      select: {\n        padding: \"0 12px\",\n      },\n    },\n    suggestionsRoot: {},\n  })\n);\n\ninterface Props {\n  onSearch: (event: React.FormEvent<HTMLDivElement>) => void;\n  onChangeSearchType: (event: React.ChangeEvent<{ value: SearchType }>) => void;\n  className?: string;\n  defaultValue: SearchType;\n}\n\nconst SearchBar: FC<Props> = ({\n  onSearch,\n  onChangeSearchType,\n  className,\n  defaultValue,\n}) => {\n  const classes = useStyles();\n  const [searchType, setSearchType] = useState(defaultValue);\n\n  const handleChangeSearchType = (\n    event: React.ChangeEvent<{ value: unknown }>\n  ): void => {\n    const casted = event as React.ChangeEvent<{ value: SearchType }>;\n    setSearchType(event.target.value as SearchType);\n    onChangeSearchType(casted);\n  };\n\n  return (\n    <div className={className}>\n      <Paper component=\"form\" className={classes.root} onSubmit={onSearch}>\n        <FormControl variant=\"outlined\">\n          <Select\n            value={searchType}\n            onChange={handleChangeSearchType}\n            className={classes.select}\n          >\n            <MenuItem value={SearchType.TVshow}>TV show</MenuItem>\n            {/* <MenuItem value={SearchType.Movie}>Movie</MenuItem> */}\n            <MenuItem value={SearchType.Anime}>Anime</MenuItem>\n            <MenuItem value={SearchType.Manga}>Manga</MenuItem>\n          </Select>\n        </FormControl>\n        <Divider className={classes.divider} orientation=\"vertical\" />\n        <InputBase\n          className={classes.input}\n          placeholder=\"Search\"\n          name=\"search\"\n          autoComplete=\"off\"\n        />\n        <IconButton\n          type=\"submit\"\n          className={classes.iconButton}\n          aria-label=\"search\"\n        >\n          <SearchIcon />\n        </IconButton>\n      </Paper>\n\n      <div className={classes.suggestionsRoot}>\n        <Typography>Suggested searches:</Typography>\n      </div>\n    </div>\n  );\n};\n\nexport default SearchBar;\n","import axios, { AxiosResponse } from \"axios\";\nimport { DragItem } from \"./common\";\n\n/*\n * Helper methods that will call Jikan's HTTP API. I need to make my own jikan-client one day...\n */\n\nexport enum CharacterRole {\n  Main = \"Main\",\n  Supporting = \"Supporting\",\n}\n\nexport enum Rating {\n  g = \"G\",\n  pg = \"PG\",\n  pg13 = \"PG-13\",\n  r17 = \"R\",\n  r = \"R+\",\n  rx = \"Rx\",\n}\n\n//Anime and Manga search result shared values\ninterface MALSearchResult {\n  end_date: string | null;\n  image_url: string;\n  mal_id: number;\n  members: number;\n  title: string;\n  url: string;\n  score: number;\n  start_date: string;\n  synopsis: string;\n}\n\nexport interface MALCharacterData {\n  image_url: string;\n  mal_id: number;\n  name: string;\n  role: CharacterRole;\n}\n\nexport interface AnimeSearchResult extends MALSearchResult {\n  airing: boolean;\n  episodes: number;\n  type: string;\n  rated: Rating;\n}\n\nexport interface MangaSearchResult extends MALSearchResult {\n  chapters: number;\n  publishing: boolean;\n  type: string;\n  volumes: number;\n}\n\nexport interface AnimeCharacterData extends MALCharacterData {\n  voice_actors: VoiceActorData[];\n}\n\nexport interface MangaCharacterData extends MALCharacterData {\n  url: string;\n}\n\nexport interface VoiceActorData {\n  image_url: string;\n  language: string;\n  mal_id: number;\n  name: string;\n  url: string;\n}\n\nexport interface DragAnimeCharItem extends AnimeCharacterData, DragItem {}\n\nconst baseUrl = \"https://api.jikan.moe/v3\";\n\n/**\n * Search MAL for a matching anime\n * @param searchQuery The search term to use\n * @param limit Max results returned\n */\nexport const searchAnime = (\n  searchQuery: string,\n  limit?: number\n): Promise<AxiosResponse<{ results: AnimeSearchResult[] }>> => {\n  return axios.get(`${baseUrl}/search/anime`, {\n    params: {\n      q: searchQuery,\n      limit,\n    },\n  });\n};\n\n/**\n * Search MAL for a matching manga\n * @param searchQuery The search term to use\n * @param limit Max results returned\n */\nexport const searchManga = (\n  searchQuery: string,\n  limit?: number\n): Promise<AxiosResponse<{ results: MangaSearchResult[] }>> => {\n  return axios.get(`${baseUrl}/search/manga`, {\n    params: {\n      q: searchQuery,\n      limit,\n    },\n  });\n};\n\n/**\n * Gets an anime's staff and character list.\n * @param malId The anime's id to get the info for\n */\nexport const getAnimeCharactersStaff = (\n  malId: number\n): Promise<AxiosResponse<{ characters: AnimeCharacterData[] }>> => {\n  return axios.get(`${baseUrl}/anime/${malId}/characters_staff`);\n};\n\n/**\n * Gets a manga's character list.\n * @param malId The manga's id to get the info for\n */\nexport const getMangaCharacters = (\n  malId: number\n): Promise<AxiosResponse<{ characters: MangaCharacterData[] }>> => {\n  return axios.get(`${baseUrl}/manga/${malId}/characters`);\n};\n","import React, { FC } from \"react\";\nimport { makeStyles, Theme, createStyles } from \"@material-ui/core/styles\";\n//import { AnimeSearchResult, Rating } from \"../utils/Jikan\";\nimport { ResultItem } from \"../utils/common\";\n\nconst mobileItemWidth = 100;\n/* eslint-disable @typescript-eslint/camelcase */\nconst useStyles = makeStyles((theme: Theme) =>\n  createStyles({\n    root: {\n      display: \"grid\",\n      gridGap: \"5px\",\n      gridTemplateColumns: `repeat(auto-fill, minmax(${mobileItemWidth}px, 1fr))`,\n    },\n    panel: {\n      borderRadius: 3,\n      backgroundColor: \"var(--darker-grey)\",\n      \"&:hover\": {\n        outline: \"2px solid var(--lighter-grey)\",\n        cursor: \"pointer\",\n      },\n    },\n    panel__title: {\n      fontSize: 14,\n      fontWeight: 500,\n      display: \"block\",\n      padding: \"8px\",\n    },\n    panel__image: {\n      maxWidth: mobileItemWidth,\n      height: \"auto\",\n    },\n    loadingCircle: {\n      margin: \"100px auto\",\n    },\n    \"@media only screen and (min-width: 768px)\": {\n      root: {\n        display: \"grid\",\n        gridGap: \"20px\",\n        gridTemplateColumns: \"repeat(auto-fill, minmax(200px, 1fr))\",\n      },\n      panel: {\n        borderRadius: 3,\n        backgroundColor: \"var(--darker-grey)\",\n        \"&:hover\": {\n          outline: \"2px solid var(--lighter-grey)\",\n          cursor: \"pointer\",\n        },\n      },\n      panel__title: {\n        fontSize: 18,\n        fontWeight: 500,\n        display: \"block\",\n        padding: \"8px\",\n      },\n      panel__image: {\n        maxWidth: 200,\n        height: \"auto\",\n      },\n      loadingCircle: {\n        margin: \"100px auto\",\n      },\n    },\n  })\n);\n/* eslint-enable @typescript-eslint/camelcase */\n\ninterface Props {\n  data: ResultItem[];\n  loading: boolean;\n  onSelect: (malId: number) => void;\n  className?: string;\n}\n\n// interface OnSelectFunction {\n//   (malId: number): void;\n// }\n\nconst SearchResults: FC<Props> = ({ data, loading, onSelect, className }) => {\n  const classes = useStyles();\n  //TODO: move to outside parent?\n  // const filteredData = data.filter((elem) => {\n  //   //TODO: fix this. OH GOD WHY. TYPESCRIPT ENUMS ARE USELESS :'(\n\n  //   return (\n  //     Object.values(Rating).indexOf(elem.rated) <=\n  //     Object.values(Rating).indexOf(Rating.r)\n  //   );\n  // });\n\n  //Anime/Manga panel\n  const renderItem = (item: ResultItem): JSX.Element => {\n    return (\n      <div\n        className={classes.panel}\n        key={item.id}\n        onClick={() => onSelect(item.id)}\n      >\n        <div className={classes.panel__title}>{item.label}</div>\n        <img\n          alt={item.label}\n          src={item.imageUrl}\n          className={classes.panel__image}\n        />\n      </div>\n    );\n  };\n\n  if (loading) {\n    return <div></div>;\n  } else {\n    return (\n      <div className={className}>\n        <div className={classes.root}>\n          {!loading && data.map((elem) => renderItem(elem))}\n        </div>\n      </div>\n    );\n  }\n};\n\nexport default SearchResults;\n","import axios, { AxiosResponse } from \"axios\";\n\n/*\n * Helper methods that will call the TVDB's REST API for me.\n * Maybe this should be a class?\n */\n\n//URL used for loading images\nexport const TVDBUrl = \"https://thetvdb.com\";\nexport const TVDBImgUrl = \"https://artworks.thetvdb.com/banners/\";\nexport const missingActorUrl = \"https://artworks.thetvdb.com/person/actor.jpg\";\n\n//For local testing\nconst proxyBaseUrl = `http://localhost:5001/${process.env.REACT_APP_DEV_PROJECT_ID}/us-central1/proxy`;\n\nexport interface SeriesResult {\n  id: number;\n  banner: string | null;\n  image: string;\n  overview: string;\n  poster: string | null;\n  seriesName: string;\n}\n\nexport interface SeriesCharacter {\n  id: number;\n  image: string;\n  imageAdded: string; //Date\n  imageAuthor: number;\n  lastUpdated: string; //Date\n  name: string;\n  role: string;\n  seriesId: number;\n  sortOrder: number;\n}\n\nexport const searchSeries = (\n  query: string\n): Promise<AxiosResponse<{ data: SeriesResult[] }>> => {\n  return axios.get(\n    `${proxyBaseUrl}/search/series?name=${encodeURIComponent(query)}`\n  );\n};\n\nexport const getSeriesCharacters = (\n  id: number\n): Promise<AxiosResponse<{ data: SeriesCharacter[] }>> => {\n  return axios.get(`${proxyBaseUrl}/series/${id}/actors`);\n};\n","import { AnimeCharacterData } from \"../../utils/Jikan\";\nimport React, { FC, useState } from \"react\";\nimport { makeStyles, Theme, createStyles } from \"@material-ui/core/styles\";\nimport { CharacterItem } from \"../../utils/common\";\n\n/* eslint-disable @typescript-eslint/camelcase */\nconst useStyles = makeStyles((theme: Theme) =>\n  createStyles({\n    characterTile: {\n      position: \"relative\",\n      flexGrow: 0,\n      outline: \"1px solid var(--lighter-grey)\",\n      height: \"var(--image-tile-size)\",\n      overflow: \"hidden\",\n      cursor: \"pointer\",\n    },\n    characterTile__name: {\n      position: \"absolute\",\n      top: 0,\n      left: 0,\n      right: 0,\n      zIndex: 1,\n      fontSize: 10,\n      fontWeight: 500,\n      whiteSpace: \"nowrap\",\n      textOverflow: \"ellipsis\",\n      overflow: \"hidden\",\n      backgroundColor: \"rgb(20, 20, 20, 0.65)\",\n      padding: \"3px 4px\",\n    },\n    characterTile__image: {\n      width: \"var(--image-tile-size)\",\n      height: \"auto\",\n    },\n    \"@media only screen and (min-width: 768px)\": {\n      characterTile__name: {\n        fontSize: 14,\n      },\n    },\n  })\n);\n/* eslint-enable @typescript-eslint/camelcase */\n\ninterface CharacterTileProps {\n  char: CharacterItem;\n}\n\n//Tile that represents a character.\nconst CharacterTile: FC<CharacterTileProps> = ({ char }): JSX.Element => {\n  const classes = useStyles();\n\n  return (\n    <div className={classes.characterTile} key={char.id}>\n      <div className={classes.characterTile__name} title={char.name}>\n        {char.name}\n      </div>\n      <img\n        alt={char.name}\n        src={char.imageUrl}\n        className={classes.characterTile__image}\n      />\n    </div>\n  );\n};\n\nexport default CharacterTile;\n","import React, { useState, FC, useEffect } from \"react\";\nimport { makeStyles, Theme, createStyles } from \"@material-ui/core/styles\";\nimport { ReactSortable } from \"react-sortablejs\";\nimport { DragAnimeCharItem } from \"../../utils/Jikan\";\nimport CharacterTile from \"./CharacterTile\";\nimport { CharacterItem } from \"../../utils/common\";\n\nconst useStyles = makeStyles((theme: Theme) =>\n  createStyles({\n    root: {\n      display: \"flex\",\n      flexWrap: \"wrap\",\n      outline: \"1px solid red\",\n      minHeight: \"var(--image-tile-size)\",\n    },\n    tierLabel: {\n      width: 40,\n      fontSize: 20,\n      fontWeight: 600,\n      flexGrow: 0,\n      color: \"black\",\n    },\n    list: {\n      flexGrow: 1,\n      display: \"flex\",\n      flexWrap: \"wrap\",\n      maxWidth: \"calc(100% - 80px)\",\n    },\n    \"@media only screen and (min-width: 768px)\": {\n      tierLabel: {\n        width: 80,\n        fontSize: 24,\n      },\n    },\n  })\n);\n\ninterface Props {\n  name: string;\n  group: string;\n  listItems: CharacterItem[];\n  labelColour?: string;\n  index: number;\n  onTierChange: (list: CharacterItem[], index: number) => void;\n}\n\n//Represents a tier in a tierlist. Example: \"A-tier\"\nconst Tier: FC<Props> = ({\n  name,\n  group,\n  listItems,\n  labelColour,\n  index,\n  onTierChange,\n}): JSX.Element => {\n  const classes = useStyles();\n  const [list, setList] = useState<CharacterItem[]>(listItems || []);\n\n  useEffect(() => {\n    onTierChange(list, index);\n  }, [list, index]);\n\n  return (\n    <div className={classes.root}>\n      <div\n        className={classes.tierLabel}\n        style={{ backgroundColor: labelColour }}\n      >\n        <p style={{ verticalAlign: \"middle\" }}>{name}</p>\n      </div>\n      <ReactSortable\n        list={list}\n        setList={setList}\n        className={classes.list}\n        group={group}\n      >\n        {list.map((char) => (\n          <CharacterTile char={char} key={char.id} />\n        ))}\n      </ReactSortable>\n    </div>\n  );\n};\n\nexport default Tier;\n","export const DefaultColourOrder = [\n  \"red\",\n  \"red-orange\",\n  \"orange\",\n  \"yellow\",\n  \"yellow-green\",\n  \"green\",\n  \"cyan\",\n  \"blue\",\n  \"dark-blu\",\n  \"pink\",\n  \"purple\",\n  \"black\",\n  \"dark-grey\",\n  \"grey\",\n  \"white\",\n];\n\nexport const DefaultTiers = [\"S\", \"A\", \"B\", \"C\", \"D\", \"E\", \"F\"];\n","import React from \"react\";\nimport { SnackbarMessage } from \"../utils/common\";\n\ntype ContextProps = {\n  showSidebar: boolean;\n  setShowSidebar: (show: boolean) => void;\n  setMessage: (msg: SnackbarMessage) => void;\n};\n\nconst AppContext = React.createContext<Partial<ContextProps>>({\n  showSidebar: false,\n});\n\nexport default AppContext;\n","import React, { FC, useState, useRef, useEffect, useContext } from \"react\";\nimport { makeStyles, Theme, createStyles } from \"@material-ui/core/styles\";\nimport { AnimeCharacterData, DragAnimeCharItem } from \"../../utils/Jikan\";\nimport { ReactSortable } from \"react-sortablejs\";\nimport CharacterTile from \"./CharacterTile\";\nimport Tier from \"./Tier\";\nimport { DefaultColourOrder, DefaultTiers } from \"./constants\";\nimport domtoimage from \"dom-to-image\";\nimport Button from \"@material-ui/core/Button\";\nimport { saveAs } from \"file-saver\";\n//import { Save, SaveAlt } from \"@material-ui/icons\";\nimport SaveIcon from \"@material-ui/icons/Save\";\nimport SaveAltIcon from \"@material-ui/icons/SaveAlt\";\nimport MediaQuery from \"react-responsive\";\nimport { CharacterItem, DragItem } from \"../../utils/common\";\nimport AppContext from \"../../contexts/AppContext\";\n\n/* eslint-disable @typescript-eslint/camelcase */\nconst useStyles = makeStyles((theme: Theme) =>\n  createStyles({\n    root: {\n      padding: 10,\n      backgroundColor: \"var(--dark-grey)\",\n    },\n    unrankedList: {\n      display: \"flex\",\n      flexWrap: \"wrap\",\n      marginTop: 20,\n    },\n    button: {\n      marginRight: theme.spacing(1),\n    },\n    buttonGroup: {\n      display: \"flex\",\n      marginBottom: theme.spacing(2),\n    },\n    btnIcon: {\n      marginRight: theme.spacing(1),\n    },\n  })\n);\n/* eslint-enable @typescript-eslint/camelcase */\n\ninterface Props {\n  mediaId: string | number;\n  characterData: CharacterItem[];\n}\n\ninterface TierData {\n  sorted: CharacterItem[][];\n  unsorted: CharacterItem[];\n}\n\nconst store = window.localStorage;\n\n/**\n * Load save data from localStorage if it exists.\n * @param mediaId - the series/anime/manga's ID with the media's prefix\n * @param characterData - character data\n */\nconst getSaveData = (\n  mediaId: string | number,\n  characterData: CharacterItem[]\n): TierData => {\n  const saveData = store.getItem(`${mediaId}`);\n  if (saveData) {\n    return JSON.parse(saveData) as TierData;\n  } else {\n    return {\n      sorted: [],\n      unsorted: characterData,\n    };\n  }\n};\n\nconst TierList: FC<Props> = ({ mediaId, characterData }): JSX.Element => {\n  const classes = useStyles();\n  const tierlistEl = useRef<HTMLDivElement>(null);\n  const tierData = useRef<TierData>(getSaveData(mediaId, characterData));\n  const [list, setList] = useState<CharacterItem[]>(tierData.current.unsorted);\n  const appContext = useContext(AppContext);\n\n  //Handle \"download image\"\n  const handleExport = (): void => {\n    if (tierlistEl.current) {\n      domtoimage\n        .toBlob(tierlistEl.current)\n        .then((blob: Blob) => {\n          saveAs(blob, `tierlist-${mediaId}.png`);\n        })\n        .catch((error) => {\n          console.error(\"Could not generate image\", error);\n        });\n    }\n  };\n\n  //Handle save to browser localstorage\n  const handleSave = (): void => {\n    try {\n      tierData.current.unsorted = list; //Update the unsorted list\n      store.setItem(`${mediaId}`, JSON.stringify(tierData.current));\n      appContext.setMessage?.({\n        text: \"Saved successfully!\",\n        severity: \"success\",\n      });\n    } catch (err) {\n      appContext.setMessage?.({\n        text: err.toString(),\n        severity: \"error\",\n      });\n    }\n  };\n\n  //Propogate state upwards from Tier\n  const handleTierChange = (list: CharacterItem[], index: number): void => {\n    tierData.current.sorted[index] = list;\n  };\n\n  return (\n    <div>\n      <div className={classes.buttonGroup}>\n        <Button\n          onClick={handleExport}\n          className={classes.button}\n          variant=\"outlined\"\n        >\n          <SaveAltIcon className={classes.btnIcon} />\n          Download <MediaQuery minWidth={768}>image</MediaQuery>\n        </Button>\n        <Button\n          onClick={handleSave}\n          className={classes.button}\n          variant=\"outlined\"\n        >\n          <SaveIcon className={classes.btnIcon} />\n          Save\n        </Button>\n      </div>\n      <div ref={tierlistEl} className={classes.root}>\n        {DefaultTiers.map((tier, index) => (\n          <Tier\n            index={index}\n            key={index}\n            //ref={tierRefs[index]}\n            onTierChange={handleTierChange}\n            name={tier}\n            listItems={tierData.current.sorted[index]}\n            group=\"tierlist\"\n            labelColour={`var(--tier-${DefaultColourOrder[index]})`}\n          />\n        ))}\n        <ReactSortable\n          group=\"tierlist\"\n          list={list}\n          setList={setList}\n          className={classes.unrankedList}\n        >\n          {list.map((char) => (\n            <CharacterTile char={char} key={char.id} />\n          ))}\n        </ReactSortable>\n      </div>\n    </div>\n  );\n};\n\nexport default TierList;\n","import React, { useState, useEffect, useRef, useContext } from \"react\";\nimport \"./ListMaker.scss\";\nimport SearchBar from \"../components/SearchBar\";\nimport SearchResults from \"../components/SearchResults\";\nimport {\n  searchAnime,\n  searchManga,\n  getAnimeCharactersStaff,\n  getMangaCharacters,\n} from \"../utils/Jikan\";\nimport {\n  searchSeries,\n  TVDBUrl,\n  getSeriesCharacters,\n  TVDBImgUrl,\n  missingActorUrl,\n} from \"../utils/TVDB\";\nimport { makeStyles, Theme, createStyles } from \"@material-ui/core/styles\";\nimport CircularProgress from \"@material-ui/core/CircularProgress\";\nimport TierList from \"../components/TierList/TierList\";\nimport { CharacterItem, ResultItem, SearchType } from \"../utils/common\";\nimport AppContext from \"../contexts/AppContext\";\n//import Firebase, { FirebaseContext } from \"../components/Firebase\";\n\n//TODO: validate inputs\n\nconst useStyles = makeStyles((theme: Theme) =>\n  createStyles({\n    root: {\n      display: \"grid\",\n      gridGap: \"20px\",\n      gridTemplateColumns: \"repeat(auto-fill, minmax(200px, 1fr))\",\n    },\n    loadingCircle: {\n      margin: \"100px auto\",\n    },\n    searchBar: {\n      marginBottom: 10,\n    },\n    \"@media only screen and (min-width: 768px)\": {\n      searchBar: {\n        marginBottom: 40,\n      },\n    },\n  })\n);\n\nconst mediaTypePrefix = {\n  [SearchType.TVshow]: \"tv-\",\n  [SearchType.Anime]: \"anime-\",\n  [SearchType.Manga]: \"manga\",\n};\n\n//TODO: Refactor this into someting more focused. It's handling too many responsibilities right now...\nconst ListMaker: React.FC = () => {\n  const [searchResult, setSearchResult] = useState<ResultItem[]>([]);\n  const [isLoading, setLoading] = useState<boolean>(false);\n  const [mediaId, setMediaId] = useState<number>();\n  const [characterData, setCharacterData] = useState<CharacterItem[]>([]);\n  const [searchType, setSearchType] = useState<SearchType>(SearchType.TVshow);\n  //const [token, setToken] = useState<string>(localStorage.getItem(\"auth-token\") || \"\");\n  //const firebase = useContext(FirebaseContext);\n  const { setMessage } = useContext(AppContext);\n\n  const classes = useStyles();\n\n  //Handle a search submit\n  const handleSearch = (event: React.FormEvent<HTMLDivElement>): void => {\n    event.preventDefault();\n\n    //Clear the previous search's results\n    setCharacterData([]);\n    //Get the search value\n    const searchValue = ((event.target as HTMLFormElement).elements as any)\n      .search.value;\n\n    if (searchValue.length >= 3) {\n      setLoading(true);\n\n      if (searchType === SearchType.TVshow) {\n        searchSeries(searchValue).then(\n          (res) => {\n            console.log(res);\n            setSearchResult(\n              res.data.data.map((elem) => ({\n                id: elem.id,\n                label: elem.seriesName,\n                imageUrl: `${TVDBUrl}${elem.image}`,\n              }))\n            );\n            setLoading(false);\n          },\n          (err) => {\n            setMessage?.({\n              text: \"Could not search, TVDB's API is down\",\n              severity: \"error\",\n            });\n            setLoading(false);\n          }\n        );\n      } else if (searchType === SearchType.Anime) {\n        searchAnime(searchValue, 10).then(\n          (res) => {\n            console.log(res);\n            setSearchResult(\n              res.data.results.map((elem) => ({\n                id: elem.mal_id,\n                label: elem.title,\n                imageUrl: elem.image_url,\n              }))\n            );\n            setLoading(false);\n          },\n          (err) => {\n            setMessage?.({\n              text: \"Could not search, either MAL or Jikan's API is down\",\n              severity: \"error\",\n            });\n            setLoading(false);\n          }\n        );\n      } else if (searchType === SearchType.Manga) {\n        searchManga(searchValue, 10).then(\n          (res) => {\n            setSearchResult(\n              res.data.results.map((elem) => ({\n                id: elem.mal_id,\n                label: elem.title,\n                imageUrl: elem.image_url,\n              }))\n            );\n            setLoading(false);\n          },\n          (err) => {\n            setMessage?.({\n              text: \"Could not search, either MAL or Jikan's API is down\",\n              severity: \"error\",\n            });\n            setLoading(false);\n          }\n        );\n      }\n    }\n  };\n\n  //Handle when a user clicks a search result entry\n  const handleOnSelect = (id: number): void => {\n    setLoading(true);\n    if (searchType === SearchType.TVshow) {\n      getSeriesCharacters(id).then((res) => {\n        console.log(res);\n        setMediaId(id);\n        setCharacterData(\n          res.data.data.map((elem) => ({\n            id: elem.id,\n            name: elem.role,\n            actor: elem.name,\n            imageUrl: elem.image\n              ? `${TVDBImgUrl}${elem.image}`\n              : missingActorUrl,\n          }))\n        );\n      });\n      setLoading(false);\n    } else if (searchType === SearchType.Anime) {\n      getAnimeCharactersStaff(id)\n        .then((res) => {\n          //console.log(res);\n          if (!res || res.data.characters.length === 0) {\n            setMessage?.({\n              text: \"Uh oh, looks like that Anime entry has no characters.\",\n              severity: \"error\",\n            });\n          } else {\n            setMediaId(id);\n            setCharacterData(\n              res.data.characters.map((elem) => ({\n                ...elem,\n                id: elem.mal_id,\n                imageUrl: elem.image_url,\n              }))\n            );\n          }\n          setLoading(false);\n        })\n        .catch((err) => {\n          setMessage?.(err.response.data.message);\n          setLoading(false);\n        });\n    } else if (searchType === SearchType.Manga) {\n      getMangaCharacters(id)\n        .then((res) => {\n          console.log(res);\n          if (!res || res.data.characters.length === 0) {\n            setMessage?.({\n              text: \"Uh oh, looks like that Manga entry has no characters.\",\n              severity: \"error\",\n            });\n          } else {\n            setMediaId(id);\n            setCharacterData(\n              res.data.characters.map((elem) => ({\n                ...elem,\n                id: elem.mal_id,\n                imageUrl: elem.image_url,\n              }))\n            );\n          }\n          setLoading(false);\n        })\n        .catch((err) => {\n          setMessage?.({\n            text: err.response.data.message,\n            severity: \"error\",\n          });\n          setLoading(false);\n        });\n    }\n  };\n\n  return (\n    <div className=\"pageRoot\">\n      <SearchBar\n        onSearch={handleSearch}\n        className={classes.searchBar}\n        defaultValue={searchType}\n        onChangeSearchType={(event): void => {\n          setSearchType(event.target.value);\n          //searchType.current = event.target.value;\n          console.log(event.target.value);\n        }}\n      />\n      {!(characterData.length > 0) && (\n        <SearchResults\n          data={searchResult}\n          loading={isLoading}\n          onSelect={handleOnSelect}\n        />\n      )}\n      {isLoading && (\n        <CircularProgress size={150} className={classes.loadingCircle} />\n      )}\n      {characterData.length > 0 && mediaId && (\n        <TierList\n          mediaId={`${mediaTypePrefix[searchType]}${mediaId}`}\n          characterData={characterData}\n        />\n      )}\n    </div>\n  );\n};\n\nexport default ListMaker;\n","import React from \"react\";\nimport \"./Header.scss\";\nimport {\n  AppBar,\n  Toolbar,\n  IconButton,\n  Typography,\n  //Button,\n} from \"@material-ui/core\";\nimport MenuIcon from \"@material-ui/icons/Menu\";\nimport { makeStyles, Theme, createStyles } from \"@material-ui/core/styles\";\nimport AppContext from \"../contexts/AppContext\";\n\nconst useStyles = makeStyles((theme: Theme) =>\n  createStyles({\n    root: {\n      flexGrow: 1,\n    },\n    menuButton: {\n      marginRight: theme.spacing(2),\n    },\n    title: {\n      flexGrow: 1,\n    },\n    \"@media only screen and (min-width: 768px)\": {\n      title: {\n        flexGrow: 1,\n      },\n    },\n  })\n);\n\nconst Header = (): JSX.Element => {\n  const classes = useStyles();\n\n  return (\n    <AppContext.Consumer>\n      {({ setShowSidebar }) => (\n        <div className=\"header\">\n          <AppBar position=\"static\">\n            <Toolbar>\n              <IconButton\n                edge=\"start\"\n                className={classes.menuButton}\n                color=\"inherit\"\n                aria-label=\"menu\"\n                onClick={() => setShowSidebar?.(true)}\n              >\n                <MenuIcon />\n              </IconButton>\n              <Typography variant=\"h4\" className={classes.title}>\n                Tierlist Maker\n              </Typography>\n              {/* <Button color=\"inherit\">Login</Button> */}\n            </Toolbar>\n          </AppBar>\n        </div>\n      )}\n    </AppContext.Consumer>\n  );\n};\n\nexport default Header;\n","import React, { FC, useEffect, useContext } from \"react\";\nimport clsx from \"clsx\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport {\n  Drawer,\n  List,\n  ListItem,\n  ListItemIcon,\n  ListItemText,\n  Divider,\n} from \"@material-ui/core\";\n//import InboxIcon from \"@material-ui/icons/MoveToInbox\";\n//import MailIcon from \"@material-ui/icons/Mail\";\nimport HomeIcon from \"@material-ui/icons/Home\";\nimport NoteAddIcon from \"@material-ui/icons/NoteAdd\";\nimport AppContext from \"../contexts/AppContext\";\nimport { useHistory, useLocation } from \"react-router-dom\";\n\nconst useStyles = makeStyles({\n  list: {\n    width: 250,\n  },\n  fullList: {\n    width: \"auto\",\n  },\n});\n\nconst SideNav: FC = () => {\n  const classes = useStyles();\n  const history = useHistory();\n  const location = useLocation();\n  const { showSidebar, setShowSidebar } = useContext(AppContext);\n\n  useEffect(() => {\n    setShowSidebar?.(false);\n  }, [location]);\n\n  const renderListItems = (): JSX.Element => {\n    return (\n      <div className={clsx(classes.list)} role=\"presentation\">\n        <List>\n          <ListItem button onClick={() => history.push(\"/Tierlist\")}>\n            <ListItemIcon>\n              <HomeIcon />\n            </ListItemIcon>\n            <ListItemText primary={\"Home\"} />\n          </ListItem>\n          <ListItem button onClick={() => history.push(\"/Tierlist/create\")}>\n            <ListItemIcon>\n              <NoteAddIcon />\n            </ListItemIcon>\n            <ListItemText primary={\"Tierlist creator\"} />\n          </ListItem>\n        </List>\n        <Divider />\n      </div>\n    );\n  };\n\n  return (\n    <Drawer\n      anchor={\"left\"}\n      open={showSidebar}\n      onClose={() => setShowSidebar?.(false)}\n    >\n      {renderListItems()}\n    </Drawer>\n  );\n};\n\nexport default SideNav;\n","import React from \"react\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport Card from \"@material-ui/core/Card\";\nimport CardContent from \"@material-ui/core/CardContent\";\nimport Typography from \"@material-ui/core/Typography\";\nimport NavigateNextIcon from \"@material-ui/icons/NavigateNext\";\n\nconst useStyles = makeStyles({\n  root: {\n    minWidth: 275,\n  },\n  title: {\n    marginBottom: 10,\n    fontWeight: 500,\n  },\n  stepContainer: {\n    display: \"flex\",\n    flexDirection: \"column\",\n    margin: \"20px auto\",\n    justifyContent: \"center\",\n  },\n  card: {\n    margin: \"10px\",\n  },\n  \"@media only screen and (min-width: 768px)\": {\n    card: {\n      minWidth: 200,\n      marginRight: 12,\n    },\n    stepContainer: {\n      flexDirection: \"row\",\n    },\n  },\n});\n\nconst Homepage = (): JSX.Element => {\n  const classes = useStyles();\n\n  const renderCard = (title: string, body: JSX.Element): JSX.Element => {\n    return (\n      <Card className={classes.card} key={title}>\n        <CardContent>\n          <Typography variant=\"h4\" className={classes.title}>\n            {title}\n          </Typography>\n          {body}\n        </CardContent>\n      </Card>\n    );\n  };\n\n  const step1 = <Typography>Pick a media type to search</Typography>;\n  const step2 = <Typography>Search for your entry</Typography>;\n  const step3 = <Typography>Create your own tierlist</Typography>;\n  const step4 = <Typography>Download it and share it</Typography>;\n\n  const steps = [\n    { title: \"Step 1\", body: step1 },\n    { title: \"Step 2\", body: step2 },\n    { title: \"Step 3\", body: step3 },\n    { title: \"Step 4\", body: step4 },\n  ];\n\n  return (\n    <div>\n      <h1>Make your own Tierlists!</h1>\n      <h2>This page is a Work In Progress.</h2>\n      <div className={classes.stepContainer}>\n        {steps.map((step) => renderCard(step.title, step.body))}\n      </div>\n    </div>\n  );\n};\n\nexport default Homepage;\n","import React, { useState, useEffect, SyntheticEvent } from \"react\";\nimport \"./App.scss\";\nimport ListMaker from \"./pages/ListMaker\";\nimport Header from \"./components/Header\";\nimport { createMuiTheme } from \"@material-ui/core/styles\";\nimport { ThemeProvider } from \"@material-ui/styles\";\nimport SideNav from \"./components/SideNav\";\nimport AppContext from \"./contexts/AppContext\";\nimport { BrowserRouter as Router, Switch, Route, Link } from \"react-router-dom\";\nimport Homepage from \"./pages/Homepage\";\nimport { Snackbar } from \"@material-ui/core\";\nimport Alert from \"@material-ui/lab/Alert\";\nimport { SnackbarMessage } from \"./utils/common\";\n\nconst darkTheme = createMuiTheme({\n  palette: {\n    type: \"dark\",\n  },\n});\n\nconst App = (): React.ReactElement => {\n  const [showSidebar, setShowSidebar] = useState<boolean>(false);\n  const [showSnackbar, setShowSnackbar] = useState<boolean>(false);\n  const [message, setMessage] = useState<SnackbarMessage>({\n    text: \"\",\n    severity: \"success\",\n  });\n\n  const handleCloseMessage = (): void => {\n    setMessage({ text: \"\", severity: message.severity });\n  };\n\n  const handleSnackbarClose = (event: SyntheticEvent, reason: string): void => {\n    if (reason === \"clickaway\") return;\n    setShowSnackbar(false);\n  };\n\n  //Show the snackbar when there's a message available\n  useEffect(() => {\n    if (message?.text) {\n      setShowSnackbar(true);\n    } else {\n      setShowSnackbar(false);\n    }\n  }, [message]);\n\n  return (\n    <div id=\"app\">\n      <ThemeProvider theme={darkTheme}>\n        <AppContext.Provider\n          value={{ showSidebar, setShowSidebar, setMessage }}\n        >\n          <Header />\n          <div id=\"appContent\">\n            <Router>\n              <Switch>\n                <Route path=\"/Tierlist/create\">\n                  <ListMaker />\n                </Route>\n                <Route path=\"/Tierlist/\">\n                  <Homepage />\n                </Route>\n              </Switch>\n              <SideNav />\n            </Router>\n          </div>\n          <Snackbar\n            open={showSnackbar}\n            autoHideDuration={6000}\n            onClose={handleSnackbarClose}\n          >\n            <Alert\n              elevation={6}\n              variant=\"filled\"\n              onClose={handleCloseMessage}\n              severity={message?.severity}\n            >\n              {message?.text}\n            </Alert>\n          </Snackbar>\n        </AppContext.Provider>\n      </ThemeProvider>\n    </div>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport Firebase from \"./firebase\";\n\nconst FirebaseContext = React.createContext<Firebase | null>(null);\n\nexport default FirebaseContext;\n","import firebase from \"firebase/app\";\n\nimport \"firebase/functions\";\nimport \"firebase/firestore\";\n\nconst prodConfig = {\n  apiKey: process.env.REACT_APP_PROD_API_KEY,\n  authDomain: process.env.REACT_APP_PROD_AUTH_DOMAIN,\n  databaseURL: process.env.REACT_APP_PROD_DATABASE_URL,\n  projectId: process.env.REACT_APP_PROD_PROJECT_ID,\n  storageBucket: process.env.REACT_APP_PROD_STORAGE_BUCKET,\n  messagingSenderId: process.env.REACT_APP_PROD_MESSAGING_SENDER_ID,\n  appId: process.env.REACT_APP_PROD_APP_ID,\n  measurementId: process.env.REACT_APP_PROD_MEASUREMENT_ID,\n};\n\n// const devConfig = {\n//   apiKey: process.env.REACT_APP_DEV_API_KEY,\n//   authDomain: process.env.REACT_APP_DEV_AUTH_DOMAIN,\n//   databaseURL: process.env.REACT_APP_DEV_DATABASE_URL,\n//   projectId: process.env.REACT_APP_DEV_PROJECT_ID,\n//   storageBucket: process.env.REACT_APP_DEV_STORAGE_BUCKET,\n//   messagingSenderId: process.env.REACT_APP_DEV_MESSAGING_SENDER_ID,\n// };\n\n// const config = process.env.NODE_ENV === \"production\" ? prodConfig : devConfig;\n\nclass Firebase {\n  db: firebase.firestore.Firestore;\n  functions: firebase.functions.Functions;\n\n  constructor() {\n    //firebase.initializeApp();\n    firebase.initializeApp(prodConfig);\n    this.db = firebase.firestore();\n    this.functions = firebase.functions();\n    this.functions.useFunctionsEmulator(\"http://localhost:5001\");\n\n    if (process.env.NODE_ENV !== \"production\") {\n      this.db.settings({\n        host: \"localhost:8080\",\n        ssl: false,\n      });\n    }\n  }\n}\n\nexport default Firebase;\n","import FirebaseContext from \"./context\";\nimport Firebase from \"./firebase\";\n\nexport default Firebase;\n\nexport { FirebaseContext };\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App.tsx\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport Firebase, { FirebaseContext } from \"./components/Firebase\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <FirebaseContext.Provider value={new Firebase()}>\n      <App />\n    </FirebaseContext.Provider>\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}